{
  "address": "0x846C48E6493012023BA79D51a8CD0D61E4D4d973",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "CarAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "CarNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_filecoinId",
          "type": "uint64"
        }
      ],
      "name": "InvalidReplicaFilecoinDealState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "InvalidReplicaState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "ReplicaAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "ReplicaFilecoinClaimIdExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "ReplicaNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "log",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sendr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "allowd",
          "type": "address"
        }
      ],
      "name": "errorAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "CarReplicaExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "CarReplicaFilecoinClaimIdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_matchingState",
          "type": "string"
        }
      ],
      "name": "CarReplicaMatchingState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_replicaIndex",
          "type": "uint16"
        }
      ],
      "name": "CarReplicaRegisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "CarReplicaSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "_cids",
          "type": "bytes32[]"
        }
      ],
      "name": "CarsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_cid",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_size",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_replicaCount",
          "type": "uint16"
        }
      ],
      "name": "addCar",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_cids",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64[]",
          "name": "_sizes",
          "type": "uint64[]"
        },
        {
          "internalType": "uint16",
          "name": "_replicaCount",
          "type": "uint16"
        }
      ],
      "name": "addCars",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carsCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filplus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filecoin",
          "type": "address"
        }
      ],
      "name": "carstoreBaseInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filecoin",
      "outputs": [
        {
          "internalType": "contract IFilecoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filplus",
      "outputs": [
        {
          "internalType": "contract IFilplus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getCarDatasetId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getCarHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getCarId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getCarMatchingIds",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getCarReplica",
      "outputs": [
        {
          "internalType": "enum CarReplicaType.State",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getCarReplicaFilecoinClaimId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getCarReplicaState",
      "outputs": [
        {
          "internalType": "enum CarReplicaType.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getCarReplicasCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getCarSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_ids",
          "type": "uint64[]"
        }
      ],
      "name": "getCarsHashs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_hashs",
          "type": "bytes32[]"
        }
      ],
      "name": "getCarsIds",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_ids",
          "type": "uint64[]"
        }
      ],
      "name": "getCarsSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "hasCar",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "hasCarHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "hasCarReplica",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_ids",
          "type": "uint64[]"
        }
      ],
      "name": "hasCars",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_hashs",
          "type": "bytes32[]"
        }
      ],
      "name": "hasCarsHashs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filplus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filecoin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_replicaIndex",
          "type": "uint16"
        }
      ],
      "name": "registCarReplica",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "reportCarReplicaExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_matchingState",
          "type": "bool"
        }
      ],
      "name": "reportCarReplicaMatchingState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "reportCarReplicaSlashed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "setCarReplicaFilecoinClaimId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "41e379183134fdd1b89fe7b3f8116a55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CarAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"CarNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_filecoinId\",\"type\":\"uint64\"}],\"name\":\"InvalidReplicaFilecoinDealState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"InvalidReplicaState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"ReplicaAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"ReplicaFilecoinClaimIdExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"ReplicaNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"log\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sendr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowd\",\"type\":\"address\"}],\"name\":\"errorAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"CarReplicaExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"CarReplicaFilecoinClaimIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_matchingState\",\"type\":\"string\"}],\"name\":\"CarReplicaMatchingState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_replicaIndex\",\"type\":\"uint16\"}],\"name\":\"CarReplicaRegisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"CarReplicaSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_cids\",\"type\":\"bytes32[]\"}],\"name\":\"CarsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_cid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_size\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_replicaCount\",\"type\":\"uint16\"}],\"name\":\"addCar\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_cids\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"_sizes\",\"type\":\"uint64[]\"},{\"internalType\":\"uint16\",\"name\":\"_replicaCount\",\"type\":\"uint16\"}],\"name\":\"addCars\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carsCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filplus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filecoin\",\"type\":\"address\"}],\"name\":\"carstoreBaseInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filecoin\",\"outputs\":[{\"internalType\":\"contract IFilecoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filplus\",\"outputs\":[{\"internalType\":\"contract IFilplus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getCarDatasetId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getCarHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getCarId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getCarMatchingIds\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getCarReplica\",\"outputs\":[{\"internalType\":\"enum CarReplicaType.State\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getCarReplicaFilecoinClaimId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getCarReplicaState\",\"outputs\":[{\"internalType\":\"enum CarReplicaType.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getCarReplicasCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getCarSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_ids\",\"type\":\"uint64[]\"}],\"name\":\"getCarsHashs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_hashs\",\"type\":\"bytes32[]\"}],\"name\":\"getCarsIds\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_ids\",\"type\":\"uint64[]\"}],\"name\":\"getCarsSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"hasCar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"hasCarHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"hasCarReplica\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_ids\",\"type\":\"uint64[]\"}],\"name\":\"hasCars\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_hashs\",\"type\":\"bytes32[]\"}],\"name\":\"hasCarsHashs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filplus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filecoin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_replicaIndex\",\"type\":\"uint16\"}],\"name\":\"registCarReplica\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"reportCarReplicaExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_matchingState\",\"type\":\"bool\"}],\"name\":\"reportCarReplicaMatchingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"reportCarReplicaSlashed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"setCarReplicaFilecoinClaimId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract provides functionality for managing car data and associated replicas.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"CarReplicaExpired(uint64,uint64)\":{\"details\":\"This function allows reporting that the storage deal for a replica has expired.\",\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"}},\"CarReplicaMatchingState(uint64,uint64,string)\":{\"details\":\"This function allows reporting that the matching for a replica has failed.\",\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\",\"_matchingState\":\"Matching state of the replica.\"}},\"CarReplicaSlashed(uint64,uint64)\":{\"details\":\"This function allows reporting that the storage of a replica has been slashed.\",\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addCar(bytes32,uint64,uint64,uint16)\":{\"details\":\"Internal function to add a car based on its CID.      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.      filplus requires dataset replicas,but not limit for car replicas\",\"params\":{\"_cid\":\"Car CID to be added.\",\"_datasetId\":\"dataset index of approved dataset\",\"_replicaCount\":\"count of car's replicas\",\"_size\":\"size of car\"}},\"addCars(bytes32[],uint64,uint64[],uint16)\":{\"details\":\"This function allows the addition of multiple cars at once.\",\"params\":{\"_cids\":\"Array of car CIDs to be added.\",\"_datasetId\":\"dataset index of approved dataset\",\"_replicaCount\":\"count of car's replicas\",\"_sizes\":\"car size array\"},\"returns\":{\"_0\":\"The ids of the cars and the size.\"}},\"getCarDatasetId(uint64)\":{\"params\":{\"_id\":\"Car ID to check.\"},\"returns\":{\"_0\":\"The dataset ID of the car.\"}},\"getCarHash(uint64)\":{\"params\":{\"_id\":\"Car ID which to get car hash.\"},\"returns\":{\"_0\":\"The hash of the car.\"}},\"getCarId(bytes32)\":{\"params\":{\"_hash\":\"The hash which to get car id.\"},\"returns\":{\"_0\":\"The id of the car.\"}},\"getCarMatchingIds(uint64)\":{\"params\":{\"_id\":\"Car ID associated with the replica.\"},\"returns\":{\"_0\":\"The matching ids of the car's replica.\"}},\"getCarReplica(uint64,uint64)\":{\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"},\"returns\":{\"_0\":\"The dataset ID, state, and Filecoin claim ID of the replica.\"}},\"getCarReplicaFilecoinClaimId(uint64,uint64)\":{\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"},\"returns\":{\"_0\":\"The Filecoin claim ID of the replica.\"}},\"getCarReplicaState(uint64,uint64)\":{\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"},\"returns\":{\"_0\":\"The state of the replica.\"}},\"getCarReplicasCount(uint64)\":{\"details\":\"This function returns the number of replicas associated with a car.\",\"params\":{\"_id\":\"Car ID for which to retrieve the replica count.\"},\"returns\":{\"_0\":\"The count of replicas associated with the car.\"}},\"getCarSize(uint64)\":{\"params\":{\"_id\":\"Car ID to check.\"},\"returns\":{\"_0\":\"The car size of the car.\"}},\"getCarsHashs(uint64[])\":{\"params\":{\"_ids\":\"An array of car IDs for which to get car hashs.\"},\"returns\":{\"_0\":\"The hashs of cars.\"}},\"getCarsIds(bytes32[])\":{\"params\":{\"_hashs\":\"An array of car hashs for which to cat car hashs.\"},\"returns\":{\"_0\":\"The ids of cars.\"}},\"getCarsSize(uint64[])\":{\"params\":{\"_ids\":\"An array of car IDs for which to calculate the size.\"},\"returns\":{\"_0\":\"The total size of cars.\"}},\"hasCar(uint64)\":{\"details\":\"This function returns whether a car exists or not.\",\"params\":{\"_id\":\"Car ID to check.\"},\"returns\":{\"_0\":\"True if the car exists, false otherwise.\"}},\"hasCarHash(bytes32)\":{\"details\":\"This function returns whether a car exists or not.\",\"params\":{\"_hash\":\"Car Hash to check.\"},\"returns\":{\"_0\":\"True if the car exists, false otherwise.\"}},\"hasCarReplica(uint64,uint64)\":{\"details\":\"This function returns whether a replica with the specified matching ID exists within a car or not.\",\"params\":{\"_id\":\"Car ID to check.\",\"_matchingId\":\"Matching ID of the replica to check.\"},\"returns\":{\"_0\":\"True if the replica exists, false otherwise.\"}},\"hasCars(uint64[])\":{\"details\":\"This function returns whether all the specified cars exist or not.\",\"params\":{\"_ids\":\"Array of car IDs to check.\"},\"returns\":{\"_0\":\"True if all specified cars exist, false if any one does not exist.\"}},\"hasCarsHashs(bytes32[])\":{\"details\":\"This function returns whether a car exists or not.\",\"params\":{\"_hashs\":\"Array of car Hashs to check.\"},\"returns\":{\"_0\":\"True if the car exists, false otherwise.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registCarReplica(uint64,uint64,uint16)\":{\"details\":\"This function allows adding a replica to an existing car.\",\"params\":{\"_id\":\"Car ID to which the replica will be added.\",\"_matchingId\":\"Matching ID for the new replica.\",\"_replicaIndex\":\"The index of the replica.\"}},\"reportCarReplicaExpired(uint64,uint64,uint64)\":{\"details\":\"This function allows reporting that the storage deal for a replica has expired.\",\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"}},\"reportCarReplicaMatchingState(uint64,uint64,bool)\":{\"details\":\"This function allows reporting that the matching for a replica is failed.\",\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\",\"_matchingState\":\"Matching's state of the replica, true for success ,false for failed.\"}},\"reportCarReplicaSlashed(uint64,uint64,uint64)\":{\"details\":\"This function allows reporting that the storage of a replica has been slashed.\",\"params\":{\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"}},\"setCarReplicaFilecoinClaimId(uint64,uint64,uint64)\":{\"details\":\"This function allows setting the Filecoin claim ID for a specific replica's storage.\",\"params\":{\"_claimId\":\"New Filecoin claim ID to set for the replica's storage.\",\"_id\":\"Car ID associated with the replica.\",\"_matchingId\":\"Matching ID of the replica.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"CarsStorageBase\",\"version\":1},\"userdoc\":{\"errors\":{\"CarNotExist(uint64)\":[{\"notice\":\"car errors\"}]},\"events\":{\"CarReplicaExpired(uint64,uint64)\":{\"notice\":\"Report that storage deal for a replica has expired.\"},\"CarReplicaFilecoinClaimIdSet(uint64,uint64,uint64)\":{\"notice\":\"Emitted when the Filecoin claim ID is set for a replica's storage.\"},\"CarReplicaMatchingState(uint64,uint64,string)\":{\"notice\":\"Report that matching for a replica has failed.\"},\"CarReplicaRegisted(uint64,uint64,uint16)\":{\"notice\":\"Emitted when a replica is registed to a car.\"},\"CarReplicaSlashed(uint64,uint64)\":{\"notice\":\"Report that storage of a replica has been slashed.\"},\"CarsAdded(bytes32[])\":{\"notice\":\"Emitted when multiple cars are added to the storage.\"}},\"kind\":\"user\",\"methods\":{\"addCars(bytes32[],uint64,uint64[],uint16)\":{\"notice\":\"Add multiple cars to the storage.\"},\"carstoreBaseInitialize(address,address,address)\":{\"notice\":\"carstoreBaseInitialize function to initialize the contract and grant the default admin role to the deployer.\"},\"filecoin()\":{\"notice\":\"get filecoin object\"},\"filplus()\":{\"notice\":\"get filplus object\"},\"getCarDatasetId(uint64)\":{\"notice\":\"Get the dataset ID associated with a car.\"},\"getCarHash(uint64)\":{\"notice\":\"Get the hash of car based on the car id.\"},\"getCarId(bytes32)\":{\"notice\":\"Get the car's id based on the car's hash.\"},\"getCarMatchingIds(uint64)\":{\"notice\":\"Get the matching ids of a replica associated with a car.\"},\"getCarReplica(uint64,uint64)\":{\"notice\":\"Get the replica details associated with a car.\"},\"getCarReplicaFilecoinClaimId(uint64,uint64)\":{\"notice\":\"Get the Filecoin claim ID associated with a specific replica of a car.\"},\"getCarReplicaState(uint64,uint64)\":{\"notice\":\"Get the state of a replica associated with a car.\"},\"getCarReplicasCount(uint64)\":{\"notice\":\"Get the count of replicas associated with a car.\"},\"getCarSize(uint64)\":{\"notice\":\"Get the dataset ID associated with a car.\"},\"getCarsHashs(uint64[])\":{\"notice\":\"Get the hashs of cars based on an array of car IDs.\"},\"getCarsIds(bytes32[])\":{\"notice\":\"Get the ids of cars based on an array of car hashs.\"},\"getCarsSize(uint64[])\":{\"notice\":\"Get the total size of cars based on an array of car IDs.\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"hasCar(uint64)\":{\"notice\":\"Check if a car exists based on its ID.\"},\"hasCarHash(bytes32)\":{\"notice\":\"Check if a car exists based on its Hash.\"},\"hasCarReplica(uint64,uint64)\":{\"notice\":\"Check if a replica exists within a car based on its matching ID.\"},\"hasCars(uint64[])\":{\"notice\":\"Check if multiple cars exist based on their IDs.\"},\"hasCarsHashs(bytes32[])\":{\"notice\":\"Check if a car exists based on its Hashs.\"},\"initialize(address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"registCarReplica(uint64,uint64,uint16)\":{\"notice\":\"Regist a replica to a car.\"},\"reportCarReplicaExpired(uint64,uint64,uint64)\":{\"notice\":\"Report that storage deal for a replica has expired.\"},\"reportCarReplicaMatchingState(uint64,uint64,bool)\":{\"notice\":\"Report that matching's state for a replica.\"},\"reportCarReplicaSlashed(uint64,uint64,uint64)\":{\"notice\":\"Report that storage of a replica has been slashed.\"},\"setCarReplicaFilecoinClaimId(uint64,uint64,uint64)\":{\"notice\":\"Set the Filecoin claim ID for a replica's storage.\"}},\"notice\":\"This contract allows adding cars and managing their associated replicas.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/core/carstore/Carstore.sol\":\"Carstore\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030363336353036303633\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/core/carstore/Carstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///shared\\nimport {CarstoreEvents} from \\\"src/v0.8/shared/events/CarstoreEvents.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///library\\nimport {CarLIB} from \\\"src/v0.8/core/carstore/library/CarLIB.sol\\\";\\n///abstract\\nimport {CarstoreBase} from \\\"src/v0.8/core/carstore/abstract/CarstoreBase.sol\\\";\\n///type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title CarsStorageBase\\n/// @notice This contract allows adding cars and managing their associated replicas.\\n/// @dev This contract provides functionality for managing car data and associated replicas.\\ncontract Carstore is Initializable, UUPSUpgradeable, CarstoreBase {\\n    using CarLIB for CarReplicaType.Car;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    function initialize(\\n        address _roles,\\n        address _filplus,\\n        address _filecoin\\n    ) public initializer {\\n        CarstoreBase.carstoreBaseInitialize(_roles, _filplus, _filecoin);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset\\n    /// @param _size size of car\\n    /// @param _replicaCount count of car's replicas\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    )\\n        public\\n        onlyCarNotExist(this, _cid)\\n        onlyNotZero(_datasetId)\\n        onlyNotZero(_size)\\n        returns (uint64)\\n    {\\n        carsCount++;\\n        CarReplicaType.Car storage car = cars[_cid];\\n        car._setDatasetId(_datasetId);\\n        car._initRepicas(_replicaCount);\\n        car.id = carsCount;\\n        car.size = _size;\\n        carsIndexes[carsCount] = _cid;\\n        return car.id;\\n    }\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset\\n    /// @param _sizes car size array\\n    /// @param _replicaCount count of car's replicas\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external onlyNotZero(_datasetId) returns (uint64[] memory, uint64) {\\n        require(_cids.length == _sizes.length, \\\"Invalid params\\\");\\n        uint64 totalSize;\\n        uint64[] memory ids = new uint64[](_cids.length);\\n        for (uint64 i; i < _cids.length; i++) {\\n            ids[i] = addCar(_cids[i], _datasetId, _sizes[i], _replicaCount);\\n            totalSize += _sizes[i];\\n        }\\n\\n        emit CarstoreEvents.CarsAdded(_cids);\\n        return (ids, totalSize);\\n    }\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    )\\n        external\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaNotExist(this, _id, _matchingId)\\n    {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        require(\\n            _replicaIndex < car._getRepicasCount(),\\n            \\\"Invalid replica index\\\"\\n        );\\n\\n        car._registRepica(_matchingId, _replicaIndex);\\n\\n        emit CarstoreEvents.CarReplicaRegisted(_id, _matchingId, _replicaIndex);\\n    }\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    )\\n        external\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n    {\\n        if (_matchingState) {\\n            _emitRepicaEvent(\\n                _id,\\n                _matchingId,\\n                CarReplicaType.Event.MatchingCompleted\\n            );\\n            emit CarstoreEvents.CarReplicaMatchingState(\\n                _id,\\n                _matchingId,\\n                \\\"success\\\"\\n            );\\n        } else {\\n            _emitRepicaEvent(\\n                _id,\\n                _matchingId,\\n                CarReplicaType.Event.MatchingFailed\\n            );\\n            emit CarstoreEvents.CarReplicaMatchingState(\\n                _id,\\n                _matchingId,\\n                \\\"failed\\\"\\n            );\\n        }\\n    }\\n\\n    function _checkCarReplicaDealState(\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _dealState\\n    ) internal {\\n        if (\\n            _dealState !=\\n            filecoin.getReplicaDealState(getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n    }\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    )\\n        external\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n        onlyCarReplicaState(this, _id, _matchingId, CarReplicaType.State.Stored)\\n    {\\n        _checkCarReplicaDealState(\\n            _id,\\n            _claimId,\\n            FilecoinType.DealState.Expired\\n        );\\n        _emitRepicaEvent(\\n            _id,\\n            _matchingId,\\n            CarReplicaType.Event.StorageDealExpired\\n        );\\n        emit CarstoreEvents.CarReplicaExpired(_id, _matchingId);\\n    }\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    )\\n        external\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n        onlyCarReplicaState(this, _id, _matchingId, CarReplicaType.State.Stored)\\n    {\\n        _checkCarReplicaDealState(\\n            _id,\\n            _claimId,\\n            FilecoinType.DealState.Slashed\\n        );\\n        _emitRepicaEvent(_id, _matchingId, CarReplicaType.Event.StorageSlashed);\\n        emit CarstoreEvents.CarReplicaSlashed(_id, _matchingId);\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    function _checkCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) internal view {\\n        if (_state != getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n    }\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    )\\n        external\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyNotZero(_claimId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n        onlyUnsetCarReplicaFilecoinClaimId(this, _id, _matchingId)\\n    {\\n        _checkCarReplicaState(_id, _matchingId, CarReplicaType.State.Matched);\\n        bytes32 _hash = _getHash(_id);\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        car._setReplicaFilecoinClaimId(_hash, _matchingId, _claimId, filecoin);\\n\\n        emit CarstoreEvents.CarReplicaFilecoinClaimIdSet(\\n            _id,\\n            _matchingId,\\n            _claimId\\n        );\\n    }\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(\\n        uint64 _id\\n    ) public view onlyCarExist(this, _id) returns (uint64) {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car.size;\\n    }\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) public view returns (uint64) {\\n        uint64 size = 0;\\n        for (uint64 i = 0; i < _ids.length; i++) {\\n            size += getCarSize(_ids[i]);\\n        }\\n        return size;\\n    }\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    function getCarDatasetId(uint64 _id) public view returns (uint64) {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car._getDatasetId();\\n    }\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) public view onlyCarExist(this, _id) returns (uint64[] memory) {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car._getMatchingIds();\\n    }\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    )\\n        public\\n        view\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n        returns (CarReplicaType.State, uint64)\\n    {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return (\\n            car._getReplicaState(_matchingId),\\n            car._getReplicaFilecoinClaimId(_matchingId)\\n        );\\n    }\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @dev This function returns the number of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(\\n        uint64 _id\\n    ) public view onlyCarExist(this, _id) returns (uint16) {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car._getRepicasCount();\\n    }\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    )\\n        public\\n        view\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n        returns (uint64)\\n    {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car._getReplicaFilecoinClaimId(_matchingId);\\n    }\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    )\\n        public\\n        view\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        returns (CarReplicaType.State)\\n    {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car._getReplicaState(_matchingId);\\n    }\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) public view returns (bytes32) {\\n        return _getHash(_id);\\n    }\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) public view returns (bytes32[] memory) {\\n        bytes32[] memory hashs = new bytes32[](_ids.length);\\n        for (uint64 i = 0; i < _ids.length; i++) {\\n            hashs[i] = _getHash(_ids[i]);\\n        }\\n        return hashs;\\n    }\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) public view returns (uint64) {\\n        return _getId(_hash);\\n    }\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) public view returns (uint64[] memory) {\\n        uint64[] memory ids = new uint64[](_hashs.length);\\n        for (uint64 i = 0; i < _hashs.length; i++) {\\n            ids[i] = _getId(_hashs[i]);\\n        }\\n        return ids;\\n    }\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) public view returns (bool) {\\n        CarReplicaType.Car storage car = cars[_hash];\\n        return car.datasetId != 0;\\n    }\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) public view returns (bool) {\\n        require(_id != 0, \\\"Invalid car id\\\");\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car.id == _id;\\n    }\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @dev This function returns whether a replica with the specified matching ID exists within a car or not.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) public view onlyCarExist(this, _id) returns (bool) {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        return car._hasReplica(_matchingId);\\n    }\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) public view returns (bool) {\\n        for (uint64 i; i < _hashs.length; i++) {\\n            if (!hasCarHash(_hashs[i])) return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @dev This function returns whether all the specified cars exist or not.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) public view returns (bool) {\\n        for (uint64 i; i < _ids.length; i++) {\\n            if (!hasCar(_ids[i])) return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc55749defad4679c5bcdebcf0bc9bc4e6125216dcb9e174df0cab7ccd2a4f998\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/core/carstore/abstract/CarstoreBase.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"../../../shared/modifiers/CarstoreModifiers.sol\\\";\\n///library\\nimport {CarLIB} from \\\"../library/CarLIB.sol\\\";\\n///type\\nimport {CarReplicaType} from \\\"../../../types/CarReplicaType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title CarsStorageBase\\n/// @notice This contract allows adding cars and managing their associated replicas.\\n/// @dev This contract provides functionality for managing car data and associated replicas.\\nabstract contract CarstoreBase is Initializable, ICarstore, CarstoreModifiers {\\n    using CarLIB for CarReplicaType.Car;\\n\\n    uint64 public carsCount;\\n    ///Car CID=> Car\\n    mapping(bytes32 => CarReplicaType.Car) internal cars;\\n    mapping(uint64 => bytes32) internal carsIndexes;\\n\\n    IRoles internal roles;\\n    IFilplus public filplus;\\n    IFilecoin public filecoin;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice carstoreBaseInitialize function to initialize the contract and grant the default admin role to the deployer.\\n    function carstoreBaseInitialize(\\n        address _roles,\\n        address _filplus,\\n        address _filecoin\\n    ) public virtual onlyInitializing {\\n        roles = IRoles(_roles);\\n        filplus = IFilplus(_filplus);\\n        filecoin = IFilecoin(_filecoin);\\n    }\\n\\n    /// @notice Post an event for a car's replica based on the matching ID, triggering state transitions.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _event Event to be posted.\\n    function _emitRepicaEvent(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.Event _event\\n    )\\n        internal\\n        onlyCarExist(this, _id)\\n        onlyNotZero(_matchingId)\\n        onlyCarReplicaExist(this, _id, _matchingId)\\n    {\\n        CarReplicaType.Car storage car = _getCar(_id);\\n        car._emitRepicaEvent(_matchingId, _event);\\n    }\\n\\n    /// @notice Get the car ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car struct.\\n    function _getCar(\\n        uint64 _id\\n    ) internal view returns (CarReplicaType.Car storage) {\\n        bytes32 cid = carsIndexes[_id];\\n        return cars[cid];\\n    }\\n\\n    /// @notice Get a hash of a car based on car id.\\n    /// @param _id The car's id to get hash.\\n    /// @return  The hash of the car.\\n    function _getHash(uint64 _id) internal view returns (bytes32) {\\n        return carsIndexes[_id];\\n    }\\n\\n    /// @notice Get car's id based on car's hash.\\n    /// @param _hash The car's hash to get ID.\\n    /// @return  The id of the car.\\n    function _getId(bytes32 _hash) internal view returns (uint64) {\\n        return cars[_hash].id;\\n    }\\n}\\n\",\"keccak256\":\"0xac743020fac7ee7fa19ff61e19d0840910226ad950a81d9619c79e264a3c6e8f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/core/carstore/library/CarLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {CarReplicaLIB} from \\\"src/v0.8/core/carstore/library/CarReplicaLIB.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title CarLIB\\n/// @dev This library provides functions for managing the lifecycle and events of car and their replicas.\\n/// @notice Library for managing the state, events, and operations related to car and their replicas.\\nlibrary CarLIB {\\n    using CarReplicaLIB for CarReplicaType.Replica;\\n\\n    /// @notice Add a new replica to a car.\\n    /// @dev Requires a non-zero matching ID and that the replica does not already exist.\\n    ///      This should be called by an external dataset contract after a dataset be approved.\\n    /// @param self The reference to the car storage.\\n    /// @param _matchingId The matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function _registRepica(\\n        CarReplicaType.Car storage self,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) internal {\\n        require(_matchingId != 0, \\\"Invalid matching id\\\");\\n        require(!_hasReplica(self, _matchingId), \\\"Replica already exists\\\");\\n\\n        CarReplicaType.Replica storage replica = self.replicas[_replicaIndex];\\n\\n        if (replica.matchingId == 0) {\\n            require(\\n                replica.state == CarReplicaType.State.None,\\n                \\\"Invalid car state\\\"\\n            );\\n        } else {\\n            require(!replica._isStateValid(), \\\"Replica state not match\\\");\\n        }\\n\\n        replica._init(_matchingId);\\n        self.replicaIndex[_matchingId] = _replicaIndex;\\n    }\\n\\n    /// @notice Initialize replica information for the car.\\n    /// @param self The reference to the car storage.\\n    /// @param _replicaCount The total number of storage replicas submitted by the client for the car.\\n    function _initRepicas(\\n        CarReplicaType.Car storage self,\\n        uint16 _replicaCount\\n    ) internal {\\n        require(self.replicas.length == 0, \\\"Replica is not empty\\\");\\n        for (uint16 index = 0; index < _replicaCount; index++) {\\n            CarReplicaType.Replica memory newReplica;\\n            self.replicas.push(newReplica);\\n        }\\n    }\\n\\n    /// @notice Post an event for a car's replica based on the matching ID, triggering state transitions.\\n    /// @dev The state transition is based on the event and the current state of the replica.\\n    /// @param self The reference to the car storage.\\n    /// @param _matchingId The matching ID of the replica.\\n    /// @param _event The event to post.\\n    function _emitRepicaEvent(\\n        CarReplicaType.Car storage self,\\n        uint64 _matchingId,\\n        CarReplicaType.Event _event\\n    ) internal {\\n        require(_hasReplica(self, _matchingId), \\\"Replica is not exists\\\");\\n        uint16 index = self.replicaIndex[_matchingId];\\n        CarReplicaType.Replica storage replica = self.replicas[index];\\n\\n        replica._emitEvent(_event);\\n    }\\n\\n    /// @notice Set the dataset ID for a car\\n    /// @dev Requires a non-zero matching ID and that the replica already exists.\\n    ///      This should be called by an external matching contract after a successful matching process.\\n    /// @param self The reference to the car storage.\\n    /// @param _datasetId The new dataset ID for car to set.\\n    function _setDatasetId(\\n        CarReplicaType.Car storage self,\\n        uint64 _datasetId\\n    ) internal {\\n        require(\\n            _datasetId != 0 && _datasetId != self.datasetId,\\n            \\\"Invalid dataset id\\\"\\n        );\\n        self.datasetId = _datasetId;\\n    }\\n\\n    /// @notice Set the replica filecoin claim ID for a car's replica.\\n    /// @dev Requires non-zero matching ID and Filecoin claim ID, and that the replica exists.\\n    ///      This should be called by an external storage deal contract after a successful storage deal process.\\n    /// @param self The reference to the car storage.\\n    /// @param _matchingId The matching ID of the replica.\\n    /// @param _claimId The new Filecoin claim ID to set.\\n    function _setReplicaFilecoinClaimId(\\n        CarReplicaType.Car storage self,\\n        bytes32 _cid,\\n        uint64 _matchingId,\\n        uint64 _claimId,\\n        IFilecoin _filecoin\\n    ) internal {\\n        require(_matchingId != 0, \\\"Invalid matching id\\\");\\n        require(_claimId != 0, \\\"Invalid filecoin claim id\\\");\\n        require(_hasReplica(self, _matchingId), \\\"Replica is not exists\\\");\\n        uint16 index = self.replicaIndex[_matchingId];\\n        CarReplicaType.Replica storage replica = self.replicas[index];\\n\\n        replica._setFilecoinClaimId(_claimId);\\n\\n        if (\\n            FilecoinType.DealState.Stored ==\\n            _filecoin.getReplicaDealState(_cid, _claimId)\\n        ) {\\n            _emitRepicaEvent(\\n                self,\\n                _matchingId,\\n                CarReplicaType.Event.StorageCompleted\\n            );\\n        } else {\\n            _emitRepicaEvent(\\n                self,\\n                _matchingId,\\n                CarReplicaType.Event.StorageFailed\\n            );\\n        }\\n    }\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @dev Retrieves the dataset ID associated with the car.\\n    /// @param self The reference to the car storage.\\n    /// @return The dataset ID of the car.\\n    function _getDatasetId(\\n        CarReplicaType.Car storage self\\n    ) internal view returns (uint64) {\\n        return self.datasetId;\\n    }\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param self The reference to the car storage.\\n    /// @return The matching ids of the car's replica.\\n    function _getMatchingIds(\\n        CarReplicaType.Car storage self\\n    ) internal view returns (uint64[] memory) {\\n        uint64[] memory matchings = new uint64[](self.replicas.length);\\n        for (uint64 i = 0; i < self.replicas.length; i++) {\\n            if (self.replicas[i]._isStateValid()) {\\n                matchings[i] = self.replicas[i].matchingId;\\n            }\\n        }\\n        return matchings;\\n    }\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @dev Retrieves the count of replicas associated with the car.\\n    /// @param self The reference to the car storage.\\n    /// @return The count of replicas.\\n    function _getRepicasCount(\\n        CarReplicaType.Car storage self\\n    ) internal view returns (uint16) {\\n        return uint16(self.replicas.length);\\n    }\\n\\n    /// @notice Get the count of valid replicas associated with a car.\\n    /// @dev Retrieves the count of replicas associated with the car.\\n    /// @param self The reference to the car storage.\\n    /// @return The count of replicas.\\n    function _getValidRepicasCount(\\n        CarReplicaType.Car storage self\\n    ) internal view returns (uint16) {\\n        uint16 count = 0;\\n        for (uint16 i = 0; i < self.replicas.length; i++) {\\n            if (\\n                self.replicas[i].state == CarReplicaType.State.None ||\\n                self.replicas[i].state == CarReplicaType.State.Matched ||\\n                self.replicas[i].state == CarReplicaType.State.Stored\\n            ) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @dev Retrieves the Filecoin claim ID associated with the given matching ID of a replica.\\n    /// @param self The reference to the car storage.\\n    /// @param _matchingId The matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function _getReplicaFilecoinClaimId(\\n        CarReplicaType.Car storage self,\\n        uint64 _matchingId\\n    ) internal view returns (uint64) {\\n        require(_matchingId != 0, \\\"Invalid matching id\\\");\\n        require(_hasReplica(self, _matchingId), \\\"Replica is not exists\\\");\\n        uint16 index = self.replicaIndex[_matchingId];\\n        CarReplicaType.Replica storage replica = self.replicas[index];\\n        require(replica._isMatchingValid(_matchingId), \\\"Invalid matching id\\\");\\n\\n        return replica.filecoinClaimId;\\n    }\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @dev Retrieves the state of a replica based on the provided matching ID.\\n    /// @param self The reference to the car storage.\\n    /// @param _matchingId The matching ID of the replica.\\n    /// @return The state of the replica.\\n    function _getReplicaState(\\n        CarReplicaType.Car storage self,\\n        uint64 _matchingId\\n    ) internal view returns (CarReplicaType.State) {\\n        require(_matchingId != 0, \\\"Invalid matching id\\\");\\n        uint16 index = self.replicaIndex[_matchingId];\\n        require(index < self.replicas.length, \\\"Index out of bounds\\\");\\n        CarReplicaType.Replica storage replica = self.replicas[index];\\n        require(replica._isMatchingValid(_matchingId), \\\"Invalid matching id\\\");\\n        return replica.state;\\n    }\\n\\n    /// @notice Check if a replica with a specific matching ID exists for a car.\\n    /// @dev Checks whether a replica with the given matching ID exists for the car.\\n    /// @param self The reference to the car storage.\\n    /// @param _matchingId The matching ID to check.\\n    /// @return exists Whether the replica exists or not.\\n    function _hasReplica(\\n        CarReplicaType.Car storage self,\\n        uint64 _matchingId\\n    ) internal view returns (bool) {\\n        require(_matchingId != 0, \\\"Invalid matching id\\\");\\n        uint16 index = self.replicaIndex[_matchingId];\\n        if (self.replicas.length == 0 || index >= self.replicas.length) {\\n            return false;\\n        }\\n\\n        CarReplicaType.Replica storage replica = self.replicas[index];\\n        if (!replica._isMatchingValid(_matchingId)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x8a7b4ffeeceabf949d28e3add7d8432200ab7f4fee3503abcd9e90a78a96bd54\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/core/carstore/library/CarReplicaLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\n\\n/// @title CarReplicaLIB\\n/// @dev This library provides functions to manage the state and events of car replicas.\\n/// @notice Library for managing the lifecycle and events of car replicas.\\nlibrary CarReplicaLIB {\\n    /// @notice Set the Filecoin claim ID for a car replica.\\n    /// @dev Requires a non-zero new Filecoin claim ID and that it's different from the existing one.\\n    ///      This should be called by an external storage deal contract after a successful storage deal process.\\n    /// @param self The reference to the replica storage.\\n    /// @param _claimId The new Filecoin claim ID to set.\\n    function _setFilecoinClaimId(\\n        CarReplicaType.Replica storage self,\\n        uint64 _claimId\\n    ) internal {\\n        require(\\n            _claimId != 0 && self.filecoinClaimId != _claimId,\\n            \\\"Invalid params\\\"\\n        );\\n        self.filecoinClaimId = _claimId;\\n    }\\n\\n    /// @notice Emit an event for a car replica, triggering state transitions.\\n    /// @dev The state transition is based on the event and current state.\\n    ///      Invalid transitions do not change the state.\\n    /// @param self The reference to the replica storage.\\n    /// @param _event The event to post.\\n    function _emitEvent(\\n        CarReplicaType.Replica storage self,\\n        CarReplicaType.Event _event\\n    ) internal {\\n        CarReplicaType.State currentState = self.state;\\n        CarReplicaType.State newState;\\n\\n        // Apply the state transition based on the event\\n        if (_event == CarReplicaType.Event.MatchingFailed) {\\n            if (currentState == CarReplicaType.State.None) {\\n                newState = CarReplicaType.State.StorageFailed;\\n            }\\n        } else if (_event == CarReplicaType.Event.MatchingCompleted) {\\n            if (currentState == CarReplicaType.State.None) {\\n                newState = CarReplicaType.State.Matched;\\n            }\\n        } else if (_event == CarReplicaType.Event.StorageCompleted) {\\n            if (currentState == CarReplicaType.State.Matched) {\\n                newState = CarReplicaType.State.Stored;\\n            }\\n        } else if (_event == CarReplicaType.Event.StorageFailed) {\\n            if (currentState == CarReplicaType.State.Matched) {\\n                newState = CarReplicaType.State.StorageFailed;\\n            }\\n        } else if (_event == CarReplicaType.Event.StorageDealExpired) {\\n            if (currentState == CarReplicaType.State.Stored) {\\n                newState = CarReplicaType.State.Expired;\\n            }\\n        } else if (_event == CarReplicaType.Event.StorageSlashed) {\\n            if (currentState == CarReplicaType.State.Stored) {\\n                newState = CarReplicaType.State.Slashed;\\n            }\\n        }\\n\\n        /// @notice Update the state if newState is not Approved (i.e., a valid transition)\\n        /// @dev The state variable self.state will be updated with the new state if newState is not Approved.\\n        if (newState != CarReplicaType.State.None) {\\n            self.state = newState;\\n        }\\n    }\\n\\n    /// @notice Check if a replica with a specific index valid or not.\\n    /// @param self The reference to the replica storage.\\n    /// @param _matchingId The matching ID of the replica.\\n    function _init(\\n        CarReplicaType.Replica storage self,\\n        uint64 _matchingId\\n    ) internal {\\n        self.matchingId = _matchingId;\\n        self.state = CarReplicaType.State.None;\\n        self.filecoinClaimId = 0;\\n    }\\n\\n    /// @notice Check if a replica with a specific index valid or not.\\n    /// @param self The reference to the replica storage.\\n    /// @param _matchingId The matching ID of the replica.\\n    function _isMatchingValid(\\n        CarReplicaType.Replica storage self,\\n        uint64 _matchingId\\n    ) internal view returns (bool) {\\n        if (self.matchingId != _matchingId) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a replica with a specific index valid or not.\\n    /// @param self The reference to the replica storage.\\n    function _isStateValid(\\n        CarReplicaType.Replica storage self\\n    ) internal view returns (bool) {\\n        if (uint64(self.state) > uint64(CarReplicaType.State.Stored)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa7c5bec93d1a594bb84c7ea2ace020db9912340a09481ce049369971c39a5402\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to init the dependencies of a filecoin.\\n    function initDependencies(address _datacap) external;\\n\\n    /// @notice The function to allocate the datacap of a storage deal.\\n    function allocateDatacap(address client, uint256 _size) external;\\n\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0x1fa5146ddafb3ad304dc3964065a8e7fa91df40b77fc1c47290a738491fe33cb\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n    error NotEnough(uint256 amount, uint256 append);\\n}\\n\",\"keccak256\":\"0x9bb103e0cf0c9cd5a9d200382cc51060a2494f41b38ce2fda1d5762dd9306b94\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/CarstoreEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title Filplus\\nlibrary CarstoreEvents {\\n    /// @notice Emitted when multiple cars are added to the storage.\\n    event CarsAdded(bytes32[] _cids);\\n\\n    /// @notice Emitted when a replica is registed to a car.\\n    event CarReplicaRegisted(\\n        uint64 indexed _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    );\\n\\n    /// @notice Report that matching for a replica has failed.\\n    /// @dev This function allows reporting that the matching for a replica has failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching state of the replica.\\n    event CarReplicaMatchingState(\\n        uint64 indexed _id,\\n        uint64 _matchingId,\\n        string _matchingState\\n    );\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    event CarReplicaExpired(uint64 indexed _id, uint64 _matchingId);\\n\\n    /// @notice Report that storage of a replica has failed.\\n    /// @dev This function allows reporting that the storage of a replica has failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    event CarReplicaFailed(uint64 indexed _id, uint64 _matchingId);\\n\\n    /// @notice Emitted when the Filecoin claim ID is set for a replica's storage.\\n    event CarReplicaFilecoinClaimIdSet(\\n        uint64 indexed _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    event CarReplicaSlashed(uint64 indexed _id, uint64 _matchingId);\\n}\\n\",\"keccak256\":\"0x190d33c3029c701b72882e5e0e3827daa39cca301fca94d9ffa351e6d6f3d50d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    error errorAddress(string log, address sendr, address allowd);\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x1ac59eba93f2539390e854eb786545be0e72be3fbd606dd0f679df3cd0ddf1cd\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        CollateralNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x9108caabc6f94898eae01009a91c9f2f728cb99d7cf80358d4c3b1e4058997f4\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0x3b6918e967adea47fceea5d699a40f86c24c9417379cd387071ee96bb246f7dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516144b361004c60003960008181610eaa01528181610eea01528181610f7201528181610fb2015261102e01526144b36000f3fe60806040526004361061017e5760003560e01c80630f2ca1dc146101835780630fb3ae6a146101b957806313083f86146101e757806326ca5a711461020957806327f51bc3146102365780632bb36e6e14610256578063310805421461028357806334336795146102b05780633659cfe6146102de5780634f1ef286146102fe57806352d1902d1461031157806357e926df146103265780635ca64ded146103465780638314ce091461037357806391e3ce74146103935780639528f062146103b35780639a18ccdc146103d3578063aaf10f4214610400578063b5d5e5cf14610422578063be337ac51461044f578063c084cf031461046f578063c0c53b8b1461048f578063c27638fc146104af578063c3d97a27146104cf578063c66e39bb146104ef578063c73f437e1461051c578063cd17a4a41461053c578063cf24e53b1461055c578063d4c0de381461057c578063e757681a1461059c578063e7628519146105bc578063eb058c64146105dc578063eeec85dc146105fc575b600080fd5b34801561018f57600080fd5b506101a361019e3660046133ab565b61061c565b6040516101b091906133ef565b60405180910390f35b3480156101c557600080fd5b506101d96101d4366004613498565b610685565b6040516101b0929190613595565b3480156101f357600080fd5b506102076102023660046135b5565b61083c565b005b34801561021557600080fd5b50610229610224366004613605565b610a13565b6040516101b0919061362c565b34801561024257600080fd5b506101a3610251366004613605565b610a24565b34801561026257600080fd5b5061027661027136600461363a565b610a72565b6040516101b09190613681565b34801561028f57600080fd5b506102a361029e366004613605565b610c7c565b6040516101b0919061368f565b3480156102bc57600080fd5b506102d06102cb3660046136a0565b610d25565b6040516101b0929190613721565b3480156102ea57600080fd5b506102076102f9366004613767565b610ea0565b61020761030c36600461381f565b610f68565b34801561031d57600080fd5b50610229611021565b34801561033257600080fd5b506102766103413660046136a0565b61107e565b34801561035257600080fd5b506103666103613660046136a0565b6111e4565b6040516101b0919061386c565b34801561037f57600080fd5b5061020761038e36600461387a565b6112ba565b34801561039f57600080fd5b506102076103ae3660046138c0565b611320565b3480156103bf57600080fd5b506102076103ce366004613919565b6115c7565b3480156103df57600080fd5b506103f36103ee3660046133ab565b611792565b6040516101b091906139a9565b34801561040c57600080fd5b5061041561185a565b6040516101b091906139c3565b34801561042e57600080fd5b5061044261043d366004613605565b611869565b6040516101b091906139db565b34801561045b57600080fd5b506102a361046a3660046139e9565b61190b565b34801561047b57600080fd5b5061027661048a366004613a23565b6119d9565b34801561049b57600080fd5b506102076104aa36600461387a565b6119e4565b3480156104bb57600080fd5b506102766104ca3660046133ab565b611ac8565b3480156104db57600080fd5b50606554610276906001600160401b031681565b3480156104fb57600080fd5b50606a5461050f906001600160a01b031681565b6040516101b09190613a7c565b34801561052857600080fd5b506102076105373660046138c0565b611b28565b34801561054857600080fd5b5060695461050f906001600160a01b031681565b34801561056857600080fd5b50610276610577366004613605565b611d87565b34801561058857600080fd5b506101a36105973660046139e9565b611e36565b3480156105a857600080fd5b506102766105b7366004613605565b611e96565b3480156105c857600080fd5b506101a36105d7366004613a23565b611ebf565b3480156105e857600080fd5b506101a36105f73660046136a0565b611ee3565b34801561060857600080fd5b506102076106173660046138c0565b611f8e565b6000805b8251816001600160401b0316101561067c5761065d83826001600160401b03168151811061065057610650613a8a565b6020026020010151610a24565b61066a5750600092915050565b8061067481613ab6565b915050610620565b50600192915050565b6060600084806001600160401b03166000036106bc5760405162461bcd60e51b81526004016106b390613b10565b60405180910390fd5b84518751146106dd5760405162461bcd60e51b81526004016106b390613b45565b60008088516001600160401b038111156106f9576106f961327a565b604051908082528060200260200182016040528015610722578160200160208202803683370190505b50905060005b8951816001600160401b031610156107f75761078a8a826001600160401b03168151811061075857610758613a8a565b60200260200101518a8a846001600160401b03168151811061077c5761077c613a8a565b60200260200101518a610a72565b82826001600160401b0316815181106107a5576107a5613a8a565b6001600160401b0392831660209182029290920101528851899183169081106107d0576107d0613a8a565b6020026020010151836107e39190613b55565b9250806107ef81613ab6565b915050610728565b507fe35ae3ed46deeca961a6cae778eae44a84d8d021bb077e78ccd8f11affa392ed8960405161082791906139a9565b60405180910390a19890975095505050505050565b6040516327f51bc360e01b81523090849082906327f51bc390610863908490600401613681565b602060405180830381865afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190613b93565b6108c35780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036108ed5760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c64906109189085908590600401613bb4565b602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190613b93565b1561097b57818160405163f6bd4eb360e01b81526004016106b3929190613bb4565b60006109868a6121d6565b9050610993816002015490565b61ffff168861ffff16106109b95760405162461bcd60e51b81526004016106b390613bee565b6109c4818a8a6121fd565b896001600160401b03167f41213a28d0a99603b2c14b7f5587f96651326baacb58b9ea1339749170a4f4428a8a6040516109ff929190613bfe565b60405180910390a250505050505050505050565b6000610a1e82612332565b92915050565b6000816001600160401b0316600003610a4f5760405162461bcd60e51b81526004016106b390613c3e565b6000610a5a836121d6565b546001600160401b0390811693169290921492915050565b60405163e762851960e01b815260009030908690829063e762851990610a9c90849060040161362c565b602060405180830381865afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add9190613b93565b15610b6b5760405163c084cf0360e01b81526001600160a01b0383169063c084cf0390610b0e90849060040161362c565b602060405180830381865afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f9190613c59565b8160405163243b1ed560e11b81526004016106b3929190613c7a565b85806001600160401b0316600003610b955760405162461bcd60e51b81526004016106b390613b10565b85806001600160401b0316600003610bbf5760405162461bcd60e51b81526004016106b390613b10565b606580546001600160401b0316906000610bd883613ab6565b82546001600160401b039182166101009390930a9283029190920219909116179055506000898152606660205260409020610c13818a61234d565b610c1d81886123bc565b6065805482546001600160401b038b8116600160801b026001600160401b03600160801b03600160c01b0319909216928116929092171783559054811660009081526067602052604090208b9055905416945050505050949350505050565b6040516327f51bc360e01b81526060903090839082906327f51bc390610ca6908490600401613681565b602060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190613b93565b610d065780604051637ccc4b2f60e11b81526004016106b39190613681565b6000610d11856121d6565b9050610d1c816124a5565b95945050505050565b6000803084816001600160a01b03166327f51bc3826040518263ffffffff1660e01b8152600401610d569190613681565b602060405180830381865afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190613b93565b610db65780604051637ccc4b2f60e11b81526004016106b39190613681565b84806001600160401b0316600003610de05760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309088908890839063eb058c6490610e0b9085908590600401613bb4565b602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190613b93565b610e6d5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b6000610e788b6121d6565b9050610e84818b6125bf565b610e8e828c612691565b98509850505050505050509250929050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ee85760405162461bcd60e51b81526004016106b390613ccf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f1a612767565b6001600160a01b031614610f405760405162461bcd60e51b81526004016106b390613d16565b610f4981612783565b60408051600080825260208201909252610f6591839190612817565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fb05760405162461bcd60e51b81526004016106b390613ccf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fe2612767565b6001600160a01b0316146110085760405162461bcd60e51b81526004016106b390613d16565b61101182612783565b61101d82826001612817565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461106b5760405162461bcd60e51b81526004016106b390613d7b565b5060008051602061441783398151915290565b6040516327f51bc360e01b81526000903090849082906327f51bc3906110a8908490600401613681565b602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190613b93565b6111085780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036111325760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c649061115d9085908590600401613bb4565b602060405180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190613b93565b6111bf5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b60006111ca8a6121d6565b90506111d6818a612691565b9a9950505050505050505050565b6040516327f51bc360e01b81526000903090849082906327f51bc39061120e908490600401613681565b602060405180830381865afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f9190613b93565b61126e5780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036112985760405162461bcd60e51b81526004016106b390613b10565b60006112a3876121d6565b90506112af81876125bf565b979650505050505050565b600054610100900460ff166112e15760405162461bcd60e51b81526004016106b390613dd3565b606880546001600160a01b039485166001600160a01b0319918216179091556069805493851693821693909317909255606a8054919093169116179055565b6040516327f51bc360e01b81523090849082906327f51bc390611347908490600401613681565b602060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613b93565b6113a75780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036113d15760405162461bcd60e51b81526004016106b390613b10565b83806001600160401b03166000036113fb5760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309088908890839063eb058c64906114269085908590600401613bb4565b602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190613b93565b6114885781816040516333fcc5d360e11b81526004016106b3929190613bb4565b6040516357e926df60e01b815230908b908b9083906357e926df906114b39085908590600401613bb4565b602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190613c59565b6001600160401b03161561151f578181604051637f579cdf60e01b81526004016106b3929190613bb4565b61152b8d8d60016128f9565b60006115368e612332565b905060006115438f6121d6565b9050611573828f8f606a60009054906101000a90046001600160a01b03168561294890949392919063ffffffff16565b8e6001600160401b03167f71d4ff176efe5dd026d11903476249f064ccc8abf867ae20fe24ecb57f87aade8f8f6040516115ae929190613bb4565b60405180910390a2505050505050505050505050505050565b6040516327f51bc360e01b81523090849082906327f51bc3906115ee908490600401613681565b602060405180830381865afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f9190613b93565b61164e5780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036116785760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c64906116a39085908590600401613bb4565b602060405180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190613b93565b6117055781816040516333fcc5d360e11b81526004016106b3929190613bb4565b861561174b5761171789896001612abf565b886001600160401b031660008051602061445e8339815191528960405161173e9190613e01565b60405180910390a2611787565b61175789896000612abf565b886001600160401b031660008051602061445e8339815191528960405161177e9190613e3d565b60405180910390a25b505050505050505050565b6060600082516001600160401b038111156117af576117af61327a565b6040519080825280602002602001820160405280156117d8578160200160208202803683370190505b50905060005b8351816001600160401b031610156118535761181b84826001600160401b03168151811061180e5761180e613a8a565b6020026020010151612332565b82826001600160401b03168151811061183657611836613a8a565b60209081029190910101528061184b81613ab6565b9150506117de565b5092915050565b6000611864612767565b905090565b6040516327f51bc360e01b81526000903090839082906327f51bc390611893908490600401613681565b602060405180830381865afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190613b93565b6118f35780604051637ccc4b2f60e11b81526004016106b39190613681565b60006118fe856121d6565b9050610d1c816002015490565b6060600082516001600160401b038111156119285761192861327a565b604051908082528060200260200182016040528015611951578160200160208202803683370190505b50905060005b8351816001600160401b031610156118535761199484826001600160401b03168151811061198757611987613a8a565b6020026020010151612c21565b82826001600160401b0316815181106119af576119af613a8a565b6001600160401b0390921660209283029190910190910152806119d181613ab6565b915050611957565b6000610a1e82612c21565b600054610100900460ff1615808015611a045750600054600160ff909116105b80611a255750611a1330612c3c565b158015611a25575060005460ff166001145b611a415760405162461bcd60e51b81526004016106b390613ea7565b6000805460ff191660011790558015611a64576000805461ff0019166101001790555b611a6f8484846112ba565b611a77612c4b565b8015611ac2576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890611ab990600190613ecb565b60405180910390a15b50505050565b600080805b8351816001600160401b0316101561185357611b0a84826001600160401b031681518110611afd57611afd613a8a565b6020026020010151611d87565b611b149083613b55565b915080611b2081613ab6565b915050611acd565b6040516327f51bc360e01b81523090849082906327f51bc390611b4f908490600401613681565b602060405180830381865afa158015611b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b909190613b93565b611baf5780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b0316600003611bd95760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c6490611c049085908590600401613bb4565b602060405180830381865afa158015611c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c459190613b93565b611c665781816040516333fcc5d360e11b81526004016106b3929190613bb4565b3089896002836001600160a01b0316635ca64ded84846040518363ffffffff1660e01b8152600401611c99929190613bb4565b602060405180830381865afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190613ef1565b6005811115611ceb57611ceb6136dd565b816005811115611cfd57611cfd6136dd565b14611d1f5782826040516311bb196560e21b81526004016106b3929190613bb4565b611d2b8d8c6003612c74565b611d378d8d6004612abf565b8c6001600160401b03167f21dbfa82d4b89da6859dec9a92e73c407878460e261746073e06920580e149768d604051611d709190613681565b60405180910390a250505050505050505050505050565b6040516327f51bc360e01b81526000903090839082906327f51bc390611db1908490600401613681565b602060405180830381865afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df29190613b93565b611e115780604051637ccc4b2f60e11b81526004016106b39190613681565b6000611e1c856121d6565b54600160801b90046001600160401b031695945050505050565b6000805b8251816001600160401b0316101561067c57611e7783826001600160401b031681518110611e6a57611e6a613a8a565b6020026020010151611ebf565b611e845750600092915050565b80611e8e81613ab6565b915050611e3a565b600080611ea2836121d6565b8054909150600160401b90046001600160401b03165b9392505050565b600090815260666020526040902054600160401b90046001600160401b0316151590565b6040516327f51bc360e01b81526000903090849082906327f51bc390611f0d908490600401613681565b602060405180830381865afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e9190613b93565b611f6d5780604051637ccc4b2f60e11b81526004016106b39190613681565b6000611f78866121d6565b9050611f848186612d34565b9695505050505050565b6040516327f51bc360e01b81523090849082906327f51bc390611fb5908490600401613681565b602060405180830381865afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff69190613b93565b6120155780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b031660000361203f5760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c649061206a9085908590600401613bb4565b602060405180830381865afa158015612087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ab9190613b93565b6120cc5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b3089896002836001600160a01b0316635ca64ded84846040518363ffffffff1660e01b81526004016120ff929190613bb4565b602060405180830381865afa15801561211c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121409190613ef1565b6005811115612151576121516136dd565b816005811115612163576121636136dd565b146121855782826040516311bb196560e21b81526004016106b3929190613bb4565b6121918d8c6002612c74565b61219d8d8d6005612abf565b8c6001600160401b03167fd8cfa571062e8a9bcb997476d3d9494fa75787a60f35116ace6289e43ba2a20b8d604051611d709190613681565b6001600160401b031660009081526067602090815260408083205483526066909152902090565b816001600160401b03166000036122265760405162461bcd60e51b81526004016106b390613f3c565b6122308383612d34565b1561224d5760405162461bcd60e51b81526004016106b390613f79565b6000836002018261ffff168154811061226857612268613a8a565b6000918252602082200180549092506001600160401b031690036122c75760008154600160801b900460ff1660058111156122a5576122a56136dd565b146122c25760405162461bcd60e51b81526004016106b390613fb1565b6122ed565b6122d081612df5565b156122ed5760405162461bcd60e51b81526004016106b390613fef565b80546001600160401b03939093166001600160881b031990931683179055600091825260019290920160205260409020805461ffff191661ffff909216919091179055565b6001600160401b031660009081526067602052604090205490565b6001600160401b03811615801590612379575081546001600160401b03828116600160401b9092041614155b6123955760405162461bcd60e51b81526004016106b390614028565b81546001600160401b03909116600160401b02600160401b600160801b0319909116179055565b6002820154156123de5760405162461bcd60e51b81526004016106b390614063565b60005b8161ffff168161ffff1610156124a05761241260408051606081018252600080825260208201819052909182015290565b6002840180546001810182556000918252602091829020835191018054928401516001600160401b03908116600160401b026001600160801b0319909416921691909117919091178082556040830151839291829060ff60801b1916600160801b836005811115612485576124856136dd565b0217905550505050808061249890614073565b9150506123e1565b505050565b60028101546060906000906001600160401b038111156124c7576124c761327a565b6040519080825280602002602001820160405280156124f0578160200160208202803683370190505b50905060005b60028401546001600160401b03821610156118535761253b84600201826001600160401b03168154811061252c5761252c613a8a565b90600052602060002001612df5565b156125ad5783600201816001600160401b03168154811061255e5761255e613a8a565b60009182526020909120015482516001600160401b0391821691849190841690811061258c5761258c613a8a565b60200260200101906001600160401b031690816001600160401b0316815250505b806125b781613ab6565b9150506124f6565b6000816001600160401b03166000036125ea5760405162461bcd60e51b81526004016106b390613f3c565b6001600160401b0382166000908152600184016020526040902054600284015461ffff90911690811061262f5760405162461bcd60e51b81526004016106b3906140b5565b6000846002018261ffff168154811061264a5761264a613a8a565b600091825260209091200190506126618185612e37565b61267d5760405162461bcd60e51b81526004016106b390613f3c565b54600160801b900460ff1691505092915050565b6000816001600160401b03166000036126bc5760405162461bcd60e51b81526004016106b390613f3c565b6126c68383612d34565b6126e25760405162461bcd60e51b81526004016106b3906140f1565b6001600160401b038216600090815260018401602052604081205460028501805461ffff90921692918390811061271b5761271b613a8a565b600091825260209091200190506127328185612e37565b61274e5760405162461bcd60e51b81526004016106b390613f3c565b54600160401b90046001600160401b0316949350505050565b600080516020614417833981519152546001600160a01b031690565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d14854906127ba9084903390600401614101565b602060405180830381865afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb9190613b93565b6124a05760405162461bcd60e51b81526004016106b39061414d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561284a576124a083612e56565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128a4575060408051601f3d908101601f191682019092526128a191810190614168565b60015b6128c05760405162461bcd60e51b81526004016106b3906141d4565b60008051602061441783398151915281146128ed5760405162461bcd60e51b81526004016106b39061422a565b506124a0838383612eaa565b61290383836111e4565b6005811115612914576129146136dd565b816005811115612926576129266136dd565b146124a05782826040516311bb196560e21b81526004016106b3929190613bb4565b826001600160401b03166000036129715760405162461bcd60e51b81526004016106b390613f3c565b816001600160401b031660000361299a5760405162461bcd60e51b81526004016106b39061426a565b6129a48584612d34565b6129c05760405162461bcd60e51b81526004016106b3906140f1565b6001600160401b038316600090815260018601602052604081205460028701805461ffff9092169291839081106129f9576129f9613a8a565b60009182526020909120019050612a108185612ecf565b604051636a9799c560e11b81526001600160a01b0384169063d52f338a90612a3e908990889060040161427a565b6020604051808303816000875af1158015612a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8191906142a0565b6003811115612a9257612a926136dd565b600003612aaa57612aa587866002612f17565b612ab6565b612ab687866003612f17565b50505050505050565b6040516327f51bc360e01b81523090849082906327f51bc390612ae6908490600401613681565b602060405180830381865afa158015612b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b279190613b93565b612b465780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b0316600003612b705760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c6490612b9b9085908590600401613bb4565b602060405180830381865afa158015612bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdc9190613b93565b612bfd5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b6000612c088a6121d6565b9050612c15818a8a612f17565b50505050505050505050565b6000908152606660205260409020546001600160401b031690565b6001600160a01b03163b151590565b600054610100900460ff16612c725760405162461bcd60e51b81526004016106b390613dd3565b565b606a546001600160a01b031663d52f338a612c8e85610a13565b846040518363ffffffff1660e01b8152600401612cac92919061427a565b6020604051808303816000875af1158015612ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cef91906142a0565b6003811115612d0057612d006136dd565b816003811115612d1257612d126136dd565b146124a05782826040516311d01ab560e31b81526004016106b3929190613bb4565b6000816001600160401b0316600003612d5f5760405162461bcd60e51b81526004016106b390613f3c565b6001600160401b0382166000908152600184016020526040902054600284015461ffff909116901580612d9a5750600284015461ffff821610155b15612da9576000915050610a1e565b6000846002018261ffff1681548110612dc457612dc4613a8a565b60009182526020909120019050612ddb8185612e37565b612dea57600092505050610a1e565b506001949350505050565b8054600090600290600160801b900460ff166005811115612e1857612e186136dd565b6001600160401b03161115612e2f57506000919050565b506001919050565b81546000906001600160401b0383811691161461067c57506000610a1e565b612e5f81612c3c565b612e7b5760405162461bcd60e51b81526004016106b39061430b565b60008051602061441783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612eb383612f94565b600082511180612ec05750805b156124a057611ac28383612fd4565b6001600160401b03811615801590612efb575081546001600160401b03828116600160401b9092041614155b6123955760405162461bcd60e51b81526004016106b390613b45565b612f218383612d34565b612f3d5760405162461bcd60e51b81526004016106b3906140f1565b6001600160401b038216600090815260018401602052604081205460028501805461ffff909216929183908110612f7657612f76613a8a565b60009182526020909120019050612f8d8184612ff9565b5050505050565b612f9d81612e56565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611eb883836040518060600160405280602781526020016144376027913961318e565b8154600160801b900460ff1660008083600581111561301a5761301a6136dd565b036130425760005b826005811115613034576130346136dd565b0361303d575060035b613146565b6001836005811115613056576130566136dd565b0361307c57600082600581111561306f5761306f6136dd565b0361303d57506001613146565b6002836005811115613090576130906136dd565b036130b65760018260058111156130a9576130a96136dd565b0361303d57506002613146565b60038360058111156130ca576130ca6136dd565b036130d6576001613022565b60048360058111156130ea576130ea6136dd565b03613110576002826005811115613103576131036136dd565b0361303d57506005613146565b6005836005811115613124576131246136dd565b0361314657600282600581111561313d5761313d6136dd565b03613146575060045b600081600581111561315a5761315a6136dd565b14611ac25783548190859060ff60801b1916600160801b836005811115613183576131836136dd565b021790555050505050565b6060600080856001600160a01b0316856040516131ab9190614361565b600060405180830381855af49150503d80600081146131e6576040519150601f19603f3d011682016040523d82523d6000602084013e6131eb565b606091505b5091509150611f84868383876060831561323457825160000361322d5761321185612c3c565b61322d5760405162461bcd60e51b81526004016106b3906143a1565b508161323e565b61323e8383613246565b949350505050565b8151156132565781518083602001fd5b8060405162461bcd60e51b81526004016106b391906143e5565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61329982613270565b81018181106001600160401b03821117156132b6576132b661327a565b6040525050565b60006132c860405190565b90506132d48282613290565b919050565b60006001600160401b038211156132f2576132f261327a565b5060209081020190565b6001600160401b031690565b613311816132fc565b8114610f6557600080fd5b8035610a1e81613308565b600061333a613335846132d9565b6132bd565b8381529050602080820190840283018581111561335957613359600080fd5b835b8181101561337d578061336e888261331c565b8452506020928301920161335b565b5050509392505050565b600082601f83011261339b5761339b600080fd5b813561323e848260208601613327565b6000602082840312156133c0576133c0600080fd5b81356001600160401b038111156133d9576133d9600080fd5b61323e84828501613387565b8015155b82525050565b60208101610a1e82846133e5565b80613311565b8035610a1e816133fd565b600061341c613335846132d9565b8381529050602080820190840283018581111561343b5761343b600080fd5b835b8181101561337d57806134508882613403565b8452506020928301920161343d565b600082601f83011261347357613473600080fd5b813561323e84826020860161340e565b61ffff8116613311565b8035610a1e81613483565b600080600080608085870312156134b1576134b1600080fd5b84356001600160401b038111156134ca576134ca600080fd5b6134d68782880161345f565b94505060206134e78782880161331c565b93505060408501356001600160401b0381111561350657613506600080fd5b61351287828801613387565b92505060606135238782880161348d565b91505092959194509250565b6133e9816132fc565b6000613544838361352f565b505060200190565b6000613556825190565b80845260209384019383018060005b8381101561358a5781516135798882613538565b975060208301925050600101613565565b509495945050505050565b604080825281016135a6818561354c565b9050611eb8602083018461352f565b6000806000606084860312156135cd576135cd600080fd5b60006135d9868661331c565b93505060206135ea8682870161331c565b92505060406135fb8682870161348d565b9150509250925092565b60006020828403121561361a5761361a600080fd5b600061323e848461331c565b806133e9565b60208101610a1e8284613626565b6000806000806080858703121561365357613653600080fd5b600061365f8787613403565b94505060206136708782880161331c565b93505060406135128782880161331c565b60208101610a1e828461352f565b60208082528101611eb8818461354c565b600080604083850312156136b6576136b6600080fd5b60006136c2858561331c565b92505060206136d38582860161331c565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60068110610f6557610f656136dd565b806132d4816136f3565b6000610a1e82613703565b6133e98161370d565b6040810161372f8285613718565b611eb8602083018461352f565b6001600160a01b031690565b6000610a1e8261373c565b61331181613748565b8035610a1e81613753565b60006020828403121561377c5761377c600080fd5b600061323e848461375c565b60006001600160401b038211156137a1576137a161327a565b6137aa82613270565b60200192915050565b82818337506000910152565b60006137cd61333584613788565b9050828152602081018484840111156137e8576137e8600080fd5b6137f38482856137b3565b509392505050565b600082601f83011261380f5761380f600080fd5b813561323e8482602086016137bf565b6000806040838503121561383557613835600080fd5b6000613841858561375c565b92505060208301356001600160401b0381111561386057613860600080fd5b6136d3858286016137fb565b60208101610a1e8284613718565b60008060006060848603121561389257613892600080fd5b600061389e868661375c565b93505060206138af8682870161375c565b92505060406135fb8682870161375c565b6000806000606084860312156138d8576138d8600080fd5b60006138e4868661331c565b93505060206138f58682870161331c565b92505060406135fb8682870161331c565b801515613311565b8035610a1e81613906565b60008060006060848603121561393157613931600080fd5b600061393d868661331c565b935050602061394e8682870161331c565b92505060406135fb8682870161390e565b60006135448383613626565b6000613975825190565b80845260209384019383018060005b8381101561358a578151613998888261395f565b975060208301925050600101613984565b60208082528101611eb8818461396b565b6133e981613748565b60208101610a1e82846139ba565b61ffff81166133e9565b60208101610a1e82846139d1565b6000602082840312156139fe576139fe600080fd5b81356001600160401b03811115613a1757613a17600080fd5b61323e8482850161345f565b600060208284031215613a3857613a38600080fd5b600061323e8484613403565b6000610a1e613a58613a558461373c565b90565b61373c565b6000610a1e82613a44565b6000610a1e82613a5d565b6133e981613a68565b60208101610a1e8284613a73565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000613ac1826132fc565b91506001600160401b038203613ad957613ad9613aa0565b5060010190565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b815291505b5060200190565b60208082528101610a1e81613ae0565b600e81526000602082016d496e76616c696420706172616d7360901b81529150613b09565b60208082528101610a1e81613b20565b6000613b60826132fc565b9150613b6b836132fc565b9250508082016001600160401b03811115610a1e57610a1e613aa0565b8051610a1e81613906565b600060208284031215613ba857613ba8600080fd5b600061323e8484613b88565b6040810161372f828561352f565b6015815260006020820174092dcecc2d8d2c840e4cae0d8d2c6c240d2dcc8caf605b1b81529150613b09565b60208082528101610a1e81613bc2565b60408101613c0c828561352f565b611eb860208301846139d1565b600e81526000602082016d125b9d985b1a590818d85c881a5960921b81529150613b09565b60208082528101610a1e81613c19565b8051610a1e81613308565b600060208284031215613c6e57613c6e600080fd5b600061323e8484613c4e565b60408101613c88828561352f565b611eb86020830184613626565b602c81526000602082016000805160206143f783398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610a1e81613c95565b602c81526000602082016000805160206143f783398151915281526b6163746976652070726f787960a01b60208201529150613cc8565b60208082528101610a1e81613cdf565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150613cc8565b60208082528101610a1e81613d26565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150613cc8565b60208082528101610a1e81613d8b565b60078152600060208201667375636365737360c81b81529150613b09565b60408101613e0f828461352f565b8181036020830152611eb881613de3565b600681526000602082016519985a5b195960d21b81529150613b09565b60408101613e4b828461352f565b8181036020830152611eb881613e20565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150613cc8565b60208082528101610a1e81613e5c565b600060ff8216610a1e565b6133e981613eb7565b60208101610a1e8284613ec2565b60068110610f6557600080fd5b8051610a1e81613ed9565b600060208284031215613f0657613f06600080fd5b600061323e8484613ee6565b6013815260006020820172125b9d985b1a59081b585d18da1a5b99c81a59606a1b81529150613b09565b60208082528101610a1e81613f12565b60168152600060208201755265706c69636120616c72656164792065786973747360501b81529150613b09565b60208082528101610a1e81613f4c565b6011815260006020820170496e76616c69642063617220737461746560781b81529150613b09565b60208082528101610a1e81613f89565b60178152600060208201760a4cae0d8d2c6c240e6e8c2e8ca40dcdee840dac2e8c6d604b1b81529150613b09565b60208082528101610a1e81613fc1565b6012815260006020820171125b9d985b1a590819185d185cd95d081a5960721b81529150613b09565b60208082528101610a1e81613fff565b60148152600060208201735265706c696361206973206e6f7420656d70747960601b81529150613b09565b60208082528101610a1e81614038565b61ffff16600061fffe198201613ad957613ad9613aa0565b6013815260006020820172496e646578206f7574206f6620626f756e647360681b81529150613b09565b60208082528101610a1e8161408b565b60158152600060208201745265706c696361206973206e6f742065786973747360581b81529150613b09565b60208082528101610a1e816140c5565b6040810161410f8285613626565b611eb860208301846139ba565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150613b09565b60208082528101610a1e8161411c565b8051610a1e816133fd565b60006020828403121561417d5761417d600080fd5b600061323e848461415d565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150613cc8565b60208082528101610a1e81614189565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150613cc8565b60208082528101610a1e816141e4565b6019815260006020820178125b9d985b1a5908199a5b1958dbda5b8818db185a5b481a59603a1b81529150613b09565b60208082528101610a1e8161423a565b6040810161372f8285613626565b60048110610f6557600080fd5b8051610a1e81614288565b6000602082840312156142b5576142b5600080fd5b600061323e8484614295565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150613cc8565b60208082528101610a1e816142c1565b60005b8381101561433657818101518382015260200161431e565b50506000910152565b6000614349825190565b61435781856020860161431b565b9290920192915050565b6000611eb8828461433f565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613b09565b60208082528101610a1e8161436d565b60006143bb825190565b8084526020840193506143d281856020860161431b565b6143db81613270565b9093019392505050565b60208082528101611eb881846143b156fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a1c74e1a828c7320a1217cd45b5acf7beee78430eea053fdeaaee8a12b376217a26469706673582212200405fc51a2539030a8d9e845f75a9743fa5bdd1ca7b3c9976a623d3ce97db37264736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061017e5760003560e01c80630f2ca1dc146101835780630fb3ae6a146101b957806313083f86146101e757806326ca5a711461020957806327f51bc3146102365780632bb36e6e14610256578063310805421461028357806334336795146102b05780633659cfe6146102de5780634f1ef286146102fe57806352d1902d1461031157806357e926df146103265780635ca64ded146103465780638314ce091461037357806391e3ce74146103935780639528f062146103b35780639a18ccdc146103d3578063aaf10f4214610400578063b5d5e5cf14610422578063be337ac51461044f578063c084cf031461046f578063c0c53b8b1461048f578063c27638fc146104af578063c3d97a27146104cf578063c66e39bb146104ef578063c73f437e1461051c578063cd17a4a41461053c578063cf24e53b1461055c578063d4c0de381461057c578063e757681a1461059c578063e7628519146105bc578063eb058c64146105dc578063eeec85dc146105fc575b600080fd5b34801561018f57600080fd5b506101a361019e3660046133ab565b61061c565b6040516101b091906133ef565b60405180910390f35b3480156101c557600080fd5b506101d96101d4366004613498565b610685565b6040516101b0929190613595565b3480156101f357600080fd5b506102076102023660046135b5565b61083c565b005b34801561021557600080fd5b50610229610224366004613605565b610a13565b6040516101b0919061362c565b34801561024257600080fd5b506101a3610251366004613605565b610a24565b34801561026257600080fd5b5061027661027136600461363a565b610a72565b6040516101b09190613681565b34801561028f57600080fd5b506102a361029e366004613605565b610c7c565b6040516101b0919061368f565b3480156102bc57600080fd5b506102d06102cb3660046136a0565b610d25565b6040516101b0929190613721565b3480156102ea57600080fd5b506102076102f9366004613767565b610ea0565b61020761030c36600461381f565b610f68565b34801561031d57600080fd5b50610229611021565b34801561033257600080fd5b506102766103413660046136a0565b61107e565b34801561035257600080fd5b506103666103613660046136a0565b6111e4565b6040516101b0919061386c565b34801561037f57600080fd5b5061020761038e36600461387a565b6112ba565b34801561039f57600080fd5b506102076103ae3660046138c0565b611320565b3480156103bf57600080fd5b506102076103ce366004613919565b6115c7565b3480156103df57600080fd5b506103f36103ee3660046133ab565b611792565b6040516101b091906139a9565b34801561040c57600080fd5b5061041561185a565b6040516101b091906139c3565b34801561042e57600080fd5b5061044261043d366004613605565b611869565b6040516101b091906139db565b34801561045b57600080fd5b506102a361046a3660046139e9565b61190b565b34801561047b57600080fd5b5061027661048a366004613a23565b6119d9565b34801561049b57600080fd5b506102076104aa36600461387a565b6119e4565b3480156104bb57600080fd5b506102766104ca3660046133ab565b611ac8565b3480156104db57600080fd5b50606554610276906001600160401b031681565b3480156104fb57600080fd5b50606a5461050f906001600160a01b031681565b6040516101b09190613a7c565b34801561052857600080fd5b506102076105373660046138c0565b611b28565b34801561054857600080fd5b5060695461050f906001600160a01b031681565b34801561056857600080fd5b50610276610577366004613605565b611d87565b34801561058857600080fd5b506101a36105973660046139e9565b611e36565b3480156105a857600080fd5b506102766105b7366004613605565b611e96565b3480156105c857600080fd5b506101a36105d7366004613a23565b611ebf565b3480156105e857600080fd5b506101a36105f73660046136a0565b611ee3565b34801561060857600080fd5b506102076106173660046138c0565b611f8e565b6000805b8251816001600160401b0316101561067c5761065d83826001600160401b03168151811061065057610650613a8a565b6020026020010151610a24565b61066a5750600092915050565b8061067481613ab6565b915050610620565b50600192915050565b6060600084806001600160401b03166000036106bc5760405162461bcd60e51b81526004016106b390613b10565b60405180910390fd5b84518751146106dd5760405162461bcd60e51b81526004016106b390613b45565b60008088516001600160401b038111156106f9576106f961327a565b604051908082528060200260200182016040528015610722578160200160208202803683370190505b50905060005b8951816001600160401b031610156107f75761078a8a826001600160401b03168151811061075857610758613a8a565b60200260200101518a8a846001600160401b03168151811061077c5761077c613a8a565b60200260200101518a610a72565b82826001600160401b0316815181106107a5576107a5613a8a565b6001600160401b0392831660209182029290920101528851899183169081106107d0576107d0613a8a565b6020026020010151836107e39190613b55565b9250806107ef81613ab6565b915050610728565b507fe35ae3ed46deeca961a6cae778eae44a84d8d021bb077e78ccd8f11affa392ed8960405161082791906139a9565b60405180910390a19890975095505050505050565b6040516327f51bc360e01b81523090849082906327f51bc390610863908490600401613681565b602060405180830381865afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190613b93565b6108c35780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036108ed5760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c64906109189085908590600401613bb4565b602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190613b93565b1561097b57818160405163f6bd4eb360e01b81526004016106b3929190613bb4565b60006109868a6121d6565b9050610993816002015490565b61ffff168861ffff16106109b95760405162461bcd60e51b81526004016106b390613bee565b6109c4818a8a6121fd565b896001600160401b03167f41213a28d0a99603b2c14b7f5587f96651326baacb58b9ea1339749170a4f4428a8a6040516109ff929190613bfe565b60405180910390a250505050505050505050565b6000610a1e82612332565b92915050565b6000816001600160401b0316600003610a4f5760405162461bcd60e51b81526004016106b390613c3e565b6000610a5a836121d6565b546001600160401b0390811693169290921492915050565b60405163e762851960e01b815260009030908690829063e762851990610a9c90849060040161362c565b602060405180830381865afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add9190613b93565b15610b6b5760405163c084cf0360e01b81526001600160a01b0383169063c084cf0390610b0e90849060040161362c565b602060405180830381865afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f9190613c59565b8160405163243b1ed560e11b81526004016106b3929190613c7a565b85806001600160401b0316600003610b955760405162461bcd60e51b81526004016106b390613b10565b85806001600160401b0316600003610bbf5760405162461bcd60e51b81526004016106b390613b10565b606580546001600160401b0316906000610bd883613ab6565b82546001600160401b039182166101009390930a9283029190920219909116179055506000898152606660205260409020610c13818a61234d565b610c1d81886123bc565b6065805482546001600160401b038b8116600160801b026001600160401b03600160801b03600160c01b0319909216928116929092171783559054811660009081526067602052604090208b9055905416945050505050949350505050565b6040516327f51bc360e01b81526060903090839082906327f51bc390610ca6908490600401613681565b602060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190613b93565b610d065780604051637ccc4b2f60e11b81526004016106b39190613681565b6000610d11856121d6565b9050610d1c816124a5565b95945050505050565b6000803084816001600160a01b03166327f51bc3826040518263ffffffff1660e01b8152600401610d569190613681565b602060405180830381865afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190613b93565b610db65780604051637ccc4b2f60e11b81526004016106b39190613681565b84806001600160401b0316600003610de05760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309088908890839063eb058c6490610e0b9085908590600401613bb4565b602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190613b93565b610e6d5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b6000610e788b6121d6565b9050610e84818b6125bf565b610e8e828c612691565b98509850505050505050509250929050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ee85760405162461bcd60e51b81526004016106b390613ccf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f1a612767565b6001600160a01b031614610f405760405162461bcd60e51b81526004016106b390613d16565b610f4981612783565b60408051600080825260208201909252610f6591839190612817565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fb05760405162461bcd60e51b81526004016106b390613ccf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fe2612767565b6001600160a01b0316146110085760405162461bcd60e51b81526004016106b390613d16565b61101182612783565b61101d82826001612817565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461106b5760405162461bcd60e51b81526004016106b390613d7b565b5060008051602061441783398151915290565b6040516327f51bc360e01b81526000903090849082906327f51bc3906110a8908490600401613681565b602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190613b93565b6111085780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036111325760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c649061115d9085908590600401613bb4565b602060405180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190613b93565b6111bf5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b60006111ca8a6121d6565b90506111d6818a612691565b9a9950505050505050505050565b6040516327f51bc360e01b81526000903090849082906327f51bc39061120e908490600401613681565b602060405180830381865afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f9190613b93565b61126e5780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036112985760405162461bcd60e51b81526004016106b390613b10565b60006112a3876121d6565b90506112af81876125bf565b979650505050505050565b600054610100900460ff166112e15760405162461bcd60e51b81526004016106b390613dd3565b606880546001600160a01b039485166001600160a01b0319918216179091556069805493851693821693909317909255606a8054919093169116179055565b6040516327f51bc360e01b81523090849082906327f51bc390611347908490600401613681565b602060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613b93565b6113a75780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036113d15760405162461bcd60e51b81526004016106b390613b10565b83806001600160401b03166000036113fb5760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309088908890839063eb058c64906114269085908590600401613bb4565b602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190613b93565b6114885781816040516333fcc5d360e11b81526004016106b3929190613bb4565b6040516357e926df60e01b815230908b908b9083906357e926df906114b39085908590600401613bb4565b602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190613c59565b6001600160401b03161561151f578181604051637f579cdf60e01b81526004016106b3929190613bb4565b61152b8d8d60016128f9565b60006115368e612332565b905060006115438f6121d6565b9050611573828f8f606a60009054906101000a90046001600160a01b03168561294890949392919063ffffffff16565b8e6001600160401b03167f71d4ff176efe5dd026d11903476249f064ccc8abf867ae20fe24ecb57f87aade8f8f6040516115ae929190613bb4565b60405180910390a2505050505050505050505050505050565b6040516327f51bc360e01b81523090849082906327f51bc3906115ee908490600401613681565b602060405180830381865afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f9190613b93565b61164e5780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b03166000036116785760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c64906116a39085908590600401613bb4565b602060405180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190613b93565b6117055781816040516333fcc5d360e11b81526004016106b3929190613bb4565b861561174b5761171789896001612abf565b886001600160401b031660008051602061445e8339815191528960405161173e9190613e01565b60405180910390a2611787565b61175789896000612abf565b886001600160401b031660008051602061445e8339815191528960405161177e9190613e3d565b60405180910390a25b505050505050505050565b6060600082516001600160401b038111156117af576117af61327a565b6040519080825280602002602001820160405280156117d8578160200160208202803683370190505b50905060005b8351816001600160401b031610156118535761181b84826001600160401b03168151811061180e5761180e613a8a565b6020026020010151612332565b82826001600160401b03168151811061183657611836613a8a565b60209081029190910101528061184b81613ab6565b9150506117de565b5092915050565b6000611864612767565b905090565b6040516327f51bc360e01b81526000903090839082906327f51bc390611893908490600401613681565b602060405180830381865afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190613b93565b6118f35780604051637ccc4b2f60e11b81526004016106b39190613681565b60006118fe856121d6565b9050610d1c816002015490565b6060600082516001600160401b038111156119285761192861327a565b604051908082528060200260200182016040528015611951578160200160208202803683370190505b50905060005b8351816001600160401b031610156118535761199484826001600160401b03168151811061198757611987613a8a565b6020026020010151612c21565b82826001600160401b0316815181106119af576119af613a8a565b6001600160401b0390921660209283029190910190910152806119d181613ab6565b915050611957565b6000610a1e82612c21565b600054610100900460ff1615808015611a045750600054600160ff909116105b80611a255750611a1330612c3c565b158015611a25575060005460ff166001145b611a415760405162461bcd60e51b81526004016106b390613ea7565b6000805460ff191660011790558015611a64576000805461ff0019166101001790555b611a6f8484846112ba565b611a77612c4b565b8015611ac2576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890611ab990600190613ecb565b60405180910390a15b50505050565b600080805b8351816001600160401b0316101561185357611b0a84826001600160401b031681518110611afd57611afd613a8a565b6020026020010151611d87565b611b149083613b55565b915080611b2081613ab6565b915050611acd565b6040516327f51bc360e01b81523090849082906327f51bc390611b4f908490600401613681565b602060405180830381865afa158015611b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b909190613b93565b611baf5780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b0316600003611bd95760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c6490611c049085908590600401613bb4565b602060405180830381865afa158015611c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c459190613b93565b611c665781816040516333fcc5d360e11b81526004016106b3929190613bb4565b3089896002836001600160a01b0316635ca64ded84846040518363ffffffff1660e01b8152600401611c99929190613bb4565b602060405180830381865afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190613ef1565b6005811115611ceb57611ceb6136dd565b816005811115611cfd57611cfd6136dd565b14611d1f5782826040516311bb196560e21b81526004016106b3929190613bb4565b611d2b8d8c6003612c74565b611d378d8d6004612abf565b8c6001600160401b03167f21dbfa82d4b89da6859dec9a92e73c407878460e261746073e06920580e149768d604051611d709190613681565b60405180910390a250505050505050505050505050565b6040516327f51bc360e01b81526000903090839082906327f51bc390611db1908490600401613681565b602060405180830381865afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df29190613b93565b611e115780604051637ccc4b2f60e11b81526004016106b39190613681565b6000611e1c856121d6565b54600160801b90046001600160401b031695945050505050565b6000805b8251816001600160401b0316101561067c57611e7783826001600160401b031681518110611e6a57611e6a613a8a565b6020026020010151611ebf565b611e845750600092915050565b80611e8e81613ab6565b915050611e3a565b600080611ea2836121d6565b8054909150600160401b90046001600160401b03165b9392505050565b600090815260666020526040902054600160401b90046001600160401b0316151590565b6040516327f51bc360e01b81526000903090849082906327f51bc390611f0d908490600401613681565b602060405180830381865afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e9190613b93565b611f6d5780604051637ccc4b2f60e11b81526004016106b39190613681565b6000611f78866121d6565b9050611f848186612d34565b9695505050505050565b6040516327f51bc360e01b81523090849082906327f51bc390611fb5908490600401613681565b602060405180830381865afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff69190613b93565b6120155780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b031660000361203f5760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c649061206a9085908590600401613bb4565b602060405180830381865afa158015612087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ab9190613b93565b6120cc5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b3089896002836001600160a01b0316635ca64ded84846040518363ffffffff1660e01b81526004016120ff929190613bb4565b602060405180830381865afa15801561211c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121409190613ef1565b6005811115612151576121516136dd565b816005811115612163576121636136dd565b146121855782826040516311bb196560e21b81526004016106b3929190613bb4565b6121918d8c6002612c74565b61219d8d8d6005612abf565b8c6001600160401b03167fd8cfa571062e8a9bcb997476d3d9494fa75787a60f35116ace6289e43ba2a20b8d604051611d709190613681565b6001600160401b031660009081526067602090815260408083205483526066909152902090565b816001600160401b03166000036122265760405162461bcd60e51b81526004016106b390613f3c565b6122308383612d34565b1561224d5760405162461bcd60e51b81526004016106b390613f79565b6000836002018261ffff168154811061226857612268613a8a565b6000918252602082200180549092506001600160401b031690036122c75760008154600160801b900460ff1660058111156122a5576122a56136dd565b146122c25760405162461bcd60e51b81526004016106b390613fb1565b6122ed565b6122d081612df5565b156122ed5760405162461bcd60e51b81526004016106b390613fef565b80546001600160401b03939093166001600160881b031990931683179055600091825260019290920160205260409020805461ffff191661ffff909216919091179055565b6001600160401b031660009081526067602052604090205490565b6001600160401b03811615801590612379575081546001600160401b03828116600160401b9092041614155b6123955760405162461bcd60e51b81526004016106b390614028565b81546001600160401b03909116600160401b02600160401b600160801b0319909116179055565b6002820154156123de5760405162461bcd60e51b81526004016106b390614063565b60005b8161ffff168161ffff1610156124a05761241260408051606081018252600080825260208201819052909182015290565b6002840180546001810182556000918252602091829020835191018054928401516001600160401b03908116600160401b026001600160801b0319909416921691909117919091178082556040830151839291829060ff60801b1916600160801b836005811115612485576124856136dd565b0217905550505050808061249890614073565b9150506123e1565b505050565b60028101546060906000906001600160401b038111156124c7576124c761327a565b6040519080825280602002602001820160405280156124f0578160200160208202803683370190505b50905060005b60028401546001600160401b03821610156118535761253b84600201826001600160401b03168154811061252c5761252c613a8a565b90600052602060002001612df5565b156125ad5783600201816001600160401b03168154811061255e5761255e613a8a565b60009182526020909120015482516001600160401b0391821691849190841690811061258c5761258c613a8a565b60200260200101906001600160401b031690816001600160401b0316815250505b806125b781613ab6565b9150506124f6565b6000816001600160401b03166000036125ea5760405162461bcd60e51b81526004016106b390613f3c565b6001600160401b0382166000908152600184016020526040902054600284015461ffff90911690811061262f5760405162461bcd60e51b81526004016106b3906140b5565b6000846002018261ffff168154811061264a5761264a613a8a565b600091825260209091200190506126618185612e37565b61267d5760405162461bcd60e51b81526004016106b390613f3c565b54600160801b900460ff1691505092915050565b6000816001600160401b03166000036126bc5760405162461bcd60e51b81526004016106b390613f3c565b6126c68383612d34565b6126e25760405162461bcd60e51b81526004016106b3906140f1565b6001600160401b038216600090815260018401602052604081205460028501805461ffff90921692918390811061271b5761271b613a8a565b600091825260209091200190506127328185612e37565b61274e5760405162461bcd60e51b81526004016106b390613f3c565b54600160401b90046001600160401b0316949350505050565b600080516020614417833981519152546001600160a01b031690565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d14854906127ba9084903390600401614101565b602060405180830381865afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb9190613b93565b6124a05760405162461bcd60e51b81526004016106b39061414d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561284a576124a083612e56565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128a4575060408051601f3d908101601f191682019092526128a191810190614168565b60015b6128c05760405162461bcd60e51b81526004016106b3906141d4565b60008051602061441783398151915281146128ed5760405162461bcd60e51b81526004016106b39061422a565b506124a0838383612eaa565b61290383836111e4565b6005811115612914576129146136dd565b816005811115612926576129266136dd565b146124a05782826040516311bb196560e21b81526004016106b3929190613bb4565b826001600160401b03166000036129715760405162461bcd60e51b81526004016106b390613f3c565b816001600160401b031660000361299a5760405162461bcd60e51b81526004016106b39061426a565b6129a48584612d34565b6129c05760405162461bcd60e51b81526004016106b3906140f1565b6001600160401b038316600090815260018601602052604081205460028701805461ffff9092169291839081106129f9576129f9613a8a565b60009182526020909120019050612a108185612ecf565b604051636a9799c560e11b81526001600160a01b0384169063d52f338a90612a3e908990889060040161427a565b6020604051808303816000875af1158015612a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8191906142a0565b6003811115612a9257612a926136dd565b600003612aaa57612aa587866002612f17565b612ab6565b612ab687866003612f17565b50505050505050565b6040516327f51bc360e01b81523090849082906327f51bc390612ae6908490600401613681565b602060405180830381865afa158015612b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b279190613b93565b612b465780604051637ccc4b2f60e11b81526004016106b39190613681565b83806001600160401b0316600003612b705760405162461bcd60e51b81526004016106b390613b10565b604051633ac1631960e21b8152309087908790839063eb058c6490612b9b9085908590600401613bb4565b602060405180830381865afa158015612bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdc9190613b93565b612bfd5781816040516333fcc5d360e11b81526004016106b3929190613bb4565b6000612c088a6121d6565b9050612c15818a8a612f17565b50505050505050505050565b6000908152606660205260409020546001600160401b031690565b6001600160a01b03163b151590565b600054610100900460ff16612c725760405162461bcd60e51b81526004016106b390613dd3565b565b606a546001600160a01b031663d52f338a612c8e85610a13565b846040518363ffffffff1660e01b8152600401612cac92919061427a565b6020604051808303816000875af1158015612ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cef91906142a0565b6003811115612d0057612d006136dd565b816003811115612d1257612d126136dd565b146124a05782826040516311d01ab560e31b81526004016106b3929190613bb4565b6000816001600160401b0316600003612d5f5760405162461bcd60e51b81526004016106b390613f3c565b6001600160401b0382166000908152600184016020526040902054600284015461ffff909116901580612d9a5750600284015461ffff821610155b15612da9576000915050610a1e565b6000846002018261ffff1681548110612dc457612dc4613a8a565b60009182526020909120019050612ddb8185612e37565b612dea57600092505050610a1e565b506001949350505050565b8054600090600290600160801b900460ff166005811115612e1857612e186136dd565b6001600160401b03161115612e2f57506000919050565b506001919050565b81546000906001600160401b0383811691161461067c57506000610a1e565b612e5f81612c3c565b612e7b5760405162461bcd60e51b81526004016106b39061430b565b60008051602061441783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612eb383612f94565b600082511180612ec05750805b156124a057611ac28383612fd4565b6001600160401b03811615801590612efb575081546001600160401b03828116600160401b9092041614155b6123955760405162461bcd60e51b81526004016106b390613b45565b612f218383612d34565b612f3d5760405162461bcd60e51b81526004016106b3906140f1565b6001600160401b038216600090815260018401602052604081205460028501805461ffff909216929183908110612f7657612f76613a8a565b60009182526020909120019050612f8d8184612ff9565b5050505050565b612f9d81612e56565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611eb883836040518060600160405280602781526020016144376027913961318e565b8154600160801b900460ff1660008083600581111561301a5761301a6136dd565b036130425760005b826005811115613034576130346136dd565b0361303d575060035b613146565b6001836005811115613056576130566136dd565b0361307c57600082600581111561306f5761306f6136dd565b0361303d57506001613146565b6002836005811115613090576130906136dd565b036130b65760018260058111156130a9576130a96136dd565b0361303d57506002613146565b60038360058111156130ca576130ca6136dd565b036130d6576001613022565b60048360058111156130ea576130ea6136dd565b03613110576002826005811115613103576131036136dd565b0361303d57506005613146565b6005836005811115613124576131246136dd565b0361314657600282600581111561313d5761313d6136dd565b03613146575060045b600081600581111561315a5761315a6136dd565b14611ac25783548190859060ff60801b1916600160801b836005811115613183576131836136dd565b021790555050505050565b6060600080856001600160a01b0316856040516131ab9190614361565b600060405180830381855af49150503d80600081146131e6576040519150601f19603f3d011682016040523d82523d6000602084013e6131eb565b606091505b5091509150611f84868383876060831561323457825160000361322d5761321185612c3c565b61322d5760405162461bcd60e51b81526004016106b3906143a1565b508161323e565b61323e8383613246565b949350505050565b8151156132565781518083602001fd5b8060405162461bcd60e51b81526004016106b391906143e5565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61329982613270565b81018181106001600160401b03821117156132b6576132b661327a565b6040525050565b60006132c860405190565b90506132d48282613290565b919050565b60006001600160401b038211156132f2576132f261327a565b5060209081020190565b6001600160401b031690565b613311816132fc565b8114610f6557600080fd5b8035610a1e81613308565b600061333a613335846132d9565b6132bd565b8381529050602080820190840283018581111561335957613359600080fd5b835b8181101561337d578061336e888261331c565b8452506020928301920161335b565b5050509392505050565b600082601f83011261339b5761339b600080fd5b813561323e848260208601613327565b6000602082840312156133c0576133c0600080fd5b81356001600160401b038111156133d9576133d9600080fd5b61323e84828501613387565b8015155b82525050565b60208101610a1e82846133e5565b80613311565b8035610a1e816133fd565b600061341c613335846132d9565b8381529050602080820190840283018581111561343b5761343b600080fd5b835b8181101561337d57806134508882613403565b8452506020928301920161343d565b600082601f83011261347357613473600080fd5b813561323e84826020860161340e565b61ffff8116613311565b8035610a1e81613483565b600080600080608085870312156134b1576134b1600080fd5b84356001600160401b038111156134ca576134ca600080fd5b6134d68782880161345f565b94505060206134e78782880161331c565b93505060408501356001600160401b0381111561350657613506600080fd5b61351287828801613387565b92505060606135238782880161348d565b91505092959194509250565b6133e9816132fc565b6000613544838361352f565b505060200190565b6000613556825190565b80845260209384019383018060005b8381101561358a5781516135798882613538565b975060208301925050600101613565565b509495945050505050565b604080825281016135a6818561354c565b9050611eb8602083018461352f565b6000806000606084860312156135cd576135cd600080fd5b60006135d9868661331c565b93505060206135ea8682870161331c565b92505060406135fb8682870161348d565b9150509250925092565b60006020828403121561361a5761361a600080fd5b600061323e848461331c565b806133e9565b60208101610a1e8284613626565b6000806000806080858703121561365357613653600080fd5b600061365f8787613403565b94505060206136708782880161331c565b93505060406135128782880161331c565b60208101610a1e828461352f565b60208082528101611eb8818461354c565b600080604083850312156136b6576136b6600080fd5b60006136c2858561331c565b92505060206136d38582860161331c565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60068110610f6557610f656136dd565b806132d4816136f3565b6000610a1e82613703565b6133e98161370d565b6040810161372f8285613718565b611eb8602083018461352f565b6001600160a01b031690565b6000610a1e8261373c565b61331181613748565b8035610a1e81613753565b60006020828403121561377c5761377c600080fd5b600061323e848461375c565b60006001600160401b038211156137a1576137a161327a565b6137aa82613270565b60200192915050565b82818337506000910152565b60006137cd61333584613788565b9050828152602081018484840111156137e8576137e8600080fd5b6137f38482856137b3565b509392505050565b600082601f83011261380f5761380f600080fd5b813561323e8482602086016137bf565b6000806040838503121561383557613835600080fd5b6000613841858561375c565b92505060208301356001600160401b0381111561386057613860600080fd5b6136d3858286016137fb565b60208101610a1e8284613718565b60008060006060848603121561389257613892600080fd5b600061389e868661375c565b93505060206138af8682870161375c565b92505060406135fb8682870161375c565b6000806000606084860312156138d8576138d8600080fd5b60006138e4868661331c565b93505060206138f58682870161331c565b92505060406135fb8682870161331c565b801515613311565b8035610a1e81613906565b60008060006060848603121561393157613931600080fd5b600061393d868661331c565b935050602061394e8682870161331c565b92505060406135fb8682870161390e565b60006135448383613626565b6000613975825190565b80845260209384019383018060005b8381101561358a578151613998888261395f565b975060208301925050600101613984565b60208082528101611eb8818461396b565b6133e981613748565b60208101610a1e82846139ba565b61ffff81166133e9565b60208101610a1e82846139d1565b6000602082840312156139fe576139fe600080fd5b81356001600160401b03811115613a1757613a17600080fd5b61323e8482850161345f565b600060208284031215613a3857613a38600080fd5b600061323e8484613403565b6000610a1e613a58613a558461373c565b90565b61373c565b6000610a1e82613a44565b6000610a1e82613a5d565b6133e981613a68565b60208101610a1e8284613a73565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000613ac1826132fc565b91506001600160401b038203613ad957613ad9613aa0565b5060010190565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b815291505b5060200190565b60208082528101610a1e81613ae0565b600e81526000602082016d496e76616c696420706172616d7360901b81529150613b09565b60208082528101610a1e81613b20565b6000613b60826132fc565b9150613b6b836132fc565b9250508082016001600160401b03811115610a1e57610a1e613aa0565b8051610a1e81613906565b600060208284031215613ba857613ba8600080fd5b600061323e8484613b88565b6040810161372f828561352f565b6015815260006020820174092dcecc2d8d2c840e4cae0d8d2c6c240d2dcc8caf605b1b81529150613b09565b60208082528101610a1e81613bc2565b60408101613c0c828561352f565b611eb860208301846139d1565b600e81526000602082016d125b9d985b1a590818d85c881a5960921b81529150613b09565b60208082528101610a1e81613c19565b8051610a1e81613308565b600060208284031215613c6e57613c6e600080fd5b600061323e8484613c4e565b60408101613c88828561352f565b611eb86020830184613626565b602c81526000602082016000805160206143f783398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610a1e81613c95565b602c81526000602082016000805160206143f783398151915281526b6163746976652070726f787960a01b60208201529150613cc8565b60208082528101610a1e81613cdf565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150613cc8565b60208082528101610a1e81613d26565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150613cc8565b60208082528101610a1e81613d8b565b60078152600060208201667375636365737360c81b81529150613b09565b60408101613e0f828461352f565b8181036020830152611eb881613de3565b600681526000602082016519985a5b195960d21b81529150613b09565b60408101613e4b828461352f565b8181036020830152611eb881613e20565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150613cc8565b60208082528101610a1e81613e5c565b600060ff8216610a1e565b6133e981613eb7565b60208101610a1e8284613ec2565b60068110610f6557600080fd5b8051610a1e81613ed9565b600060208284031215613f0657613f06600080fd5b600061323e8484613ee6565b6013815260006020820172125b9d985b1a59081b585d18da1a5b99c81a59606a1b81529150613b09565b60208082528101610a1e81613f12565b60168152600060208201755265706c69636120616c72656164792065786973747360501b81529150613b09565b60208082528101610a1e81613f4c565b6011815260006020820170496e76616c69642063617220737461746560781b81529150613b09565b60208082528101610a1e81613f89565b60178152600060208201760a4cae0d8d2c6c240e6e8c2e8ca40dcdee840dac2e8c6d604b1b81529150613b09565b60208082528101610a1e81613fc1565b6012815260006020820171125b9d985b1a590819185d185cd95d081a5960721b81529150613b09565b60208082528101610a1e81613fff565b60148152600060208201735265706c696361206973206e6f7420656d70747960601b81529150613b09565b60208082528101610a1e81614038565b61ffff16600061fffe198201613ad957613ad9613aa0565b6013815260006020820172496e646578206f7574206f6620626f756e647360681b81529150613b09565b60208082528101610a1e8161408b565b60158152600060208201745265706c696361206973206e6f742065786973747360581b81529150613b09565b60208082528101610a1e816140c5565b6040810161410f8285613626565b611eb860208301846139ba565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150613b09565b60208082528101610a1e8161411c565b8051610a1e816133fd565b60006020828403121561417d5761417d600080fd5b600061323e848461415d565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150613cc8565b60208082528101610a1e81614189565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150613cc8565b60208082528101610a1e816141e4565b6019815260006020820178125b9d985b1a5908199a5b1958dbda5b8818db185a5b481a59603a1b81529150613b09565b60208082528101610a1e8161423a565b6040810161372f8285613626565b60048110610f6557600080fd5b8051610a1e81614288565b6000602082840312156142b5576142b5600080fd5b600061323e8484614295565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150613cc8565b60208082528101610a1e816142c1565b60005b8381101561433657818101518382015260200161431e565b50506000910152565b6000614349825190565b61435781856020860161431b565b9290920192915050565b6000611eb8828461433f565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613b09565b60208082528101610a1e8161436d565b60006143bb825190565b8084526020840193506143d281856020860161431b565b6143db81613270565b9093019392505050565b60208082528101611eb881846143b156fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a1c74e1a828c7320a1217cd45b5acf7beee78430eea053fdeaaee8a12b376217a26469706673582212200405fc51a2539030a8d9e845f75a9743fa5bdd1ca7b3c9976a623d3ce97db37264736f6c63430008150033",
  "devdoc": {
    "details": "This contract provides functionality for managing car data and associated replicas.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "CarReplicaExpired(uint64,uint64)": {
        "details": "This function allows reporting that the storage deal for a replica has expired.",
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        }
      },
      "CarReplicaMatchingState(uint64,uint64,string)": {
        "details": "This function allows reporting that the matching for a replica has failed.",
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica.",
          "_matchingState": "Matching state of the replica."
        }
      },
      "CarReplicaSlashed(uint64,uint64)": {
        "details": "This function allows reporting that the storage of a replica has been slashed.",
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addCar(bytes32,uint64,uint64,uint16)": {
        "details": "Internal function to add a car based on its CID.      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.      filplus requires dataset replicas,but not limit for car replicas",
        "params": {
          "_cid": "Car CID to be added.",
          "_datasetId": "dataset index of approved dataset",
          "_replicaCount": "count of car's replicas",
          "_size": "size of car"
        }
      },
      "addCars(bytes32[],uint64,uint64[],uint16)": {
        "details": "This function allows the addition of multiple cars at once.",
        "params": {
          "_cids": "Array of car CIDs to be added.",
          "_datasetId": "dataset index of approved dataset",
          "_replicaCount": "count of car's replicas",
          "_sizes": "car size array"
        },
        "returns": {
          "_0": "The ids of the cars and the size."
        }
      },
      "getCarDatasetId(uint64)": {
        "params": {
          "_id": "Car ID to check."
        },
        "returns": {
          "_0": "The dataset ID of the car."
        }
      },
      "getCarHash(uint64)": {
        "params": {
          "_id": "Car ID which to get car hash."
        },
        "returns": {
          "_0": "The hash of the car."
        }
      },
      "getCarId(bytes32)": {
        "params": {
          "_hash": "The hash which to get car id."
        },
        "returns": {
          "_0": "The id of the car."
        }
      },
      "getCarMatchingIds(uint64)": {
        "params": {
          "_id": "Car ID associated with the replica."
        },
        "returns": {
          "_0": "The matching ids of the car's replica."
        }
      },
      "getCarReplica(uint64,uint64)": {
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        },
        "returns": {
          "_0": "The dataset ID, state, and Filecoin claim ID of the replica."
        }
      },
      "getCarReplicaFilecoinClaimId(uint64,uint64)": {
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        },
        "returns": {
          "_0": "The Filecoin claim ID of the replica."
        }
      },
      "getCarReplicaState(uint64,uint64)": {
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        },
        "returns": {
          "_0": "The state of the replica."
        }
      },
      "getCarReplicasCount(uint64)": {
        "details": "This function returns the number of replicas associated with a car.",
        "params": {
          "_id": "Car ID for which to retrieve the replica count."
        },
        "returns": {
          "_0": "The count of replicas associated with the car."
        }
      },
      "getCarSize(uint64)": {
        "params": {
          "_id": "Car ID to check."
        },
        "returns": {
          "_0": "The car size of the car."
        }
      },
      "getCarsHashs(uint64[])": {
        "params": {
          "_ids": "An array of car IDs for which to get car hashs."
        },
        "returns": {
          "_0": "The hashs of cars."
        }
      },
      "getCarsIds(bytes32[])": {
        "params": {
          "_hashs": "An array of car hashs for which to cat car hashs."
        },
        "returns": {
          "_0": "The ids of cars."
        }
      },
      "getCarsSize(uint64[])": {
        "params": {
          "_ids": "An array of car IDs for which to calculate the size."
        },
        "returns": {
          "_0": "The total size of cars."
        }
      },
      "hasCar(uint64)": {
        "details": "This function returns whether a car exists or not.",
        "params": {
          "_id": "Car ID to check."
        },
        "returns": {
          "_0": "True if the car exists, false otherwise."
        }
      },
      "hasCarHash(bytes32)": {
        "details": "This function returns whether a car exists or not.",
        "params": {
          "_hash": "Car Hash to check."
        },
        "returns": {
          "_0": "True if the car exists, false otherwise."
        }
      },
      "hasCarReplica(uint64,uint64)": {
        "details": "This function returns whether a replica with the specified matching ID exists within a car or not.",
        "params": {
          "_id": "Car ID to check.",
          "_matchingId": "Matching ID of the replica to check."
        },
        "returns": {
          "_0": "True if the replica exists, false otherwise."
        }
      },
      "hasCars(uint64[])": {
        "details": "This function returns whether all the specified cars exist or not.",
        "params": {
          "_ids": "Array of car IDs to check."
        },
        "returns": {
          "_0": "True if all specified cars exist, false if any one does not exist."
        }
      },
      "hasCarsHashs(bytes32[])": {
        "details": "This function returns whether a car exists or not.",
        "params": {
          "_hashs": "Array of car Hashs to check."
        },
        "returns": {
          "_0": "True if the car exists, false otherwise."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registCarReplica(uint64,uint64,uint16)": {
        "details": "This function allows adding a replica to an existing car.",
        "params": {
          "_id": "Car ID to which the replica will be added.",
          "_matchingId": "Matching ID for the new replica.",
          "_replicaIndex": "The index of the replica."
        }
      },
      "reportCarReplicaExpired(uint64,uint64,uint64)": {
        "details": "This function allows reporting that the storage deal for a replica has expired.",
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        }
      },
      "reportCarReplicaMatchingState(uint64,uint64,bool)": {
        "details": "This function allows reporting that the matching for a replica is failed.",
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica.",
          "_matchingState": "Matching's state of the replica, true for success ,false for failed."
        }
      },
      "reportCarReplicaSlashed(uint64,uint64,uint64)": {
        "details": "This function allows reporting that the storage of a replica has been slashed.",
        "params": {
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        }
      },
      "setCarReplicaFilecoinClaimId(uint64,uint64,uint64)": {
        "details": "This function allows setting the Filecoin claim ID for a specific replica's storage.",
        "params": {
          "_claimId": "New Filecoin claim ID to set for the replica's storage.",
          "_id": "Car ID associated with the replica.",
          "_matchingId": "Matching ID of the replica."
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "CarsStorageBase",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CarNotExist(uint64)": [
        {
          "notice": "car errors"
        }
      ]
    },
    "events": {
      "CarReplicaExpired(uint64,uint64)": {
        "notice": "Report that storage deal for a replica has expired."
      },
      "CarReplicaFilecoinClaimIdSet(uint64,uint64,uint64)": {
        "notice": "Emitted when the Filecoin claim ID is set for a replica's storage."
      },
      "CarReplicaMatchingState(uint64,uint64,string)": {
        "notice": "Report that matching for a replica has failed."
      },
      "CarReplicaRegisted(uint64,uint64,uint16)": {
        "notice": "Emitted when a replica is registed to a car."
      },
      "CarReplicaSlashed(uint64,uint64)": {
        "notice": "Report that storage of a replica has been slashed."
      },
      "CarsAdded(bytes32[])": {
        "notice": "Emitted when multiple cars are added to the storage."
      }
    },
    "kind": "user",
    "methods": {
      "addCars(bytes32[],uint64,uint64[],uint16)": {
        "notice": "Add multiple cars to the storage."
      },
      "carstoreBaseInitialize(address,address,address)": {
        "notice": "carstoreBaseInitialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "filecoin()": {
        "notice": "get filecoin object"
      },
      "filplus()": {
        "notice": "get filplus object"
      },
      "getCarDatasetId(uint64)": {
        "notice": "Get the dataset ID associated with a car."
      },
      "getCarHash(uint64)": {
        "notice": "Get the hash of car based on the car id."
      },
      "getCarId(bytes32)": {
        "notice": "Get the car's id based on the car's hash."
      },
      "getCarMatchingIds(uint64)": {
        "notice": "Get the matching ids of a replica associated with a car."
      },
      "getCarReplica(uint64,uint64)": {
        "notice": "Get the replica details associated with a car."
      },
      "getCarReplicaFilecoinClaimId(uint64,uint64)": {
        "notice": "Get the Filecoin claim ID associated with a specific replica of a car."
      },
      "getCarReplicaState(uint64,uint64)": {
        "notice": "Get the state of a replica associated with a car."
      },
      "getCarReplicasCount(uint64)": {
        "notice": "Get the count of replicas associated with a car."
      },
      "getCarSize(uint64)": {
        "notice": "Get the dataset ID associated with a car."
      },
      "getCarsHashs(uint64[])": {
        "notice": "Get the hashs of cars based on an array of car IDs."
      },
      "getCarsIds(bytes32[])": {
        "notice": "Get the ids of cars based on an array of car hashs."
      },
      "getCarsSize(uint64[])": {
        "notice": "Get the total size of cars based on an array of car IDs."
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "hasCar(uint64)": {
        "notice": "Check if a car exists based on its ID."
      },
      "hasCarHash(bytes32)": {
        "notice": "Check if a car exists based on its Hash."
      },
      "hasCarReplica(uint64,uint64)": {
        "notice": "Check if a replica exists within a car based on its matching ID."
      },
      "hasCars(uint64[])": {
        "notice": "Check if multiple cars exist based on their IDs."
      },
      "hasCarsHashs(bytes32[])": {
        "notice": "Check if a car exists based on its Hashs."
      },
      "initialize(address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "registCarReplica(uint64,uint64,uint16)": {
        "notice": "Regist a replica to a car."
      },
      "reportCarReplicaExpired(uint64,uint64,uint64)": {
        "notice": "Report that storage deal for a replica has expired."
      },
      "reportCarReplicaMatchingState(uint64,uint64,bool)": {
        "notice": "Report that matching's state for a replica."
      },
      "reportCarReplicaSlashed(uint64,uint64,uint64)": {
        "notice": "Report that storage of a replica has been slashed."
      },
      "setCarReplicaFilecoinClaimId(uint64,uint64,uint64)": {
        "notice": "Set the Filecoin claim ID for a replica's storage."
      }
    },
    "notice": "This contract allows adding cars and managing their associated replicas.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15904,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "carsCount",
        "offset": 0,
        "slot": "101",
        "type": "t_uint64"
      },
      {
        "astId": 15910,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "cars",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_struct(Car)35028_storage)"
      },
      {
        "astId": 15914,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "carsIndexes",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint64,t_bytes32)"
      },
      {
        "astId": 15917,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "roles",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IRoles)20939"
      },
      {
        "astId": 15920,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "filplus",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IFilplus)20899"
      },
      {
        "astId": 15923,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "filecoin",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IFilecoin)20711"
      },
      {
        "astId": 15928,
        "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_array(t_struct(Replica)35012_storage)dyn_storage": {
        "base": "t_struct(Replica)35012_storage",
        "encoding": "dynamic_array",
        "label": "struct CarReplicaType.Replica[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFilecoin)20711": {
        "encoding": "inplace",
        "label": "contract IFilecoin",
        "numberOfBytes": "20"
      },
      "t_contract(IFilplus)20899": {
        "encoding": "inplace",
        "label": "contract IFilplus",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)20939": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_enum(State)34995": {
        "encoding": "inplace",
        "label": "enum CarReplicaType.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Car)35028_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CarReplicaType.Car)",
        "numberOfBytes": "32",
        "value": "t_struct(Car)35028_storage"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_struct(Car)35028_storage": {
        "encoding": "inplace",
        "label": "struct CarReplicaType.Car",
        "members": [
          {
            "astId": 35015,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35017,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "datasetId",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35019,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "size",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35023,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "replicaIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint64,t_uint16)"
          },
          {
            "astId": 35027,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "replicas",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Replica)35012_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Replica)35012_storage": {
        "encoding": "inplace",
        "label": "struct CarReplicaType.Replica",
        "members": [
          {
            "astId": 35006,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "matchingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35008,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "filecoinClaimId",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35011,
            "contract": "src/v0.8/core/carstore/Carstore.sol:Carstore",
            "label": "state",
            "offset": 16,
            "slot": "0",
            "type": "t_enum(State)34995"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}