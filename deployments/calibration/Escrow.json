{
  "address": "0xC2f030f8726752d90740404e98a37e82e671b422",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "errorCode",
          "type": "int256"
        }
      ],
      "name": "ActorError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ActorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailToCallActor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "addr",
          "type": "bytes"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "InvalidCodec",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidResponseLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "log",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sendr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "allowd",
          "type": "address"
        }
      ],
      "name": "errorAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "Collateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentRefund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentSingleBeneficiaryCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdatePaymentBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdatePaymentCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attoFILAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PER_DAY_BLOCKNUMBER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "collateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "enum EscrowType.CollateralEvent",
          "name": "_event",
          "type": "uint8"
        }
      ],
      "name": "emitCollateralEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "enum EscrowType.PaymentEvent",
          "name": "_event",
          "type": "uint8"
        }
      ],
      "name": "emitPaymentEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getBeneficiariesList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getBeneficiaryFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getOwnerBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getOwnerCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getOwnerCreatedBlockNumber",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getOwnerLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getOwnerTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "paymentCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "paymentSingleBeneficiaryCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "paymentWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_datasets",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsProof",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsRequirement",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EscrowType.Type",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "41e379183134fdd1b89fe7b3f8116a55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"errorCode\",\"type\":\"int256\"}],\"name\":\"ActorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"addr\",\"type\":\"bytes\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"InvalidCodec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResponseLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"log\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sendr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowd\",\"type\":\"address\"}],\"name\":\"errorAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"Collateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentSingleBeneficiaryCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatePaymentBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatePaymentCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attoFILAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PER_DAY_BLOCKNUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"enum EscrowType.CollateralEvent\",\"name\":\"_event\",\"type\":\"uint8\"}],\"name\":\"emitCollateralEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"enum EscrowType.PaymentEvent\",\"name\":\"_event\",\"type\":\"uint8\"}],\"name\":\"emitPaymentEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getBeneficiariesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getOwnerBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getOwnerCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getOwnerCreatedBlockNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getOwnerLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getOwnerTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paymentCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paymentSingleBeneficiaryCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"paymentWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_datasets\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsProof\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsRequirement\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EscrowType.Type\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Base escrow contract, holds funds designated for a payee until they withdraw them.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Burn(uint8,address,uint64,uint256)\":{\"details\":\"This function allows report the burn event.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"Collateral(uint8,address,uint64,uint256)\":{\"details\":\"This function allows report the collateral event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PaymentCollateral(uint8,address,uint64,uint256)\":{\"details\":\"This function allows report the payment event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"PaymentRefund(uint8,address,uint64,address,uint256)\":{\"details\":\"This function allows report the payment refund event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"PaymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)\":{\"details\":\"This function allows report the payment event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"PaymentWithdrawn(uint8,address,uint64,address,uint256)\":{\"details\":\"This function allows report the payment withdrawn event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"UpdateCollateral(uint8,address,uint64,uint256)\":{\"details\":\"This function allows report the update collateral event of funds.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"UpdatePaymentBeneficiary(uint8,address,uint64,address,uint256)\":{\"details\":\"This function allows report the payment collateral event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The payment funds.\",\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"UpdatePaymentCollateral(uint8,address,uint64,address,uint256)\":{\"details\":\"This function allows report the payment collateral event of a specific amount in attoFIL.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"},\"Withdrawn(uint8,address,uint64,uint256)\":{\"details\":\"This function allows report the withdrawal event of funds.\",\"params\":{\"_attoFILAmount\":\"The amount of attoFIL.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}}},\"kind\":\"dev\",\"methods\":{\"collateral(uint8,address,uint64,uint256)\":{\"details\":\"Records the sent amount as credit for future withdrawals. Note Called by the payer to store the sent amount as credit to be pulled. Funds sent in this way are stored in an intermediate {Escrow} contract, so there is no danger of them being spent before withdrawal.\",\"params\":{\"_amount\":\"The collateral funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"emitCollateralEvent(uint8,address,uint64,uint8)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"emitPaymentEvent(uint8,address,uint64,address,uint8)\":{\"params\":{\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getBeneficiariesList(uint8,address,uint64)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getBeneficiaryFund(uint8,address,uint64,address)\":{\"params\":{\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getOwnerBurned(uint8,address,uint64)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getOwnerCollateral(uint8,address,uint64)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getOwnerCreatedBlockNumber(uint8,address,uint64)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getOwnerLock(uint8,address,uint64)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"getOwnerTotal(uint8,address,uint64)\":{\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"paymentCollateral(uint8,address,uint64,uint256)\":{\"details\":\"Records the sent amount as credit for future payment withdraw. Note Called by the payer to store the sent amount as credit to be pulled. Funds sent in this way are stored in an intermediate {Escrow} contract, so there is no danger of them being spent before withdrawal.\",\"params\":{\"_amount\":\"The collateral funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"paymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)\":{\"details\":\"Records the sent amount as credit for future payment withdraw. Note Called by the payer to store the sent amount as credit to be pulled. Funds sent in this way are stored in an intermediate {Escrow} contract, so there is no danger of them being spent before withdrawal.\",\"params\":{\"_amount\":\"The collateral funds.\",\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"paymentWithdraw(uint8,address,uint64,address)\":{\"params\":{\"_beneficiary\":\"The beneficiary address for the payment credited funds.\",\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"setDependencies(address,address,address)\":{\"details\":\"After the contract is deployed, this function needs to be called manually!\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint8,address,uint64)\":{\"details\":\"This function allows the owner to initiate a withdrawal of authorized funds.\",\"params\":{\"_id\":\"The business id associated with the credited funds.\",\"_owner\":\"The destination address for the credited funds.\",\"_type\":\"The Escrow type for the credited funds.\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Escrow\",\"version\":1},\"userdoc\":{\"errors\":{\"ActorError(int256)\":[{\"notice\":\"the called actor returned an error as part of its expected behaviour\"}],\"ActorNotFound()\":[{\"notice\":\"the actor is not found\"}],\"FailToCallActor()\":[{\"notice\":\"an error happened trying to call the actor\"}],\"InvalidAddress(bytes)\":[{\"notice\":\"the provided address is not valid\"}],\"InvalidCodec(uint64)\":[{\"notice\":\"the codec received is not valid\"}],\"InvalidResponseLength()\":[{\"notice\":\"the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\"}],\"NotEnoughBalance(uint256,uint256)\":[{\"notice\":\"the smart contract has no enough balance to transfer\"}]},\"events\":{\"Burn(uint8,address,uint64,uint256)\":{\"notice\":\"Report a burn event.\"},\"Collateral(uint8,address,uint64,uint256)\":{\"notice\":\"Report a collateral event.\"},\"PaymentCollateral(uint8,address,uint64,uint256)\":{\"notice\":\"Report a payment event.\"},\"PaymentRefund(uint8,address,uint64,address,uint256)\":{\"notice\":\"Report a PaymentRefund event.\"},\"PaymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)\":{\"notice\":\"Report a single beneficiary payment event.\"},\"PaymentWithdrawn(uint8,address,uint64,address,uint256)\":{\"notice\":\"Report a PaymentWithdrawn event.\"},\"UpdateCollateral(uint8,address,uint64,uint256)\":{\"notice\":\"Report a update collateral event.\"},\"UpdatePaymentBeneficiary(uint8,address,uint64,address,uint256)\":{\"notice\":\"Report a UpdatePaymentBeneficiaries.\"},\"UpdatePaymentCollateral(uint8,address,uint64,address,uint256)\":{\"notice\":\"Report a UpdatePaymentCollateral made by a _beneficiary.\"},\"Withdrawn(uint8,address,uint64,uint256)\":{\"notice\":\"Report a withdrawal event.\"}},\"kind\":\"user\",\"methods\":{\"collateral(uint8,address,uint64,uint256)\":{\"notice\":\"Emits a {Collateral} event upon successful credit recording.\"},\"emitCollateralEvent(uint8,address,uint64,uint8)\":{\"notice\":\"Post an event for collateral type.\"},\"emitPaymentEvent(uint8,address,uint64,address,uint8)\":{\"notice\":\"Post an event for payment type.\"},\"getBeneficiariesList(uint8,address,uint64)\":{\"notice\":\"Get beneficiariesList.\"},\"getBeneficiaryFund(uint8,address,uint64,address)\":{\"notice\":\"Get beneficiary fund.\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getOwnerBurned(uint8,address,uint64)\":{\"notice\":\"Get owner burned funds.\"},\"getOwnerCollateral(uint8,address,uint64)\":{\"notice\":\"Get owner collateral funds.\"},\"getOwnerCreatedBlockNumber(uint8,address,uint64)\":{\"notice\":\"Get owner created block number.\"},\"getOwnerLock(uint8,address,uint64)\":{\"notice\":\"Get owner lock funds.\"},\"getOwnerTotal(uint8,address,uint64)\":{\"notice\":\"Get owner total funds.\"},\"initialize(address)\":{\"notice\":\"Initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"paymentCollateral(uint8,address,uint64,uint256)\":{\"notice\":\"Emits a {PaymentCollateral} event upon successful credit recording.\"},\"paymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)\":{\"notice\":\"Emits a {PaymentSingleBeneficiaryCollateral} event upon successful credit recording.\"},\"paymentWithdraw(uint8,address,uint64,address)\":{\"notice\":\"Payment withdraw funds authorized for an address.Emits a {PaymentWithdrawn} event upon successful credit recording.\"},\"setDependencies(address,address,address)\":{\"notice\":\"Set dependencies function to initialize the depend contract.\"},\"withdraw(uint8,address,uint64)\":{\"notice\":\"Withdraw funds authorized for an address.Emits a {Withdrawn} event upon successful withdrawal.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/core/finance/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030363336353036303633\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/core/finance/Escrow.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {SendAPI} from \\\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/SendAPI.sol\\\";\\nimport {FilAddresses} from \\\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\\\";\\n\\n// upgrade\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n// type\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IEscrow} from \\\"src/v0.8/interfaces/core/IEscrow.sol\\\";\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IDatasetsProof} from \\\"src/v0.8/interfaces/module/IDatasetsProof.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\n\\n// shared\\nimport {EscrowEvents} from \\\"src/v0.8/shared/events/EscrowEvents.sol\\\";\\nimport {EscrowLIB} from \\\"src/v0.8/core/finance/library/EscrowLIB.sol\\\";\\n\\n/// @title Escrow\\n/// @dev Base escrow contract, holds funds designated for a payee until they withdraw them.\\ncontract Escrow is Initializable, UUPSUpgradeable, RolesModifiers, IEscrow {\\n    using EscrowLIB for EscrowType.Escrow;\\n\\n    mapping(EscrowType.Type => mapping(address => mapping(uint256 => EscrowType.Escrow)))\\n        private escrowAccount; // mapping(type, mapping(payee, mapping(id, Escrow)))\\n\\n    IRoles private roles;\\n    IDatasets private datasets;\\n    IDatasetsProof private datasetsProof;\\n    IDatasetsRequirement private datasetsRequirement;\\n    uint256 public constant PER_DAY_BLOCKNUMBER = 2880;\\n    address payable public constant BURN_ADDRESS =\\n        payable(0xff00000000000000000000000000000000000063); // Filecoin burn address\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice Initialize function to initialize the contract and grant the default admin role to the deployer.\\n    function initialize(address _roles) public initializer {\\n        roles = IRoles(_roles);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice Set dependencies function to initialize the depend contract.\\n    /// @dev After the contract is deployed, this function needs to be called manually!\\n    function setDependencies(\\n        address _datasets,\\n        address _datasetsProof,\\n        address _datasetsRequirement\\n    ) public onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) {\\n        datasets = IDatasets(_datasets);\\n        datasetsProof = IDatasetsProof(_datasetsProof);\\n        datasetsRequirement = IDatasetsRequirement(_datasetsRequirement);\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by default admin role\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @dev Records the sent amount as credit for future withdrawals.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Collateral} event upon successful credit recording.\\n    function collateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) public payable {\\n        uint256 total = msg.value;\\n        escrowAccount[_type][_owner][_id].deposit(total);\\n        escrowAccount[_type][_owner][_id].collateral(_amount);\\n\\n        emit EscrowEvents.Collateral(_type, _owner, _id, _amount);\\n    }\\n\\n    /// @notice Withdraw funds authorized for an address.\\n    /// @dev This function allows the owner to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {Withdrawn} event upon successful withdrawal.\\n    function withdraw(\\n        EscrowType.Type _type,\\n        address payable _owner,\\n        uint64 _id\\n    ) public {\\n        uint256 amount = escrowAccount[_type][_owner][_id].withdraw();\\n        SendAPI.send(FilAddresses.fromEthAddress(_owner), amount);\\n\\n        emit EscrowEvents.Withdrawn(_type, _owner, _id, amount);\\n    }\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentCollateral} event upon successful credit recording.\\n    function paymentCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) public payable {\\n        uint256 total = msg.value;\\n        escrowAccount[_type][_owner][_id].deposit(total);\\n        escrowAccount[_type][_owner][_id].paymentCollateral(_amount);\\n\\n        emit EscrowEvents.PaymentCollateral(_type, _owner, _id, _amount);\\n    }\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentSingleBeneficiaryCollateral} event upon successful credit recording.\\n    function paymentSingleBeneficiaryCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) public payable {\\n        uint256 total = msg.value;\\n        require(total >= _amount, \\\"Exceeds the amount of payment\\\");\\n        escrowAccount[_type][_owner][_id].deposit(total);\\n        escrowAccount[_type][_owner][_id].paymentCollateral(_amount);\\n        escrowAccount[_type][_owner][_id].paymentAddbeneficiary(\\n            _beneficiary,\\n            _amount\\n        );\\n\\n        emit EscrowEvents.PaymentSingleBeneficiaryCollateral(\\n            _type,\\n            _owner,\\n            _id,\\n            _beneficiary,\\n            _amount\\n        );\\n    }\\n\\n    /// @notice Payment withdraw funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @notice Emits a {PaymentWithdrawn} event upon successful credit recording.\\n    function paymentWithdraw(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    ) public {\\n        uint256 amount = escrowAccount[_type][_owner][_id].paymentWithdraw(\\n            _beneficiary\\n        );\\n        SendAPI.send(FilAddresses.fromEthAddress(_beneficiary), amount);\\n\\n        emit EscrowEvents.PaymentWithdrawn(\\n            _type,\\n            _owner,\\n            _id,\\n            _beneficiary,\\n            amount\\n        );\\n    }\\n\\n    /// @notice Post an event for collateral type.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function emitCollateralEvent(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        EscrowType.CollateralEvent _event\\n    ) external {\\n        if (_event == EscrowType.CollateralEvent.SyncBurn) {\\n            uint256 amount = _syncBurn(_type, _owner, _id);\\n            _updateBurn(_type, payable(_owner), _id, amount);\\n        } else if (_event == EscrowType.CollateralEvent.SyncCollateral) {\\n            uint256 amount = _syncCollateral(_type, _owner, _id);\\n            _updateCollateral(_type, _owner, _id, amount);\\n        }\\n    }\\n\\n    /// @notice Post an event for payment type.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function emitPaymentEvent(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        EscrowType.PaymentEvent _event\\n    ) external {\\n        if (_event == EscrowType.PaymentEvent.SyncPaymentRefund) {\\n            uint256 amount = _syncPaymentRefund(\\n                _type,\\n                _owner,\\n                _id,\\n                _beneficiary\\n            );\\n            _updatePaymentRefund(_type, _owner, _id, _beneficiary, amount);\\n        } else if (_event == EscrowType.PaymentEvent.SyncPaymentCollateral) {\\n            uint256 amount = _syncPaymentCollateral(\\n                _type,\\n                _owner,\\n                _id,\\n                _beneficiary\\n            );\\n            _updatePaymentCollateral(_type, _owner, _id, _beneficiary, amount);\\n        } else if (_event == EscrowType.PaymentEvent.SyncPaymentBeneficiaries) {\\n            uint256 amount = _syncPaymentBeneficiary(\\n                _type,\\n                _owner,\\n                _id,\\n                _beneficiary\\n            );\\n            _updatePaymentBeneficiary(_type, _owner, _id, _beneficiary, amount);\\n        }\\n    }\\n\\n    /// @notice Update collateral funds authorized for an address.\\n    /// @dev This function allows update collateral funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {UpdateCollateral} event upon successful withdrawal.\\n    function _updateCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) internal {\\n        escrowAccount[_type][_owner][_id].updateCollateral(_amount);\\n\\n        emit EscrowEvents.UpdateCollateral(_type, _owner, _id, _amount);\\n    }\\n\\n    /// @notice Burn funds authorized for an address.\\n    /// @dev This function allows burn funds.Triggered by business conditions\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The burn funds.\\n    /// @notice Emits a {Burn} event upon successful withdrawal.\\n    function _updateBurn(\\n        EscrowType.Type _type,\\n        address payable _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) internal {\\n        escrowAccount[_type][_owner][_id].burn(_amount);\\n        SendAPI.send(FilAddresses.fromEthAddress(BURN_ADDRESS), _amount);\\n\\n        emit EscrowEvents.Burn(_type, _owner, _id, _amount);\\n    }\\n\\n    /// @notice Burn funds authorized for an address.\\n    /// @dev This function allows burn funds.Triggered by business conditions\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The burn funds.\\n    /// @notice Emits a {Burn} event upon successful withdrawal.\\n    function _updatePaymentCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) internal {\\n        escrowAccount[_type][_owner][_id].updatePaymentCollateral(\\n            _beneficiary,\\n            _amount\\n        );\\n\\n        emit EscrowEvents.UpdatePaymentCollateral(\\n            _type,\\n            _owner,\\n            _id,\\n            _beneficiary,\\n            _amount\\n        );\\n    }\\n\\n    /// @notice Refund funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The refund funds.\\n    /// @notice Emits a {PaymentRefund} event upon successful credit recording.\\n    function _updatePaymentRefund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) internal {\\n        escrowAccount[_type][_owner][_id].paymentRefund(_beneficiary, _amount);\\n\\n        emit EscrowEvents.PaymentRefund(\\n            _type,\\n            _owner,\\n            _id,\\n            _beneficiary,\\n            _amount\\n        );\\n    }\\n\\n    /// @notice Update payment beneficiaries authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The payment amount of beneficiaries.\\n    /// @notice Emits a {UpdatePaymentBeneficiaries} event upon successful credit recording.\\n    function _updatePaymentBeneficiary(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) internal {\\n        escrowAccount[_type][_owner][_id].paymentAddbeneficiary(\\n            _beneficiary,\\n            _amount\\n        );\\n\\n        emit EscrowEvents.UpdatePaymentBeneficiary(\\n            _type,\\n            _owner,\\n            _id,\\n            _beneficiary,\\n            _amount\\n        );\\n    }\\n\\n    /// @dev Determines the amount available for collateral based on escrow type, owner, and ID.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function _syncCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) internal view returns (uint256) {\\n        if (_type == EscrowType.Type.DatacapCollateral) {\\n            return _datacapCollateral(_owner, _id);\\n        } else if (_type == EscrowType.Type.DatacapChunkCollateral) {\\n            // TODO: Implement logic to retrieve allowed withdrawal funds from the datacap contract.\\n            return 0;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @dev Handles the logic for burning funds based on escrow type, owner, and ID.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function _syncBurn(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) internal view returns (uint256) {\\n        // TODO:\\n        return getOwnerCollateral(_type, _owner, _id); // Burn all collateral\\n    }\\n\\n    /// @dev Handles the logic for collateral payments based on escrow type, owner, ID, and beneficiary.\\n    function _syncPaymentCollateral(\\n        EscrowType.Type /*_type*/,\\n        address /*_owner*/,\\n        uint64 /*_id*/,\\n        address /*_beneficiary*/\\n    ) internal pure returns (uint256) {\\n        // TODO:\\n        return 0; // Release all collateral\\n    }\\n\\n    /// @dev Handles the logic for refunding payments based on escrow type, owner, ID, and beneficiary.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function _syncPaymentRefund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address /*_beneficiary*/\\n    ) internal view returns (uint256) {\\n        // TODO:\\n        return getOwnerCollateral(_type, _owner, _id); // Refund all payment for test\\n    }\\n\\n    /// @dev Handles the logic for synchronize payment beneficiary based on escrow type, owner, ID.\\n    function _syncPaymentBeneficiary(\\n        EscrowType.Type /*_type*/,\\n        address /*_owner*/,\\n        uint64 /*_id*/,\\n        address /*_beneficiary*/\\n    ) internal pure returns (uint256) {\\n        // TODO:\\n        return 0;\\n    }\\n\\n    /// @dev Determines the amount available for collateral from a DatacapCollateral\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function _datacapCollateral(\\n        address _owner,\\n        uint64 _id\\n    ) internal view returns (uint256) {\\n        uint256 collateralFunds = 0;\\n\\n        // Check the dataset's status:\\n        // - If it's in the 'MetadataRejected' status,\\n        // - or if it's not in the 'MetadataApproved' status and has been staked for over 180 days,\\n        // - or if it has been mortgaged for over 365 days, the funds are eligible for withdrawal.\\n        DatasetType.State datasetState = datasets.getDatasetState(_id);\\n        uint64 createBlockNumber = getOwnerCreatedBlockNumber(\\n            EscrowType.Type.DatacapCollateral,\\n            _owner,\\n            _id\\n        );\\n\\n        if (\\n            (datasetState == DatasetType.State.MetadataRejected) ||\\n            (datasetState != DatasetType.State.DatasetApproved &&\\n                block.number >\\n                (createBlockNumber + PER_DAY_BLOCKNUMBER * 180)) ||\\n            block.number > (createBlockNumber + PER_DAY_BLOCKNUMBER * 365)\\n        ) {\\n            return collateralFunds; // Release all collateral funds\\n        }\\n\\n        // Check the datasetProof's status:\\n        // - If it's in the 'allCompleted' status,\\n        // - it's all proof completed collateral funds\\n        if (\\n            datasetsProof.isDatasetProofallCompleted(\\n                _id,\\n                DatasetType.DataType.Source\\n            )\\n        ) {\\n            collateralFunds = datasetsProof.getDatasetCollateralRequirement(\\n                _id\\n            );\\n        } else {\\n            // Others are pre collateral funds\\n            collateralFunds = datasetsRequirement\\n                .getDatasetPreCollateralRequirements(_id);\\n        }\\n\\n        uint256 total = getOwnerTotal(\\n            EscrowType.Type.DatacapCollateral,\\n            _owner,\\n            _id\\n        );\\n        require(total >= collateralFunds, \\\"Insufficient collateral funds\\\");\\n        return collateralFunds;\\n    }\\n\\n    /// @notice Get owner created block number.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCreatedBlockNumber(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) public view returns (uint64) {\\n        return escrowAccount[_type][_owner][_id].owner.createdBlockNumber;\\n    }\\n\\n    /// @notice Get owner collateral funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) public view returns (uint256) {\\n        return escrowAccount[_type][_owner][_id].owner.collateral;\\n    }\\n\\n    /// @notice Get owner total funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerTotal(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) public view returns (uint256) {\\n        return escrowAccount[_type][_owner][_id].owner.total;\\n    }\\n\\n    /// @notice Get owner lock funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerLock(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) public view returns (uint256) {\\n        return escrowAccount[_type][_owner][_id].owner.lock;\\n    }\\n\\n    /// @notice Get owner burned funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerBurned(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) public view returns (uint256) {\\n        return escrowAccount[_type][_owner][_id].owner.burned;\\n    }\\n\\n    /// @notice Get beneficiariesList.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getBeneficiariesList(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) public view returns (address[] memory) {\\n        return escrowAccount[_type][_owner][_id].beneficiariesList;\\n    }\\n\\n    /// @notice Get beneficiary fund.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function getBeneficiaryFund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    ) public view returns (uint256, uint256, uint256, uint256, uint64) {\\n        return (\\n            escrowAccount[_type][_owner][_id].beneficiaries[_beneficiary].total,\\n            escrowAccount[_type][_owner][_id].beneficiaries[_beneficiary].lock,\\n            escrowAccount[_type][_owner][_id]\\n                .beneficiaries[_beneficiary]\\n                .collateral,\\n            escrowAccount[_type][_owner][_id]\\n                .beneficiaries[_beneficiary]\\n                .burned,\\n            escrowAccount[_type][_owner][_id]\\n                .beneficiaries[_beneficiary]\\n                .createdBlockNumber\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc845d6ea76c3e48aef5eb218c8a225c057cc6c73a14f11bb0d8b990ff6d6cdbc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/core/finance/library/EscrowLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// @title EscrowLIB\\n/// @dev This library provides functions for managing the escrow.\\n/// @notice Library for managing operations related to escrow.\\nlibrary EscrowLIB {\\n    function deposit(EscrowType.Escrow storage self, uint256 _total) internal {\\n        self.owner.total += _total;\\n    }\\n\\n    /// @dev Increases the total and collateral balances for the escrow owner and updates the creation block number.\\n    /// @param self The Escrow object.\\n    /// @param _amount The collateral funds.\\n    function collateral(\\n        EscrowType.Escrow storage self,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            self.owner.total >=\\n                _amount + self.owner.collateral + self.owner.lock,\\n            \\\"collateral > total\\\"\\n        );\\n        self.owner.collateral += _amount;\\n        self.owner.createdBlockNumber = uint64(block.number);\\n    }\\n\\n    /// @dev Calculates and returns the amount available for withdrawal and reduces the total balance accordingly.\\n    /// @param self The Escrow object.\\n    function withdraw(\\n        EscrowType.Escrow storage self\\n    ) internal returns (uint256) {\\n        uint256 amount = self.owner.total -\\n            self.owner.collateral -\\n            self.owner.lock;\\n\\n        self.owner.total -= amount;\\n        return amount;\\n    }\\n\\n    /// @dev Updates the collateral balance for the escrow owner.\\n    /// @param self The Escrow object.\\n    /// @param _amount The collateral funds.\\n    function updateCollateral(\\n        EscrowType.Escrow storage self,\\n        uint256 _amount\\n    ) internal {\\n        self.owner.collateral = _amount;\\n    }\\n\\n    /// @dev Decreases the total and collateral balances for the escrow owner and increases the burned balance.\\n    /// @param self The Escrow object.\\n    /// @param _amount The collateral funds.\\n    function burn(EscrowType.Escrow storage self, uint256 _amount) internal {\\n        self.owner.total -= _amount;\\n        self.owner.collateral -= _amount;\\n        self.owner.burned += _amount;\\n    }\\n\\n    /// @dev Deposits funds into the escrow, locking them for a payment, and updates creation information.\\n    /// @param self The Escrow object.\\n    /// @param _amount The collateral funds.\\n    function paymentCollateral(\\n        EscrowType.Escrow storage self,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            self.owner.total >=\\n                _amount + self.owner.lock + self.owner.collateral,\\n            \\\"payment > total\\\"\\n        );\\n        self.owner.lock += _amount;\\n        self.owner.createdBlockNumber = uint64(block.number);\\n    }\\n\\n    /// @dev Add beneficiary to payment escrow, and updates creation information.\\n    /// @param self The Escrow object.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The payment funds.\\n    function paymentAddbeneficiary(\\n        EscrowType.Escrow storage self,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) internal {\\n        if (self.beneficiaries[_beneficiary].createdBlockNumber == 0) {\\n            self.beneficiariesList.push(_beneficiary);\\n        }\\n        require(self.owner.lock >= _amount, \\\"Exceeds the amount of payment\\\");\\n\\n        self.beneficiaries[_beneficiary].total += _amount;\\n        self.beneficiaries[_beneficiary].collateral += _amount;\\n        self.beneficiaries[_beneficiary].createdBlockNumber = uint64(\\n            block.number\\n        );\\n    }\\n\\n    /// @dev Calculates the amount available for withdrawal by a beneficiary and adjusts balances accordingly.\\n    /// @param self The Escrow object.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @return The amount available for withdrawal by the beneficiary.\\n    function paymentWithdraw(\\n        EscrowType.Escrow storage self,\\n        address _beneficiary\\n    ) internal returns (uint256) {\\n        uint256 amount = self.beneficiaries[_beneficiary].total -\\n            self.beneficiaries[_beneficiary].collateral -\\n            self.beneficiaries[_beneficiary].lock;\\n\\n        self.beneficiaries[_beneficiary].total -= amount;\\n        self.owner.total -= amount;\\n        self.owner.lock -= amount;\\n\\n        return amount;\\n    }\\n\\n    /// @dev Updates the collateral balance for a specific beneficiary in the escrow.\\n    /// @param self The Escrow object.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    function updatePaymentCollateral(\\n        EscrowType.Escrow storage self,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) internal {\\n        self.beneficiaries[_beneficiary].collateral = _amount;\\n    }\\n\\n    /// @dev Refunds funds to a beneficiary, reducing their total and collateral balances and unlocking the owner's funds.\\n    /// @param self The Escrow object.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    function paymentRefund(\\n        EscrowType.Escrow storage self,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) internal {\\n        self.beneficiaries[_beneficiary].total -= _amount;\\n        self.beneficiaries[_beneficiary].collateral -= _amount;\\n\\n        self.owner.lock -= _amount;\\n    }\\n}\\n\",\"keccak256\":\"0xf9bd58c7fee3a511f0a1bc59167a6295831e21c36f4d412cad23c1b34824e602\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IEscrow.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// @title IEscrow Interface\\n/// @notice This interface defines the escrow-related functions within the system.\\ninterface IEscrow {\\n    /// @dev Records the sent amount as credit for future withdrawals.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Collateral} event upon successful credit recording.\\n    function collateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Withdraw funds authorized for an address.\\n    /// @dev This function allows the owner to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {Withdrawn} event upon successful withdrawal.\\n    function withdraw(\\n        EscrowType.Type _type,\\n        address payable _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentCollateral} event upon successful credit recording.\\n    function paymentCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentSingleBeneficiaryCollateral} event upon successful credit recording.\\n    function paymentSingleBeneficiaryCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Payment withdraw funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @notice Emits a {PaymentWithdrawn} event upon successful credit recording.\\n    function paymentWithdraw(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    ) external;\\n\\n    /// @notice Post an event for collateral type.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function emitCollateralEvent(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        EscrowType.CollateralEvent _event\\n    ) external;\\n\\n    /// @notice Post an event for payment type.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function emitPaymentEvent(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        EscrowType.PaymentEvent _event\\n    ) external;\\n\\n    /// @notice Get owner created block number.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCreatedBlockNumber(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint64);\\n\\n    /// @notice Get owner collateral funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner total funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerTotal(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner lock funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerLock(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner burned funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerBurned(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get beneficiariesList.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getBeneficiariesList(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get beneficiary fund.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function getBeneficiaryFund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total, // Total amount in fund account\\n            uint256 lock, // Lock amount in fund account for payment beneficiaries\\n            uint256 collateral, // Collateral amount in fund account for withdraw and punishment\\n            uint256 burned, // burned amount in fund account\\n            uint64 createdBlockNumber // Fund account created block number\\n        );\\n}\\n\",\"keccak256\":\"0x379552be51d20f8e5bf6b7a980efde842e98b3865ba6c3b403feeae0d1d05afd\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasets.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasets\\ninterface IDatasets {\\n    ///@notice Approve a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    function approveDataset(uint64 _datasetId) external;\\n\\n    ///@notice Approve the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    function approveDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Reject a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\\n    function rejectDataset(uint64 _datasetId) external;\\n\\n    ///@notice Reject the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    function rejectDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Submit metadata for a dataset\\n    ///        Note:anyone can submit dataset metadata\\n    function submitDatasetMetadata(\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) external returns (uint64);\\n\\n    ///@notice Get dataset metadata\\n    function getDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory title,\\n            string memory industry,\\n            string memory name,\\n            string memory description,\\n            string memory source,\\n            string memory accessMethod,\\n            address submitter,\\n            uint64 createdBlockNumber,\\n            uint64 sizeInBytes,\\n            bool isPublic,\\n            uint64 version\\n        );\\n\\n    /// @notice Get submitter of dataset's metadata\\n    function getDatasetMetadataSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset state\\n    function getDatasetState(\\n        uint64 _datasetId\\n    ) external view returns (DatasetType.State);\\n\\n    ///@notice Check if a dataset has metadata\\n    function hasDatasetMetadata(\\n        string memory _accessMethod\\n    ) external view returns (bool);\\n\\n    /// @notice Checks if metadata fields are valid.\\n    function requireValidDatasetMetadata(\\n        uint64 _datasetId\\n    ) external view returns (bool);\\n\\n    /// @notice Report the dataset has not enough collateral.\\n    function reportCollateralNotEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset has enough collateral.\\n    function reportCollateralEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset replica has already been submitted.\\n    function reportDatasetReplicaRequirementSubmitted(\\n        uint64 _datasetId\\n    ) external;\\n\\n    /// @notice Report the dataset proof has already been submitted.\\n    function reportDatasetProofSubmitted(uint64 _datasetId) external;\\n\\n    /// @notice Default getter functions for public variables\\n    function datasetsCount() external view returns (uint64);\\n\\n    /// @notice get  roles instance\\n    function roles() external view returns (IRoles);\\n\\n    /// @notice get  governance address\\n    function governanceAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x75120b5e326a5f910dbbd81b4191b97a5818d9f2777142c7c8ff2a0c50f428fe\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsProof.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsProof\\ninterface IDatasetsProof {\\n    ///@notice Submit proof root for a dataset\\n    function submitDatasetProofRoot(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        string calldata _mappingFilesAccessMethod,\\n        bytes32 _rootHash\\n    ) external;\\n\\n    ///@notice Submit proof for a dataset\\n    function submitDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        bytes32[] memory _leafHashes,\\n        uint64 _leafIndex,\\n        uint64[] memory _leafSizes,\\n        bool _completed\\n    ) external;\\n\\n    ///@notice Submit proof completed for a dataset\\n    function submitDatasetProofCompleted(uint64 _datasetId) external;\\n\\n    /// @notice Append dataset collateral funds\\n    function appendDatasetCollateral(uint64 _datasetId) external payable;\\n\\n    /// @notice Get dataset need append collateral funds\\n    function getDatasetAppendCollateral(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCars(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    function getDatasetProofCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset proof's submitter\\n    function getDatasetProofSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCarsCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset size\\n    function getDatasetSize(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset minimum conditional\\n    function getDatasetCollateralRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Check if a dataset has a car id\\n    function isDatasetContainsCar(\\n        uint64 _datasetId,\\n        uint64 _id\\n    ) external returns (bool);\\n\\n    ///@notice Check if a dataset has car ids\\n    function isDatasetContainsCars(\\n        uint64 _datasetId,\\n        uint64[] memory _ids\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset has submitter\\n    function isDatasetProofSubmitter(\\n        uint64 _datasetId,\\n        address _submitter\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset proof all completed\\n    function isDatasetProofallCompleted(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe6f984da1ffcf0bb6dec2e79a232f394d564107972c727420d21a2d084c0a584\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsRequirement\\ninterface IDatasetsRequirement {\\n    ///@notice Submit storage requirement for a dataset\\n    ///        Note: submmiter of dataset can submit dataset storage requirement\\n    function submitDatasetReplicaRequirements(\\n        uint64 _datasetId,\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external payable;\\n\\n    ///@notice Get dataset replicas count\\n    function getDatasetReplicasCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Get dataset replica requirement\\n    function getDatasetReplicaRequirement(\\n        uint64 _datasetId,\\n        uint64 _index\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            address[] memory,\\n            uint16,\\n            uint16,\\n            uint32[] memory\\n        );\\n\\n    ///@notice Get dataset pre conditional\\n    function getDatasetPreCollateralRequirements(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7dc6c2d7dfaa3f6aaa56052304f36adda27182c1c34e7d6fead3671245d3e9bc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/EscrowEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// @title EscrowEvents\\nlibrary EscrowEvents {\\n    /// @notice Report a collateral event.\\n    /// @dev This function allows report the collateral event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event Collateral(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a withdrawal event.\\n    /// @dev This function allows report the withdrawal event of funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event Withdrawn(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a update collateral event.\\n    /// @dev This function allows report the update collateral event of funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event UpdateCollateral(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a burn event.\\n    /// @dev This function allows report the burn event.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event Burn(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a payment event.\\n    /// @dev This function allows report the payment event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event PaymentCollateral(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a single beneficiary payment event.\\n    /// @dev This function allows report the payment event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event PaymentSingleBeneficiaryCollateral(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        address indexed _beneficiary,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a PaymentWithdrawn event.\\n    /// @dev This function allows report the payment withdrawn event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event PaymentWithdrawn(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        address indexed _beneficiary,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a UpdatePaymentCollateral made by a _beneficiary.\\n    /// @dev This function allows report the payment collateral event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event UpdatePaymentCollateral(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        address indexed _beneficiary,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a UpdatePaymentBeneficiaries.\\n    /// @dev This function allows report the payment collateral event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _attoFILAmount The payment funds.\\n    event UpdatePaymentBeneficiary(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _attoFILAmount\\n    );\\n\\n    /// @notice Report a PaymentRefund event.\\n    /// @dev This function allows report the payment refund event of a specific amount in attoFIL.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _attoFILAmount The amount of attoFIL.\\n    event PaymentRefund(\\n        EscrowType.Type _type,\\n        address indexed _owner,\\n        uint64 _id,\\n        address indexed _beneficiary,\\n        uint256 _attoFILAmount\\n    );\\n}\\n\",\"keccak256\":\"0x8899c46514df506ad6e06ebb912c889843d48932dc2f63e714858e5326e5b887\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    error errorAddress(string log, address sendr, address allowd);\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x1ac59eba93f2539390e854eb786545be0e72be3fbd606dd0f679df3cd0ddf1cd\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        CollateralNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x9108caabc6f94898eae01009a91c9f2f728cb99d7cf80358d4c3b1e4058997f4\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/EscrowType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title EscrowType Library\\n/// @notice This library defines escrow type within the system.\\nlibrary EscrowType {\\n    /// @notice Enum escrow object types.\\n    enum Type {\\n        DatacapCollateral, // The storage client collateral.\\n        DatacapChunkCollateral, // The storage provider collateral.\\n        DataAuditCollateral, // The data auditor collateral, for dispute\\n        DataPrepareCollateral, // The data preparer collateral,for dispute\\n        DataAuditFee, // The data auditor calculate fees.\\n        DataPrepareFeeByClient, // The data preparer calculate fees paid by storage client.\\n        DataPrepareFeeByProvider // The data preparer calculate fees paid by storage provider.\\n    }\\n\\n    /// @notice Enum representing the events related to collateral management.\\n    enum CollateralEvent {\\n        SyncBurn, // Escrow synchronize collateral burn event.\\n        SyncCollateral // Escrow synchronize collateral event.\\n    }\\n\\n    /// @notice Enum representing the events related to payment management.\\n    enum PaymentEvent {\\n        SyncPaymentRefund, // Escrow synchronize payment refund event.\\n        SyncPaymentCollateral, // Escrow synchronize payment collateral event.\\n        SyncPaymentBeneficiaries // Escrow synchronize payment beneficiaries list.\\n    }\\n\\n    /// @notice Struct the beneficiary of escrow\\n    struct Fund {\\n        uint256 total; // Total amount in fund account\\n        uint256 lock; // Lock amount in fund account for payment beneficiaries\\n        uint256 collateral; // Collateral amount in fund account for withdraw and punishment\\n        uint256 burned; // burned amount in fund account\\n        uint64 createdBlockNumber; // Fund account created block number\\n    }\\n\\n    /// @notice Struct the escrow\\n    struct Escrow {\\n        Fund owner; // fund owner\\n        address[] beneficiariesList; // Retrieves beneficiaries list\\n        mapping(address beneficiary => Fund) beneficiaries; // Beneficiaries information\\n    }\\n}\\n\",\"keccak256\":\"0xf2a79be6903d2de33f8b87f0ee14a6f5b7abe7d88fb0779f2ebc507933a314b8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/SendAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\n\\n/// @title This library is helper method to send funds to some specific address. Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary SendAPI {\\n    /// @notice send token to a specific actor\\n    /// @param target The id address (uint64) you want to send funds to\\n    /// @param value tokens to be transferred to the receiver\\n    function send(CommonTypes.FilActorId target, uint256 value) internal {\\n        bytes memory result = Actor.callByID(target, 0, Misc.NONE_CODEC, new bytes(0), value, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @notice send token to a specific actor\\n    /// @param target The address you want to send funds to\\n    /// @param value tokens to be transferred to the receiver\\n    function send(CommonTypes.FilAddress memory target, uint256 value) internal {\\n        bytes memory result = Actor.callByAddress(target.data, 0, Misc.NONE_CODEC, new bytes(0), value, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69b80c657fa612d0d71464f1ce0d539826c00da27c54018490f440678910d484\",\"license\":\"Apache-2.0\"},\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9\",\"license\":\"Apache-2.0\"},\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        if (exit != 0) {\\n            revert ActorError(exit);\\n        }\\n\\n        return return_value;\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a\",\"license\":\"Apache-2.0\"},\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"040a\\\", addr));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"00\\\", result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == 0x00) {\\n            return addr.data.length <= 10;\\n        } else if (addr.data[0] == 0x01 || addr.data[0] == 0x02) {\\n            return addr.data.length == 21;\\n        } else if (addr.data[0] == 0x03) {\\n            return addr.data.length == 49;\\n        } else if (addr.data[0] == 0x04) {\\n            return addr.data.length <= 64;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\",\"keccak256\":\"0x3ca8652660af7a3ff1b894b7c8a875645999b561499e960198dfe330d39ce387\",\"license\":\"Apache-2.0\"},\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/utils/Leb128.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b\",\"license\":\"Apache-2.0\"},\"src/v0.8/vendor/filecoin-solidity/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516132a261004c600039600081816105af015281816105f801528181610758015281816107980152610ad501526132a26000f3fe6080604052600436106101055760003560e01c80631054f8371461010a5780631a1015d81461012c5780633659cfe61461013f57806341279ee21461015f5780634b5af90a146101955780634f1ef286146101c257806351166ac8146101d557806352d1902d1461020657806364000be01461021b5780636e4b15611461023b5780637916b3971461024e578063938a6b0d1461026e578063aaf10f421461028e578063b52d326c146102b0578063c190abc4146102d0578063c23732b6146102f0578063c4d66de81461031d578063ce37bde71461033d578063ebc5397714610350578063ef8e926e14610366578063f39b9c5114610386578063fccc2813146103a6575b600080fd5b34801561011657600080fd5b5061012a61012536600461245b565b6103c1565b005b61012a61013a3660046124bc565b610488565b34801561014b57600080fd5b5061012a61015a366004612520565b6105a5565b34801561016b57600080fd5b5061017f61017a36600461245b565b610676565b60405161018c9190612549565b60405180910390f35b3480156101a157600080fd5b506101b56101b036600461245b565b6106e1565b60405161018c9190612566565b61012a6101d0366004612679565b61074e565b3480156101e157600080fd5b506101f56101f03660046126d0565b610807565b60405161018c959493929190612728565b34801561021257600080fd5b5061017f610ac8565b34801561022757600080fd5b5061012a610236366004612782565b610b25565b61012a6102493660046127da565b610b9b565b34801561025a57600080fd5b5061017f61026936600461245b565b610d4d565b34801561027a57600080fd5b5061017f61028936600461245b565b610dba565b34801561029a57600080fd5b506102a3610e27565b60405161018c919061285b565b3480156102bc57600080fd5b5061012a6102cb366004612869565b610e36565b3480156102dc57600080fd5b5061012a6102eb3660046126d0565b610f0b565b3480156102fc57600080fd5b5061031061030b36600461245b565b610fd9565b60405161018c919061290c565b34801561032957600080fd5b5061012a610338366004612520565b611099565b61012a61034b3660046124bc565b61118a565b34801561035c57600080fd5b5061017f610b4081565b34801561037257600080fd5b5061012a610381366004612935565b61124a565b34801561039257600080fd5b5061017f6103a136600461245b565b6112de565b3480156103b257600080fd5b506102a3606360ff60981b0181565b6000610429606560008660068111156103dc576103dc6129a0565b60068111156103ed576103ed6129a0565b8152602080820192909252604090810160009081206001600160a01b038816825283528181206001600160401b0387168252909252902061134b565b905061043d61043784611397565b826113da565b826001600160a01b03167f9ccf10f668293516a0d1338249a1982941370c884ac59080376da8f1bf727dde85848460405161047a939291906129e4565b60405180910390a250505050565b346104f181606560008860068111156104a3576104a36129a0565b60068111156104b4576104b46129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611427565b610559826065600088600681111561050b5761050b6129a0565b600681111561051c5761051c6129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611444565b836001600160a01b03167f409cd1254366d822e7a1a581017102dbdfa9c24840e9d59965138006a9b6b423868585604051610596939291906129e4565b60405180910390a25050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105f65760405162461bcd60e51b81526004016105ed90612a46565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106286114bd565b6001600160a01b03161461064e5760405162461bcd60e51b81526004016105ed90612a8d565b610657816114d9565b604080516000808252602082019092526106739183919061156d565b50565b60006065600085600681111561068e5761068e6129a0565b600681111561069f5761069f6129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290205490505b9392505050565b6000606560008560068111156106f9576106f96129a0565b600681111561070a5761070a6129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038087168352935220600401541690509392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107965760405162461bcd60e51b81526004016105ed90612a46565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107c86114bd565b6001600160a01b0316146107ee5760405162461bcd60e51b81526004016105ed90612a8d565b6107f7826114d9565b6108038282600161156d565b5050565b6000806000806000606560008a6006811115610825576108256129a0565b6006811115610836576108366129a0565b8152602080820192909252604090810160009081206001600160a01b03808d1683529084528282206001600160401b038c1683528452828220908a16825260069081019093529081205491606591908c90811115610896576108966129a0565b60068111156108a7576108a76129a0565b8152602080820192909252604090810160009081206001600160a01b03808e1683529084528282206001600160401b038d1683528452828220908b16825260069081019093529081206001015491606591908d9081111561090a5761090a6129a0565b600681111561091b5761091b6129a0565b8152602080820192909252604090810160009081206001600160a01b03808f1683529084528282206001600160401b038e1683528452828220908c16825260069081019093529081206002015491606591908e9081111561097e5761097e6129a0565b600681111561098f5761098f6129a0565b815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160401b0316815260200190815260200160002060060160008a6001600160a01b03166001600160a01b0316815260200190815260200160002060030154606560008e6006811115610a1a57610a1a6129a0565b6006811115610a2b57610a2b6129a0565b815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160401b0316815260200190815260200160002060060160008b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160009054906101000a90046001600160401b031694509450945094509450945094509450945094565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b125760405162461bcd60e51b81526004016105ed90612af2565b5060008051602061322683398151915290565b6000816001811115610b3957610b396129a0565b03610b5f576000610b4b85858561164f565b9050610b5985858584611664565b50610b95565b6001816001811115610b7357610b736129a0565b03610b95576000610b8585858561171c565b9050610b9385858584611770565b505b50505050565b3481811015610bbc5760405162461bcd60e51b81526004016105ed90612b39565b610c248160656000896006811115610bd657610bd66129a0565b6006811115610be757610be76129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a168252909252902090611427565b610c8c8260656000896006811115610c3e57610c3e6129a0565b6006811115610c4f57610c4f6129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a168252909252902090611444565b610cf68383606560008a6006811115610ca757610ca76129a0565b6006811115610cb857610cb86129a0565b8152602080820192909252604090810160009081206001600160a01b038c16825283528181206001600160401b038b16825290925290209190611815565b826001600160a01b0316856001600160a01b03167f3872d0105f277400a4349cb96831a79079aa9e644a404f22492d16ccfda76b1b888786604051610d3d939291906129e4565b60405180910390a3505050505050565b600060656000856006811115610d6557610d656129a0565b6006811115610d7657610d766129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290206003015490509392505050565b600060656000856006811115610dd257610dd26129a0565b6006811115610de357610de36129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290206001015490509392505050565b6000610e316114bd565b905090565b606654604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610e6d9084903390600401612b49565b602060405180830381865afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612b77565b610eca5760405162461bcd60e51b81526004016105ed90612bc9565b5050606780546001600160a01b039485166001600160a01b031991821617909155606880549385169382169390931790925560698054919093169116179055565b6000610f758260656000886006811115610f2757610f276129a0565b6006811115610f3857610f386129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611932565b9050610f8361043783611397565b816001600160a01b0316846001600160a01b03167f6c0be515497374ca368522d4e81d9fe03076c933939c1fd6a11385e5c5b0f98f878685604051610fca939291906129e4565b60405180910390a35050505050565b606060656000856006811115610ff157610ff16129a0565b6006811115611002576110026129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825283528190206005018054825181850281018501909352808352919290919083018282801561108b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161106d575b505050505090509392505050565b600054610100900460ff16158080156110b95750600054600160ff909116105b806110da57506110c8306119e0565b1580156110da575060005460ff166001145b6110f65760405162461bcd60e51b81526004016105ed90612c24565b6000805460ff191660011790558015611119576000805461ff0019166101001790555b606680546001600160a01b0319166001600160a01b03841617905561113c6119ef565b8015610803576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061117e90600190612c48565b60405180910390a15050565b346111a581606560008860068111156104a3576104a36129a0565b61120d82606560008860068111156111bf576111bf6129a0565b60068111156111d0576111d06129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611a18565b836001600160a01b03167ff1978664b2832761807daf0ded155154e67a78ce72ffd418c03368b29cb690b0868585604051610596939291906129e4565b600081600281111561125e5761125e6129a0565b0361128657600061127186868686611a6d565b90506112808686868685611a83565b50610b93565b600181600281111561129a5761129a6129a0565b036112ae5760006112808686868685611b34565b60028160028111156112c2576112c26129a0565b03610b935760006112d68686868685611bf5565b505050505050565b6000606560008560068111156112f6576112f66129a0565b6006811115611307576113076129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290206002015490509392505050565b600181015460028201548254600092839290916113689190612c6c565b6113729190612c6c565b90508083600001600001600082825461138b9190612c6c565b90915550909392505050565b6040805160208101909152606081526040518060200160405280836040516020016113c29190612ca7565b60408051601f19818403018152919052905292915050565b81516040805160008082526020820190925290916113fe9183908190866000611c9e565b9050805160001461142257604051630e74990760e01b815260040160405180910390fd5b505050565b81548190839060009061143b908490612cc7565b90915550505050565b600282015460018301546114589083612cc7565b6114629190612cc7565b825410156114825760405162461bcd60e51b81526004016105ed90612d00565b808260000160010160008282546114999190612cc7565b90915550505060040180546001600160401b031916436001600160401b0316179055565b600080516020613226833981519152546001600160a01b031690565b606654604051632474521560e21b81526001600160a01b039091169060009082906391d14854906115109084903390600401612b49565b602060405180830381865afa15801561152d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115519190612b77565b6114225760405162461bcd60e51b81526004016105ed90612bc9565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115a05761142283611d9f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156115fa575060408051601f3d908101601f191682019092526115f791810190612d1b565b60015b6116165760405162461bcd60e51b81526004016105ed90612d87565b60008051602061322683398151915281146116435760405162461bcd60e51b81526004016105ed90612ddd565b50611422838383611df3565b600061165c8484846112de565b949350505050565b6116cc816065600087600681111561167e5761167e6129a0565b600681111561168f5761168f6129a0565b8152602080820192909252604090810160009081206001600160a01b038916825283528181206001600160401b0388168252909252902090611e18565b6116df610437606360ff60981b01611397565b826001600160a01b03167face2e7cd57fcab72c26e0619b66587ba03740fe156d60d70328f2c5e48406f0085848460405161047a939291906129e4565b600080846006811115611731576117316129a0565b03611747576117408383611e64565b90506106da565b600184600681111561175b5761175b6129a0565b03611768575060006106da565b5060006106da565b6117d8816065600087600681111561178a5761178a6129a0565b600681111561179b5761179b6129a0565b8152602080820192909252604090810160009081206001600160a01b038916825283528181206001600160401b0388168252909252902060020155565b826001600160a01b03167f0f3003e0f346f0c0389d24d73cffa6ab50447c7107ae5a2623d0024f1a416d4385848460405161047a939291906129e4565b6001600160a01b03821660009081526006840160205260408120600401546001600160401b0316900361187357600583018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0384161790555b60018301548111156118975760405162461bcd60e51b81526004016105ed90612b39565b6001600160a01b0382166000908152600684016020526040812080548392906118c1908490612cc7565b90915550506001600160a01b0382166000908152600684016020526040812060020180548392906118f3908490612cc7565b9091555050506001600160a01b031660009081526006919091016020526040902060040180546001600160401b031916436001600160401b0316179055565b6001600160a01b03811660009081526006830160205260408120600181015460028201549154839261196391612c6c565b61196d9190612c6c565b6001600160a01b038416600090815260068601602052604081208054929350839290919061199c908490612c6c565b90915550508354819085906000906119b5908490612c6c565b90915550506001840180548291906000906119d1908490612c6c565b90915550909150505b92915050565b6001600160a01b03163b151590565b600054610100900460ff16611a165760405162461bcd60e51b81526004016105ed90612e35565b565b60018201546002830154611a2c9083612cc7565b611a369190612cc7565b82541015611a565760405162461bcd60e51b81526004016105ed90612e6e565b808260000160020160008282546114999190612cc7565b6000611a7a8585856112de565b95945050505050565b611aed828260656000896006811115611a9e57611a9e6129a0565b6006811115611aaf57611aaf6129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a16825290925290209190612121565b816001600160a01b0316846001600160a01b03167f24a78bbda083574ecaadfe16fa5b79a48513a59663be00f6473b52c875a7dbd6878685604051610fca939291906129e4565b611bae828260656000896006811115611b4f57611b4f6129a0565b6006811115611b6057611b606129a0565b8152602080820192909252604090810160009081206001600160a01b038b811683529084528282206001600160401b038b168352845282822095168152600690940190915290912060020155565b816001600160a01b0316846001600160a01b03167f7ad3d7b39364868423c70c1aa9a4afd171bf006e0c427e6721c4f8ddbadf2aa8878685604051610fca939291906129e4565b611c5f828260656000896006811115611c1057611c106129a0565b6006811115611c2157611c216129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a16825290925290209190611815565b836001600160a01b03167f391a520487332e0bf31618bfe79add3870072ff9c1f471caae5708e6c6697b97868585856040516105969493929190612e7e565b6060600287511015611cc5578660405163370d875f60e01b81526004016105ed9190612f0b565b611cd66003607f60991b01846121a3565b6000806003607f60991b01888686611cef576000611cf2565b60015b8a8a8e604051602001611d0a96959493929190612f1c565b60408051601f1981840301815290829052611d2491612fa5565b600060405180830381855af49150503d8060008114611d5f576040519150601f19603f3d011682016040523d82523d6000602084013e611d64565b606091505b509150915081611d8757604051638a7db5bf60e01b815260040160405180910390fd5b611d90816121eb565b925050505b9695505050505050565b611da8816119e0565b611dc45760405162461bcd60e51b81526004016105ed90612ffb565b60008051602061322683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611dfc836122c4565b600082511180611e095750805b1561142257610b958383612304565b815481908390600090611e2c908490612c6c565b9091555050600282018054829190600090611e48908490612c6c565b909155505060038201805482919060009061143b908490612cc7565b6067546040516315b536bd60e11b8152600091829182916001600160a01b031690632b6a6d7a90611e99908790600401612566565b602060405180830381865afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190613016565b90506000611eea600087876106e1565b90506003826006811115611f0057611f006129a0565b1480611f4757506006826006811115611f1b57611f1b6129a0565b14158015611f475750611f31610b4060b4613037565b611f44906001600160401b038316612cc7565b43115b80611f715750611f5b610b4061016d613037565b611f6e906001600160401b038316612cc7565b43115b15611f81578293505050506119da565b6068546040516309447d3b60e31b81526001600160a01b0390911690634a23e9d890611fb4908890600090600401613084565b602060405180830381865afa158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff59190612b77565b15612072576068546040516305ce199d60e31b81526001600160a01b0390911690632e70cce89061202a908890600401612566565b602060405180830381865afa158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190612d1b565b92506120e6565b6069546040516304138a9d60e11b81526001600160a01b0390911690630827153a906120a2908890600401612566565b602060405180830381865afa1580156120bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e39190612d1b565b92505b60006120f460008888610676565b9050838110156121165760405162461bcd60e51b81526004016105ed906130d3565b509195945050505050565b6001600160a01b03821660009081526006840160205260408120805483929061214b908490612c6c565b90915550506001600160a01b03821660009081526006840160205260408120600201805483929061217d908490612c6c565b9091555050600183018054829190600090612199908490612c6c565b9091555050505050565b47818110156121c9578082604051634787a10360e11b81526004016105ed9291906130e3565b823f151580610b955760405163064d954b60e41b815260040160405180910390fd5b60606000806000848060200190518101906122069190613161565b919450925090506001600160401b0382166122405780511561223b57604051630e74990760e01b815260040160405180910390fd5b6122a3565b6001600160401b0382166051148061226157506001600160401b0382166071145b1561228857805160000361223b57604051630e74990760e01b815260040160405180910390fd5b8160405163f1f6bced60e01b81526004016105ed9190612566565b821561165c578260405163d4bb667160e01b81526004016105ed9190612549565b6122cd81611d9f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606106da8383604051806060016040528060278152602001613246602791396060600080856001600160a01b0316856040516123419190612fa5565b600060405180830381855af49150503d806000811461237c576040519150601f19603f3d011682016040523d82523d6000602084013e612381565b606091505b5091509150611d9586838387606083156123ca5782516000036123c3576123a7856119e0565b6123c35760405162461bcd60e51b81526004016105ed906131f5565b508161165c565b61165c83838151156123df5781518083602001fd5b8060405162461bcd60e51b81526004016105ed9190612f0b565b6007811061067357600080fd5b80356119da816123f9565b60006001600160a01b0382166119da565b61242b81612411565b811461067357600080fd5b80356119da81612422565b6001600160401b03811661242b565b80356119da81612441565b60008060006060848603121561247357612473600080fd5b600061247f8686612406565b935050602061249086828701612436565b92505060406124a186828701612450565b9150509250925092565b8061242b565b80356119da816124ab565b600080600080608085870312156124d5576124d5600080fd5b60006124e18787612406565b94505060206124f287828801612436565b935050604061250387828801612450565b9250506060612514878288016124b1565b91505092959194509250565b60006020828403121561253557612535600080fd5b600061165c8484612436565b805b82525050565b602081016119da8284612541565b6001600160401b038116612543565b602081016119da8284612557565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61259d82612574565b81018181106001600160401b03821117156125ba576125ba61257e565b6040525050565b60006125cc60405190565b90506125d88282612594565b919050565b60006001600160401b038211156125f6576125f661257e565b6125ff82612574565b60200192915050565b82818337506000910152565b6000612627612622846125dd565b6125c1565b90508281526020810184848401111561264257612642600080fd5b61264d848285612608565b509392505050565b600082601f83011261266957612669600080fd5b813561165c848260208601612614565b6000806040838503121561268f5761268f600080fd5b600061269b8585612436565b92505060208301356001600160401b038111156126ba576126ba600080fd5b6126c685828601612655565b9150509250929050565b600080600080608085870312156126e9576126e9600080fd5b60006126f58787612406565b945050602061270687828801612436565b935050604061271787828801612450565b925050606061251487828801612436565b60a081016127368288612541565b6127436020830187612541565b6127506040830186612541565b61275d6060830185612541565b611d956080830184612557565b6002811061067357600080fd5b80356119da8161276a565b6000806000806080858703121561279b5761279b600080fd5b60006127a78787612406565b94505060206127b887828801612436565b93505060406127c987828801612450565b925050606061251487828801612777565b600080600080600060a086880312156127f5576127f5600080fd5b60006128018888612406565b955050602061281288828901612436565b945050604061282388828901612450565b935050606061283488828901612436565b9250506080612845888289016124b1565b9150509295509295909350565b61254381612411565b602081016119da8284612852565b60008060006060848603121561288157612881600080fd5b600061288d8686612436565b935050602061289e86828701612436565b92505060406124a186828701612436565b60006128bb8383612852565b505060200190565b60006128cd825190565b80845260209384019383018060005b838110156129015781516128f088826128af565b9750602083019250506001016128dc565b509495945050505050565b602080825281016106da81846128c3565b6003811061067357600080fd5b80356119da8161291d565b600080600080600060a0868803121561295057612950600080fd5b600061295c8888612406565b955050602061296d88828901612436565b945050604061297e88828901612450565b935050606061298f88828901612436565b92505060806128458882890161292a565b634e487b7160e01b600052602160045260246000fd5b60078110610673576106736129a0565b806125d8816129b6565b60006119da826129c6565b612543816129d0565b606081016129f282866129db565b6129ff6020830185612557565b61165c6040830184612541565b602c815260006020820160008051602061320683398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016119da81612a0c565b602c815260006020820160008051602061320683398151915281526b6163746976652070726f787960a01b60208201529150612a3f565b602080825281016119da81612a56565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612a3f565b602080825281016119da81612a9d565b601d81526000602082017f457863656564732074686520616d6f756e74206f66207061796d656e74000000815291505b5060200190565b602080825281016119da81612b02565b60408101612b578285612541565b6106da6020830184612852565b80151561242b565b80516119da81612b64565b600060208284031215612b8c57612b8c600080fd5b600061165c8484612b6c565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612b32565b602080825281016119da81612b98565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612a3f565b602080825281016119da81612bd9565b600060ff82166119da565b61254381612c34565b602081016119da8284612c3f565b634e487b7160e01b600052601160045260246000fd5b818103818111156119da576119da612c56565b60006119da8260601b90565b60006119da82612c7f565b612543612ca282612411565b612c8b565b61020560f11b81526002016000612cbe8284612c96565b50601401919050565b808201808211156119da576119da612c56565b600f81526000602082016e1c185e5b595b9d080f881d1bdd185b608a1b81529150612b32565b602080825281016119da81612cda565b80516119da816124ab565b600060208284031215612d3057612d30600080fd5b600061165c8484612d10565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612a3f565b602080825281016119da81612d3c565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612a3f565b602080825281016119da81612d97565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612a3f565b602080825281016119da81612ded565b601281526000602082017118dbdb1b185d195c985b080f881d1bdd185b60721b81529150612b32565b602080825281016119da81612e45565b60808101612e8c82876129db565b612e996020830186612557565b612ea66040830185612852565b611a7a6060830184612541565b60005b83811015612ece578181015183820152602001612eb6565b50506000910152565b6000612ee1825190565b808452602084019350612ef8818560208601612eb3565b612f0181612574565b9093019392505050565b602080825281016106da8184612ed7565b60c08101612f2a8289612557565b612f376020830188612541565b612f446040830187612557565b612f516060830186612557565b8181036080830152612f638185612ed7565b905081810360a0830152612f778184612ed7565b98975050505050505050565b6000612f8d825190565b612f9b818560208601612eb3565b9290920192915050565b60006106da8284612f83565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612a3f565b602080825281016119da81612fb1565b80516119da816123f9565b60006020828403121561302b5761302b600080fd5b600061165c848461300b565b81810280821583820485141761304f5761304f612c56565b5092915050565b60028110610673576106736129a0565b806125d881613056565b60006119da82613066565b61254381613070565b604081016130928285612557565b6106da602083018461307b565b601d81526000602082017f496e73756666696369656e7420636f6c6c61746572616c2066756e647300000081529150612b32565b602080825281016119da8161309f565b604081016130f18285612541565b6106da6020830184612541565b80516119da81612441565b6000613117612622846125dd565b90508281526020810184848401111561313257613132600080fd5b61264d848285612eb3565b600082601f83011261315157613151600080fd5b815161165c848260208601613109565b60008060006060848603121561317957613179600080fd5b60006131858686612d10565b9350506020613196868287016130fe565b92505060408401516001600160401b038111156131b5576131b5600080fd5b6124a18682870161313d565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612b32565b602080825281016119da816131c156fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f203bf41a5d346bbc8c843a4b8ee7f1257fed6e92d5d30dd2e154e2cc9b4b11b64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101055760003560e01c80631054f8371461010a5780631a1015d81461012c5780633659cfe61461013f57806341279ee21461015f5780634b5af90a146101955780634f1ef286146101c257806351166ac8146101d557806352d1902d1461020657806364000be01461021b5780636e4b15611461023b5780637916b3971461024e578063938a6b0d1461026e578063aaf10f421461028e578063b52d326c146102b0578063c190abc4146102d0578063c23732b6146102f0578063c4d66de81461031d578063ce37bde71461033d578063ebc5397714610350578063ef8e926e14610366578063f39b9c5114610386578063fccc2813146103a6575b600080fd5b34801561011657600080fd5b5061012a61012536600461245b565b6103c1565b005b61012a61013a3660046124bc565b610488565b34801561014b57600080fd5b5061012a61015a366004612520565b6105a5565b34801561016b57600080fd5b5061017f61017a36600461245b565b610676565b60405161018c9190612549565b60405180910390f35b3480156101a157600080fd5b506101b56101b036600461245b565b6106e1565b60405161018c9190612566565b61012a6101d0366004612679565b61074e565b3480156101e157600080fd5b506101f56101f03660046126d0565b610807565b60405161018c959493929190612728565b34801561021257600080fd5b5061017f610ac8565b34801561022757600080fd5b5061012a610236366004612782565b610b25565b61012a6102493660046127da565b610b9b565b34801561025a57600080fd5b5061017f61026936600461245b565b610d4d565b34801561027a57600080fd5b5061017f61028936600461245b565b610dba565b34801561029a57600080fd5b506102a3610e27565b60405161018c919061285b565b3480156102bc57600080fd5b5061012a6102cb366004612869565b610e36565b3480156102dc57600080fd5b5061012a6102eb3660046126d0565b610f0b565b3480156102fc57600080fd5b5061031061030b36600461245b565b610fd9565b60405161018c919061290c565b34801561032957600080fd5b5061012a610338366004612520565b611099565b61012a61034b3660046124bc565b61118a565b34801561035c57600080fd5b5061017f610b4081565b34801561037257600080fd5b5061012a610381366004612935565b61124a565b34801561039257600080fd5b5061017f6103a136600461245b565b6112de565b3480156103b257600080fd5b506102a3606360ff60981b0181565b6000610429606560008660068111156103dc576103dc6129a0565b60068111156103ed576103ed6129a0565b8152602080820192909252604090810160009081206001600160a01b038816825283528181206001600160401b0387168252909252902061134b565b905061043d61043784611397565b826113da565b826001600160a01b03167f9ccf10f668293516a0d1338249a1982941370c884ac59080376da8f1bf727dde85848460405161047a939291906129e4565b60405180910390a250505050565b346104f181606560008860068111156104a3576104a36129a0565b60068111156104b4576104b46129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611427565b610559826065600088600681111561050b5761050b6129a0565b600681111561051c5761051c6129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611444565b836001600160a01b03167f409cd1254366d822e7a1a581017102dbdfa9c24840e9d59965138006a9b6b423868585604051610596939291906129e4565b60405180910390a25050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105f65760405162461bcd60e51b81526004016105ed90612a46565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106286114bd565b6001600160a01b03161461064e5760405162461bcd60e51b81526004016105ed90612a8d565b610657816114d9565b604080516000808252602082019092526106739183919061156d565b50565b60006065600085600681111561068e5761068e6129a0565b600681111561069f5761069f6129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290205490505b9392505050565b6000606560008560068111156106f9576106f96129a0565b600681111561070a5761070a6129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038087168352935220600401541690509392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107965760405162461bcd60e51b81526004016105ed90612a46565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107c86114bd565b6001600160a01b0316146107ee5760405162461bcd60e51b81526004016105ed90612a8d565b6107f7826114d9565b6108038282600161156d565b5050565b6000806000806000606560008a6006811115610825576108256129a0565b6006811115610836576108366129a0565b8152602080820192909252604090810160009081206001600160a01b03808d1683529084528282206001600160401b038c1683528452828220908a16825260069081019093529081205491606591908c90811115610896576108966129a0565b60068111156108a7576108a76129a0565b8152602080820192909252604090810160009081206001600160a01b03808e1683529084528282206001600160401b038d1683528452828220908b16825260069081019093529081206001015491606591908d9081111561090a5761090a6129a0565b600681111561091b5761091b6129a0565b8152602080820192909252604090810160009081206001600160a01b03808f1683529084528282206001600160401b038e1683528452828220908c16825260069081019093529081206002015491606591908e9081111561097e5761097e6129a0565b600681111561098f5761098f6129a0565b815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160401b0316815260200190815260200160002060060160008a6001600160a01b03166001600160a01b0316815260200190815260200160002060030154606560008e6006811115610a1a57610a1a6129a0565b6006811115610a2b57610a2b6129a0565b815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160401b0316815260200190815260200160002060060160008b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160009054906101000a90046001600160401b031694509450945094509450945094509450945094565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b125760405162461bcd60e51b81526004016105ed90612af2565b5060008051602061322683398151915290565b6000816001811115610b3957610b396129a0565b03610b5f576000610b4b85858561164f565b9050610b5985858584611664565b50610b95565b6001816001811115610b7357610b736129a0565b03610b95576000610b8585858561171c565b9050610b9385858584611770565b505b50505050565b3481811015610bbc5760405162461bcd60e51b81526004016105ed90612b39565b610c248160656000896006811115610bd657610bd66129a0565b6006811115610be757610be76129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a168252909252902090611427565b610c8c8260656000896006811115610c3e57610c3e6129a0565b6006811115610c4f57610c4f6129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a168252909252902090611444565b610cf68383606560008a6006811115610ca757610ca76129a0565b6006811115610cb857610cb86129a0565b8152602080820192909252604090810160009081206001600160a01b038c16825283528181206001600160401b038b16825290925290209190611815565b826001600160a01b0316856001600160a01b03167f3872d0105f277400a4349cb96831a79079aa9e644a404f22492d16ccfda76b1b888786604051610d3d939291906129e4565b60405180910390a3505050505050565b600060656000856006811115610d6557610d656129a0565b6006811115610d7657610d766129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290206003015490509392505050565b600060656000856006811115610dd257610dd26129a0565b6006811115610de357610de36129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290206001015490509392505050565b6000610e316114bd565b905090565b606654604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610e6d9084903390600401612b49565b602060405180830381865afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612b77565b610eca5760405162461bcd60e51b81526004016105ed90612bc9565b5050606780546001600160a01b039485166001600160a01b031991821617909155606880549385169382169390931790925560698054919093169116179055565b6000610f758260656000886006811115610f2757610f276129a0565b6006811115610f3857610f386129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611932565b9050610f8361043783611397565b816001600160a01b0316846001600160a01b03167f6c0be515497374ca368522d4e81d9fe03076c933939c1fd6a11385e5c5b0f98f878685604051610fca939291906129e4565b60405180910390a35050505050565b606060656000856006811115610ff157610ff16129a0565b6006811115611002576110026129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825283528190206005018054825181850281018501909352808352919290919083018282801561108b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161106d575b505050505090509392505050565b600054610100900460ff16158080156110b95750600054600160ff909116105b806110da57506110c8306119e0565b1580156110da575060005460ff166001145b6110f65760405162461bcd60e51b81526004016105ed90612c24565b6000805460ff191660011790558015611119576000805461ff0019166101001790555b606680546001600160a01b0319166001600160a01b03841617905561113c6119ef565b8015610803576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061117e90600190612c48565b60405180910390a15050565b346111a581606560008860068111156104a3576104a36129a0565b61120d82606560008860068111156111bf576111bf6129a0565b60068111156111d0576111d06129a0565b8152602080820192909252604090810160009081206001600160a01b038a16825283528181206001600160401b0389168252909252902090611a18565b836001600160a01b03167ff1978664b2832761807daf0ded155154e67a78ce72ffd418c03368b29cb690b0868585604051610596939291906129e4565b600081600281111561125e5761125e6129a0565b0361128657600061127186868686611a6d565b90506112808686868685611a83565b50610b93565b600181600281111561129a5761129a6129a0565b036112ae5760006112808686868685611b34565b60028160028111156112c2576112c26129a0565b03610b935760006112d68686868685611bf5565b505050505050565b6000606560008560068111156112f6576112f66129a0565b6006811115611307576113076129a0565b8152602080820192909252604090810160009081206001600160a01b038716825283528181206001600160401b038616825290925290206002015490509392505050565b600181015460028201548254600092839290916113689190612c6c565b6113729190612c6c565b90508083600001600001600082825461138b9190612c6c565b90915550909392505050565b6040805160208101909152606081526040518060200160405280836040516020016113c29190612ca7565b60408051601f19818403018152919052905292915050565b81516040805160008082526020820190925290916113fe9183908190866000611c9e565b9050805160001461142257604051630e74990760e01b815260040160405180910390fd5b505050565b81548190839060009061143b908490612cc7565b90915550505050565b600282015460018301546114589083612cc7565b6114629190612cc7565b825410156114825760405162461bcd60e51b81526004016105ed90612d00565b808260000160010160008282546114999190612cc7565b90915550505060040180546001600160401b031916436001600160401b0316179055565b600080516020613226833981519152546001600160a01b031690565b606654604051632474521560e21b81526001600160a01b039091169060009082906391d14854906115109084903390600401612b49565b602060405180830381865afa15801561152d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115519190612b77565b6114225760405162461bcd60e51b81526004016105ed90612bc9565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115a05761142283611d9f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156115fa575060408051601f3d908101601f191682019092526115f791810190612d1b565b60015b6116165760405162461bcd60e51b81526004016105ed90612d87565b60008051602061322683398151915281146116435760405162461bcd60e51b81526004016105ed90612ddd565b50611422838383611df3565b600061165c8484846112de565b949350505050565b6116cc816065600087600681111561167e5761167e6129a0565b600681111561168f5761168f6129a0565b8152602080820192909252604090810160009081206001600160a01b038916825283528181206001600160401b0388168252909252902090611e18565b6116df610437606360ff60981b01611397565b826001600160a01b03167face2e7cd57fcab72c26e0619b66587ba03740fe156d60d70328f2c5e48406f0085848460405161047a939291906129e4565b600080846006811115611731576117316129a0565b03611747576117408383611e64565b90506106da565b600184600681111561175b5761175b6129a0565b03611768575060006106da565b5060006106da565b6117d8816065600087600681111561178a5761178a6129a0565b600681111561179b5761179b6129a0565b8152602080820192909252604090810160009081206001600160a01b038916825283528181206001600160401b0388168252909252902060020155565b826001600160a01b03167f0f3003e0f346f0c0389d24d73cffa6ab50447c7107ae5a2623d0024f1a416d4385848460405161047a939291906129e4565b6001600160a01b03821660009081526006840160205260408120600401546001600160401b0316900361187357600583018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0384161790555b60018301548111156118975760405162461bcd60e51b81526004016105ed90612b39565b6001600160a01b0382166000908152600684016020526040812080548392906118c1908490612cc7565b90915550506001600160a01b0382166000908152600684016020526040812060020180548392906118f3908490612cc7565b9091555050506001600160a01b031660009081526006919091016020526040902060040180546001600160401b031916436001600160401b0316179055565b6001600160a01b03811660009081526006830160205260408120600181015460028201549154839261196391612c6c565b61196d9190612c6c565b6001600160a01b038416600090815260068601602052604081208054929350839290919061199c908490612c6c565b90915550508354819085906000906119b5908490612c6c565b90915550506001840180548291906000906119d1908490612c6c565b90915550909150505b92915050565b6001600160a01b03163b151590565b600054610100900460ff16611a165760405162461bcd60e51b81526004016105ed90612e35565b565b60018201546002830154611a2c9083612cc7565b611a369190612cc7565b82541015611a565760405162461bcd60e51b81526004016105ed90612e6e565b808260000160020160008282546114999190612cc7565b6000611a7a8585856112de565b95945050505050565b611aed828260656000896006811115611a9e57611a9e6129a0565b6006811115611aaf57611aaf6129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a16825290925290209190612121565b816001600160a01b0316846001600160a01b03167f24a78bbda083574ecaadfe16fa5b79a48513a59663be00f6473b52c875a7dbd6878685604051610fca939291906129e4565b611bae828260656000896006811115611b4f57611b4f6129a0565b6006811115611b6057611b606129a0565b8152602080820192909252604090810160009081206001600160a01b038b811683529084528282206001600160401b038b168352845282822095168152600690940190915290912060020155565b816001600160a01b0316846001600160a01b03167f7ad3d7b39364868423c70c1aa9a4afd171bf006e0c427e6721c4f8ddbadf2aa8878685604051610fca939291906129e4565b611c5f828260656000896006811115611c1057611c106129a0565b6006811115611c2157611c216129a0565b8152602080820192909252604090810160009081206001600160a01b038b16825283528181206001600160401b038a16825290925290209190611815565b836001600160a01b03167f391a520487332e0bf31618bfe79add3870072ff9c1f471caae5708e6c6697b97868585856040516105969493929190612e7e565b6060600287511015611cc5578660405163370d875f60e01b81526004016105ed9190612f0b565b611cd66003607f60991b01846121a3565b6000806003607f60991b01888686611cef576000611cf2565b60015b8a8a8e604051602001611d0a96959493929190612f1c565b60408051601f1981840301815290829052611d2491612fa5565b600060405180830381855af49150503d8060008114611d5f576040519150601f19603f3d011682016040523d82523d6000602084013e611d64565b606091505b509150915081611d8757604051638a7db5bf60e01b815260040160405180910390fd5b611d90816121eb565b925050505b9695505050505050565b611da8816119e0565b611dc45760405162461bcd60e51b81526004016105ed90612ffb565b60008051602061322683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611dfc836122c4565b600082511180611e095750805b1561142257610b958383612304565b815481908390600090611e2c908490612c6c565b9091555050600282018054829190600090611e48908490612c6c565b909155505060038201805482919060009061143b908490612cc7565b6067546040516315b536bd60e11b8152600091829182916001600160a01b031690632b6a6d7a90611e99908790600401612566565b602060405180830381865afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190613016565b90506000611eea600087876106e1565b90506003826006811115611f0057611f006129a0565b1480611f4757506006826006811115611f1b57611f1b6129a0565b14158015611f475750611f31610b4060b4613037565b611f44906001600160401b038316612cc7565b43115b80611f715750611f5b610b4061016d613037565b611f6e906001600160401b038316612cc7565b43115b15611f81578293505050506119da565b6068546040516309447d3b60e31b81526001600160a01b0390911690634a23e9d890611fb4908890600090600401613084565b602060405180830381865afa158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff59190612b77565b15612072576068546040516305ce199d60e31b81526001600160a01b0390911690632e70cce89061202a908890600401612566565b602060405180830381865afa158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190612d1b565b92506120e6565b6069546040516304138a9d60e11b81526001600160a01b0390911690630827153a906120a2908890600401612566565b602060405180830381865afa1580156120bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e39190612d1b565b92505b60006120f460008888610676565b9050838110156121165760405162461bcd60e51b81526004016105ed906130d3565b509195945050505050565b6001600160a01b03821660009081526006840160205260408120805483929061214b908490612c6c565b90915550506001600160a01b03821660009081526006840160205260408120600201805483929061217d908490612c6c565b9091555050600183018054829190600090612199908490612c6c565b9091555050505050565b47818110156121c9578082604051634787a10360e11b81526004016105ed9291906130e3565b823f151580610b955760405163064d954b60e41b815260040160405180910390fd5b60606000806000848060200190518101906122069190613161565b919450925090506001600160401b0382166122405780511561223b57604051630e74990760e01b815260040160405180910390fd5b6122a3565b6001600160401b0382166051148061226157506001600160401b0382166071145b1561228857805160000361223b57604051630e74990760e01b815260040160405180910390fd5b8160405163f1f6bced60e01b81526004016105ed9190612566565b821561165c578260405163d4bb667160e01b81526004016105ed9190612549565b6122cd81611d9f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606106da8383604051806060016040528060278152602001613246602791396060600080856001600160a01b0316856040516123419190612fa5565b600060405180830381855af49150503d806000811461237c576040519150601f19603f3d011682016040523d82523d6000602084013e612381565b606091505b5091509150611d9586838387606083156123ca5782516000036123c3576123a7856119e0565b6123c35760405162461bcd60e51b81526004016105ed906131f5565b508161165c565b61165c83838151156123df5781518083602001fd5b8060405162461bcd60e51b81526004016105ed9190612f0b565b6007811061067357600080fd5b80356119da816123f9565b60006001600160a01b0382166119da565b61242b81612411565b811461067357600080fd5b80356119da81612422565b6001600160401b03811661242b565b80356119da81612441565b60008060006060848603121561247357612473600080fd5b600061247f8686612406565b935050602061249086828701612436565b92505060406124a186828701612450565b9150509250925092565b8061242b565b80356119da816124ab565b600080600080608085870312156124d5576124d5600080fd5b60006124e18787612406565b94505060206124f287828801612436565b935050604061250387828801612450565b9250506060612514878288016124b1565b91505092959194509250565b60006020828403121561253557612535600080fd5b600061165c8484612436565b805b82525050565b602081016119da8284612541565b6001600160401b038116612543565b602081016119da8284612557565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61259d82612574565b81018181106001600160401b03821117156125ba576125ba61257e565b6040525050565b60006125cc60405190565b90506125d88282612594565b919050565b60006001600160401b038211156125f6576125f661257e565b6125ff82612574565b60200192915050565b82818337506000910152565b6000612627612622846125dd565b6125c1565b90508281526020810184848401111561264257612642600080fd5b61264d848285612608565b509392505050565b600082601f83011261266957612669600080fd5b813561165c848260208601612614565b6000806040838503121561268f5761268f600080fd5b600061269b8585612436565b92505060208301356001600160401b038111156126ba576126ba600080fd5b6126c685828601612655565b9150509250929050565b600080600080608085870312156126e9576126e9600080fd5b60006126f58787612406565b945050602061270687828801612436565b935050604061271787828801612450565b925050606061251487828801612436565b60a081016127368288612541565b6127436020830187612541565b6127506040830186612541565b61275d6060830185612541565b611d956080830184612557565b6002811061067357600080fd5b80356119da8161276a565b6000806000806080858703121561279b5761279b600080fd5b60006127a78787612406565b94505060206127b887828801612436565b93505060406127c987828801612450565b925050606061251487828801612777565b600080600080600060a086880312156127f5576127f5600080fd5b60006128018888612406565b955050602061281288828901612436565b945050604061282388828901612450565b935050606061283488828901612436565b9250506080612845888289016124b1565b9150509295509295909350565b61254381612411565b602081016119da8284612852565b60008060006060848603121561288157612881600080fd5b600061288d8686612436565b935050602061289e86828701612436565b92505060406124a186828701612436565b60006128bb8383612852565b505060200190565b60006128cd825190565b80845260209384019383018060005b838110156129015781516128f088826128af565b9750602083019250506001016128dc565b509495945050505050565b602080825281016106da81846128c3565b6003811061067357600080fd5b80356119da8161291d565b600080600080600060a0868803121561295057612950600080fd5b600061295c8888612406565b955050602061296d88828901612436565b945050604061297e88828901612450565b935050606061298f88828901612436565b92505060806128458882890161292a565b634e487b7160e01b600052602160045260246000fd5b60078110610673576106736129a0565b806125d8816129b6565b60006119da826129c6565b612543816129d0565b606081016129f282866129db565b6129ff6020830185612557565b61165c6040830184612541565b602c815260006020820160008051602061320683398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016119da81612a0c565b602c815260006020820160008051602061320683398151915281526b6163746976652070726f787960a01b60208201529150612a3f565b602080825281016119da81612a56565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612a3f565b602080825281016119da81612a9d565b601d81526000602082017f457863656564732074686520616d6f756e74206f66207061796d656e74000000815291505b5060200190565b602080825281016119da81612b02565b60408101612b578285612541565b6106da6020830184612852565b80151561242b565b80516119da81612b64565b600060208284031215612b8c57612b8c600080fd5b600061165c8484612b6c565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612b32565b602080825281016119da81612b98565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612a3f565b602080825281016119da81612bd9565b600060ff82166119da565b61254381612c34565b602081016119da8284612c3f565b634e487b7160e01b600052601160045260246000fd5b818103818111156119da576119da612c56565b60006119da8260601b90565b60006119da82612c7f565b612543612ca282612411565b612c8b565b61020560f11b81526002016000612cbe8284612c96565b50601401919050565b808201808211156119da576119da612c56565b600f81526000602082016e1c185e5b595b9d080f881d1bdd185b608a1b81529150612b32565b602080825281016119da81612cda565b80516119da816124ab565b600060208284031215612d3057612d30600080fd5b600061165c8484612d10565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612a3f565b602080825281016119da81612d3c565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612a3f565b602080825281016119da81612d97565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612a3f565b602080825281016119da81612ded565b601281526000602082017118dbdb1b185d195c985b080f881d1bdd185b60721b81529150612b32565b602080825281016119da81612e45565b60808101612e8c82876129db565b612e996020830186612557565b612ea66040830185612852565b611a7a6060830184612541565b60005b83811015612ece578181015183820152602001612eb6565b50506000910152565b6000612ee1825190565b808452602084019350612ef8818560208601612eb3565b612f0181612574565b9093019392505050565b602080825281016106da8184612ed7565b60c08101612f2a8289612557565b612f376020830188612541565b612f446040830187612557565b612f516060830186612557565b8181036080830152612f638185612ed7565b905081810360a0830152612f778184612ed7565b98975050505050505050565b6000612f8d825190565b612f9b818560208601612eb3565b9290920192915050565b60006106da8284612f83565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612a3f565b602080825281016119da81612fb1565b80516119da816123f9565b60006020828403121561302b5761302b600080fd5b600061165c848461300b565b81810280821583820485141761304f5761304f612c56565b5092915050565b60028110610673576106736129a0565b806125d881613056565b60006119da82613066565b61254381613070565b604081016130928285612557565b6106da602083018461307b565b601d81526000602082017f496e73756666696369656e7420636f6c6c61746572616c2066756e647300000081529150612b32565b602080825281016119da8161309f565b604081016130f18285612541565b6106da6020830184612541565b80516119da81612441565b6000613117612622846125dd565b90508281526020810184848401111561313257613132600080fd5b61264d848285612eb3565b600082601f83011261315157613151600080fd5b815161165c848260208601613109565b60008060006060848603121561317957613179600080fd5b60006131858686612d10565b9350506020613196868287016130fe565b92505060408401516001600160401b038111156131b5576131b5600080fd5b6124a18682870161313d565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612b32565b602080825281016119da816131c156fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f203bf41a5d346bbc8c843a4b8ee7f1257fed6e92d5d30dd2e154e2cc9b4b11b64736f6c63430008150033",
  "devdoc": {
    "details": "Base escrow contract, holds funds designated for a payee until they withdraw them.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Burn(uint8,address,uint64,uint256)": {
        "details": "This function allows report the burn event.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "Collateral(uint8,address,uint64,uint256)": {
        "details": "This function allows report the collateral event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PaymentCollateral(uint8,address,uint64,uint256)": {
        "details": "This function allows report the payment event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "PaymentRefund(uint8,address,uint64,address,uint256)": {
        "details": "This function allows report the payment refund event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "PaymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)": {
        "details": "This function allows report the payment event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "PaymentWithdrawn(uint8,address,uint64,address,uint256)": {
        "details": "This function allows report the payment withdrawn event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "UpdateCollateral(uint8,address,uint64,uint256)": {
        "details": "This function allows report the update collateral event of funds.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "UpdatePaymentBeneficiary(uint8,address,uint64,address,uint256)": {
        "details": "This function allows report the payment collateral event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The payment funds.",
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "UpdatePaymentCollateral(uint8,address,uint64,address,uint256)": {
        "details": "This function allows report the payment collateral event of a specific amount in attoFIL.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      },
      "Withdrawn(uint8,address,uint64,uint256)": {
        "details": "This function allows report the withdrawal event of funds.",
        "params": {
          "_attoFILAmount": "The amount of attoFIL.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "collateral(uint8,address,uint64,uint256)": {
        "details": "Records the sent amount as credit for future withdrawals. Note Called by the payer to store the sent amount as credit to be pulled. Funds sent in this way are stored in an intermediate {Escrow} contract, so there is no danger of them being spent before withdrawal.",
        "params": {
          "_amount": "The collateral funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "emitCollateralEvent(uint8,address,uint64,uint8)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "emitPaymentEvent(uint8,address,uint64,address,uint8)": {
        "params": {
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getBeneficiariesList(uint8,address,uint64)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getBeneficiaryFund(uint8,address,uint64,address)": {
        "params": {
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getOwnerBurned(uint8,address,uint64)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getOwnerCollateral(uint8,address,uint64)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getOwnerCreatedBlockNumber(uint8,address,uint64)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getOwnerLock(uint8,address,uint64)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "getOwnerTotal(uint8,address,uint64)": {
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "paymentCollateral(uint8,address,uint64,uint256)": {
        "details": "Records the sent amount as credit for future payment withdraw. Note Called by the payer to store the sent amount as credit to be pulled. Funds sent in this way are stored in an intermediate {Escrow} contract, so there is no danger of them being spent before withdrawal.",
        "params": {
          "_amount": "The collateral funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "paymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)": {
        "details": "Records the sent amount as credit for future payment withdraw. Note Called by the payer to store the sent amount as credit to be pulled. Funds sent in this way are stored in an intermediate {Escrow} contract, so there is no danger of them being spent before withdrawal.",
        "params": {
          "_amount": "The collateral funds.",
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "paymentWithdraw(uint8,address,uint64,address)": {
        "params": {
          "_beneficiary": "The beneficiary address for the payment credited funds.",
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "setDependencies(address,address,address)": {
        "details": "After the contract is deployed, this function needs to be called manually!"
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint8,address,uint64)": {
        "details": "This function allows the owner to initiate a withdrawal of authorized funds.",
        "params": {
          "_id": "The business id associated with the credited funds.",
          "_owner": "The destination address for the credited funds.",
          "_type": "The Escrow type for the credited funds."
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Escrow",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActorError(int256)": [
        {
          "notice": "the called actor returned an error as part of its expected behaviour"
        }
      ],
      "ActorNotFound()": [
        {
          "notice": "the actor is not found"
        }
      ],
      "FailToCallActor()": [
        {
          "notice": "an error happened trying to call the actor"
        }
      ],
      "InvalidAddress(bytes)": [
        {
          "notice": "the provided address is not valid"
        }
      ],
      "InvalidCodec(uint64)": [
        {
          "notice": "the codec received is not valid"
        }
      ],
      "InvalidResponseLength()": [
        {
          "notice": "the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none."
        }
      ],
      "NotEnoughBalance(uint256,uint256)": [
        {
          "notice": "the smart contract has no enough balance to transfer"
        }
      ]
    },
    "events": {
      "Burn(uint8,address,uint64,uint256)": {
        "notice": "Report a burn event."
      },
      "Collateral(uint8,address,uint64,uint256)": {
        "notice": "Report a collateral event."
      },
      "PaymentCollateral(uint8,address,uint64,uint256)": {
        "notice": "Report a payment event."
      },
      "PaymentRefund(uint8,address,uint64,address,uint256)": {
        "notice": "Report a PaymentRefund event."
      },
      "PaymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)": {
        "notice": "Report a single beneficiary payment event."
      },
      "PaymentWithdrawn(uint8,address,uint64,address,uint256)": {
        "notice": "Report a PaymentWithdrawn event."
      },
      "UpdateCollateral(uint8,address,uint64,uint256)": {
        "notice": "Report a update collateral event."
      },
      "UpdatePaymentBeneficiary(uint8,address,uint64,address,uint256)": {
        "notice": "Report a UpdatePaymentBeneficiaries."
      },
      "UpdatePaymentCollateral(uint8,address,uint64,address,uint256)": {
        "notice": "Report a UpdatePaymentCollateral made by a _beneficiary."
      },
      "Withdrawn(uint8,address,uint64,uint256)": {
        "notice": "Report a withdrawal event."
      }
    },
    "kind": "user",
    "methods": {
      "collateral(uint8,address,uint64,uint256)": {
        "notice": "Emits a {Collateral} event upon successful credit recording."
      },
      "emitCollateralEvent(uint8,address,uint64,uint8)": {
        "notice": "Post an event for collateral type."
      },
      "emitPaymentEvent(uint8,address,uint64,address,uint8)": {
        "notice": "Post an event for payment type."
      },
      "getBeneficiariesList(uint8,address,uint64)": {
        "notice": "Get beneficiariesList."
      },
      "getBeneficiaryFund(uint8,address,uint64,address)": {
        "notice": "Get beneficiary fund."
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getOwnerBurned(uint8,address,uint64)": {
        "notice": "Get owner burned funds."
      },
      "getOwnerCollateral(uint8,address,uint64)": {
        "notice": "Get owner collateral funds."
      },
      "getOwnerCreatedBlockNumber(uint8,address,uint64)": {
        "notice": "Get owner created block number."
      },
      "getOwnerLock(uint8,address,uint64)": {
        "notice": "Get owner lock funds."
      },
      "getOwnerTotal(uint8,address,uint64)": {
        "notice": "Get owner total funds."
      },
      "initialize(address)": {
        "notice": "Initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "paymentCollateral(uint8,address,uint64,uint256)": {
        "notice": "Emits a {PaymentCollateral} event upon successful credit recording."
      },
      "paymentSingleBeneficiaryCollateral(uint8,address,uint64,address,uint256)": {
        "notice": "Emits a {PaymentSingleBeneficiaryCollateral} event upon successful credit recording."
      },
      "paymentWithdraw(uint8,address,uint64,address)": {
        "notice": "Payment withdraw funds authorized for an address.Emits a {PaymentWithdrawn} event upon successful credit recording."
      },
      "setDependencies(address,address,address)": {
        "notice": "Set dependencies function to initialize the depend contract."
      },
      "withdraw(uint8,address,uint64)": {
        "notice": "Withdraw funds authorized for an address.Emits a {Withdrawn} event upon successful withdrawal."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18189,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "escrowAccount",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_enum(Type)35196,t_mapping(t_address,t_mapping(t_uint256,t_struct(Escrow)35230_storage)))"
      },
      {
        "astId": 18192,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "roles",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IRoles)20939"
      },
      {
        "astId": 18195,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "datasets",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IDatasets)21161"
      },
      {
        "astId": 18198,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "datasetsProof",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IDatasetsProof)21426"
      },
      {
        "astId": 18201,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "datasetsRequirement",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IDatasetsRequirement)21497"
      },
      {
        "astId": 18215,
        "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDatasets)21161": {
        "encoding": "inplace",
        "label": "contract IDatasets",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasetsProof)21426": {
        "encoding": "inplace",
        "label": "contract IDatasetsProof",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasetsRequirement)21497": {
        "encoding": "inplace",
        "label": "contract IDatasetsRequirement",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)20939": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_enum(Type)35196": {
        "encoding": "inplace",
        "label": "enum EscrowType.Type",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Escrow)35230_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct EscrowType.Escrow))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Escrow)35230_storage)"
      },
      "t_mapping(t_address,t_struct(Fund)35217_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EscrowType.Fund)",
        "numberOfBytes": "32",
        "value": "t_struct(Fund)35217_storage"
      },
      "t_mapping(t_enum(Type)35196,t_mapping(t_address,t_mapping(t_uint256,t_struct(Escrow)35230_storage)))": {
        "encoding": "mapping",
        "key": "t_enum(Type)35196",
        "label": "mapping(enum EscrowType.Type => mapping(address => mapping(uint256 => struct EscrowType.Escrow)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Escrow)35230_storage))"
      },
      "t_mapping(t_uint256,t_struct(Escrow)35230_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EscrowType.Escrow)",
        "numberOfBytes": "32",
        "value": "t_struct(Escrow)35230_storage"
      },
      "t_struct(Escrow)35230_storage": {
        "encoding": "inplace",
        "label": "struct EscrowType.Escrow",
        "members": [
          {
            "astId": 35221,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fund)35217_storage"
          },
          {
            "astId": 35224,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "beneficiariesList",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 35229,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "beneficiaries",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(Fund)35217_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Fund)35217_storage": {
        "encoding": "inplace",
        "label": "struct EscrowType.Fund",
        "members": [
          {
            "astId": 35208,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 35210,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "lock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35212,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "collateral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 35214,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "burned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 35216,
            "contract": "src/v0.8/core/finance/Escrow.sol:Escrow",
            "label": "createdBlockNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}