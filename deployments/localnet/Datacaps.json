{
  "address": "0x5388F19db54a4cb30070144a4da2B5bE14d18f9C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_allocatedDatacap",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_totalDatacapAllocationRequirement",
          "type": "uint64"
        }
      ],
      "name": "AllocatedDatacapExceedsTotalRequirement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "availableDatacap",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "allocationThreshold",
          "type": "uint64"
        }
      ],
      "name": "AvailableDatacapExceedAllocationThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "NextDatacapAllocationInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "reallyStored",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "allocatedDatacap",
          "type": "uint64"
        }
      ],
      "name": "StoredExceedsAllocatedDatacap",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "allocatedCapacity",
          "type": "uint64"
        }
      ],
      "name": "DatacapAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "DatacapChunkCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "addDatacapChunkCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getAllocatedDatacap",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getAvailableDatacap",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRequirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getRemainingUnallocatedDatacap",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getTotalDatacapAllocationRequirement",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filplus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_carstore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchings",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsTarget",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsBids",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storages",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "isNextDatacapAllocationValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "requestAllocateDatacap",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storages",
      "outputs": [
        {
          "internalType": "contract IStorages",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "updatedDatacapChunkBurnFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "updatedDatacapChunkCollateralFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9021cb8d818084f87f27b3e6df282435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_allocatedDatacap\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_totalDatacapAllocationRequirement\",\"type\":\"uint64\"}],\"name\":\"AllocatedDatacapExceedsTotalRequirement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"availableDatacap\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocationThreshold\",\"type\":\"uint64\"}],\"name\":\"AvailableDatacapExceedAllocationThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"NextDatacapAllocationInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reallyStored\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocatedDatacap\",\"type\":\"uint64\"}],\"name\":\"StoredExceedsAllocatedDatacap\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"allocatedCapacity\",\"type\":\"uint64\"}],\"name\":\"DatacapAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DatacapChunkCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"addDatacapChunkCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getAllocatedDatacap\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getAvailableDatacap\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getRemainingUnallocatedDatacap\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getTotalDatacapAllocationRequirement\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filplus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_carstore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsBids\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storages\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"isNextDatacapAllocationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"requestAllocateDatacap\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storages\",\"outputs\":[{\"internalType\":\"contract IStorages\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"updatedDatacapChunkBurnFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"updatedDatacapChunkCollateralFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages the allocation of datacap for matched data storage after successful matching with Filecoin storage deals. Note:The removal of datacap is not necessary.     This design allocates datacap step by step according to chunks,     rather than allocating all at once.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addDatacapChunkCollateral(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching\"}},\"getAllocatedDatacap(uint64)\":{\"details\":\"Gets the allocated matched datacap for a matching process.\",\"params\":{\"_matchingId\":\"The ID of the matching process.\"},\"returns\":{\"_0\":\"The allocated datacap size.\"}},\"getAvailableDatacap(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching process.\"},\"returns\":{\"_0\":\"The available datacap size.\"}},\"getRemainingUnallocatedDatacap(uint64)\":{\"details\":\"Gets the remaining datacap size needed to be allocated for a matching process.\",\"params\":{\"_matchingId\":\"The ID of the matching process.\"},\"returns\":{\"_0\":\"The remaining datacap size needed.\"}},\"getTotalDatacapAllocationRequirement(uint64)\":{\"details\":\"Gets the total datacap size needed to be allocated for a matching process.\",\"params\":{\"_matchingId\":\"The ID of the matching process.\"},\"returns\":{\"_0\":\"The total datacap size needed.\"}},\"isNextDatacapAllocationValid(uint64)\":{\"details\":\"Checks if the next datacap allocation is allowed for a matching process.\",\"params\":{\"_matchingId\":\"The ID of the matching process.\"},\"returns\":{\"_0\":\"True if next allocation is allowed, otherwise false.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"requestAllocateDatacap(uint64)\":{\"details\":\"Requests the allocation of matched datacap for a matching process.\",\"params\":{\"_matchingId\":\"The ID of the matching process.\"}},\"updatedDatacapChunkBurnFunds(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching\"},\"returns\":{\"_0\":\"The updated burn funds required\"}},\"updatedDatacapChunkCollateralFunds(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching\"},\"returns\":{\"_0\":\"The updated collateral funds required\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Datacap\",\"version\":1},\"userdoc\":{\"errors\":{\"AllocatedDatacapExceedsTotalRequirement(uint64,uint64)\":[{\"notice\":\"datacap errors\"}]},\"events\":{\"DatacapAllocated(uint64,uint64)\":{\"notice\":\"notice:  Event emitted when datacap is allocated to a matching\"},\"DatacapChunkCollateral(uint64,address,uint256,uint256)\":{\"notice\":\"notice:  Event emitted when chunk datacap is collateral to a matching\"}},\"kind\":\"user\",\"methods\":{\"addDatacapChunkCollateral(uint64)\":{\"notice\":\"Add collateral funds for allocating datacap chunk\"},\"getAvailableDatacap(uint64)\":{\"notice\":\"Gets the available datacap that can still be allocated for a matching process.\"},\"getCollateralRequirement()\":{\"notice\":\"Get collateral funds requirement for allocate chunk datacap\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"initialize(address,address,address,address,address,address,address,address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"updatedDatacapChunkBurnFunds(uint64)\":{\"notice\":\"Get the updated burn funds for datacap chunk based on real-time business data\"},\"updatedDatacapChunkCollateralFunds(uint64)\":{\"notice\":\"Get the updated collateral funds for datacap chunk based on real-time business data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/datacap/Datacaps.sol\":\"Datacaps\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373031363738333234383532\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IEscrow.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// @title IEscrow Interface\\n/// @notice This interface defines the escrow-related functions within the system.\\ninterface IEscrow {\\n    /// @dev Records the sent amount as credit for future withdrawals.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Collateral} event upon successful credit recording.\\n    function collateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Redeem funds authorized for an address.\\n    /// Redeem the collateral funds after the collateral expires.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {UpdateCollateral} event upon successful credit recording.\\n    function collateralRedeem(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @notice Withdraw funds authorized for an address.\\n    /// @dev This function allows anyone to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {Withdrawn} event upon successful withdrawal.\\n    function withdraw(\\n        EscrowType.Type _type,\\n        address payable _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Payment} event upon successful credit recording.\\n    function payment(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentSingleBeneficiary} event upon successful credit recording.\\n    function paymentSingleBeneficiary(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Payment withdraw funds authorized for an address.\\n    /// @dev This function allows anyone to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @notice Emits a {PaymentWithdrawn} event upon successful credit recording.\\n    function paymentWithdraw(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    ) external;\\n\\n    /// @notice Payment transfer funds from locked to unlocked.Only total data prepare fee allowed.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The payment transfer credited funds.\\n    /// @notice Emits a {PaymentTransfer} event upon successful credit recording.\\n    function paymentTransfer(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Refund funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {PaymentRefund} event upon successful credit recording.\\n    function paymentRefund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @notice Post an update event for collateral type. Called by internal contract.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function emitCollateralUpdate(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        EscrowType.CollateralEvent _event\\n    ) external;\\n\\n    /// @notice Post an event for payment type. Called by internal contract\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function emitPaymentUpdate(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        EscrowType.PaymentEvent _event\\n    ) external;\\n\\n    /// @notice Get owner created block number.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCreatedBlockNumber(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint64);\\n\\n    /// @notice Get owner collateral funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner total funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerTotal(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner lock funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerLock(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner burned funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerBurned(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get beneficiariesList.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getBeneficiariesList(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get beneficiary fund.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function getBeneficiaryFund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total, // Total amount in fund account\\n            uint256 lock, // Lock amount in fund account for payment beneficiaries\\n            uint256 collateral, // Collateral amount in fund account for withdraw and punishment\\n            uint256 burned, // burned amount in fund account\\n            uint64 createdBlockNumber // Fund account created block number\\n        );\\n}\\n\",\"keccak256\":\"0x5354205979a1497f84f450308a04636bedb5ff0d38f0ee1fe953ee8afdaafc16\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb09fbb4ff74243480bfbf55be3a56a020220a915aebe48faca532462df096a06\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatacaps.sol\":{\"content\":\"/// SPDX-License-Identifier: GPL-3.0-or-later\\n/// (c) 2023 Dataswap\\n///\\n/// Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n/// you may not use this file except in compliance with the License.\\n/// You may obtain a copy of the License at\\n///     https://www.gnu.org/licenses/gpl-3.0.en.html\\n///\\n/// Unless required by applicable law or agreed to in writing, software\\n/// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n/// See the License for the specific language governing permissions and\\n/// limitations under the License.\\n\\npragma solidity ^0.8.21;\\nimport {IStorages} from \\\"src/v0.8/interfaces/module/IStorages.sol\\\";\\n\\n/// @title IDatacap\\n/// @dev Interface for managing the allocation of datacap for matched data storage.\\ninterface IDatacaps {\\n    /// @notice Add collateral funds for allocating datacap chunk\\n    /// @param _matchingId The ID of the matching\\n    function addDatacapChunkCollateral(uint64 _matchingId) external payable;\\n\\n    /// @dev Requests the allocation of matched datacap for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    function requestAllocateDatacap(\\n        uint64 _matchingId\\n    ) external returns (uint64);\\n\\n    /// @notice Get the updated collateral funds for datacap chunk based on real-time business data\\n    /// @param _matchingId The ID of the matching\\n    /// @return The updated collateral funds required\\n    function updatedDatacapChunkCollateralFunds(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the updated burn funds for datacap chunk based on real-time business data\\n    /// @param _matchingId The ID of the matching\\n    /// @return The updated burn funds required\\n    function updatedDatacapChunkBurnFunds(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice Get collateral funds requirement for allocate chunk datacap\\n    function getCollateralRequirement() external returns (uint256);\\n\\n    /// @dev Gets the allocated matched datacap for a storage.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The allocated datacap size.\\n    function getAvailableDatacap(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @dev Gets the allocated matched datacap for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The allocated datacap size.\\n    function getAllocatedDatacap(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @dev Gets the total datacap size needed to be allocated for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The total datacap size needed.\\n    function getTotalDatacapAllocationRequirement(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @dev Gets the remaining datacap size needed to be allocated for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The remaining datacap size needed.\\n    function getRemainingUnallocatedDatacap(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @dev Checks if the next datacap allocation is allowed for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return True if next allocation is allowed, otherwise false.\\n    function isNextDatacapAllocationValid(\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    function storages() external view returns (IStorages);\\n}\\n\",\"keccak256\":\"0x9e468d3b6a716444c1da09a5ee9a6b972658397ad84b6b8bc2052edf5a146c2a\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasets.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasets\\ninterface IDatasets {\\n    ///@notice Approve a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    function approveDataset(uint64 _datasetId) external;\\n\\n    ///@notice Approve the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    function approveDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Reject a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\\n    function rejectDataset(uint64 _datasetId) external;\\n\\n    ///@notice Reject the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    function rejectDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Submit metadata for a dataset\\n    ///        Note:anyone can submit dataset metadata\\n    function submitDatasetMetadata(\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) external;\\n\\n    /// @notice Update dataset usedSizeInBytes. only called by matching contract. TODO: Need to add permission control\\n    function addDatasetUsedSize(uint64 _datasetId, uint64 _size) external;\\n\\n    /// @notice Get dataset usedSizeInBytes.\\n    function getDatasetUsedSize(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset metadata\\n    function getDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory title,\\n            string memory industry,\\n            string memory name,\\n            string memory description,\\n            string memory source,\\n            string memory accessMethod,\\n            address submitter,\\n            uint64 createdBlockNumber,\\n            uint64 sizeInBytes,\\n            bool isPublic,\\n            uint64 version\\n        );\\n\\n    /// @notice Get submitter of dataset's metadata\\n    function getDatasetMetadataSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset state\\n    function getDatasetState(\\n        uint64 _datasetId\\n    ) external view returns (DatasetType.State);\\n\\n    ///@notice Check if a dataset has metadata\\n    function hasDatasetMetadata(\\n        string memory _accessMethod\\n    ) external view returns (bool);\\n\\n    /// @notice Checks if metadata fields are valid.\\n    function requireValidDatasetMetadata(\\n        uint64 _datasetId\\n    ) external view returns (bool);\\n\\n    /// @notice Report the dataset has not enough collateral.\\n    function reportFundsNotEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset has enough collateral.\\n    function reportFundsEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset replica has already been submitted.\\n    function reportDatasetReplicaRequirementSubmitted(\\n        uint64 _datasetId\\n    ) external;\\n\\n    /// @notice Report the dataset proof has already been submitted.\\n    function reportDatasetProofSubmitted(uint64 _datasetId) external;\\n\\n    /// @notice Default getter functions for public variables\\n    function datasetsCount() external view returns (uint64);\\n\\n    /// @notice get  roles instance\\n    function roles() external view returns (IRoles);\\n\\n    /// @notice get  governance address\\n    function governanceAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xefbbd972bf238a8ad40d5c4ea06027965d8c0535276939d5ede17cedce19edc1\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchings.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchings\\ninterface IMatchings {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _bidSelectionRule The rules for determining the winning bid.\\n    /// @param _biddingDelayBlockCount The number of blocks to delay bidding.\\n    /// @param _biddingPeriodBlockCount The number of blocks for bidding period.\\n    /// @param _storageCompletionPeriodBlocks The number of blocks for storage period.\\n    /// @param _biddingThreshold The threshold for bidding.\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    /// @param _additionalInfo The additional information about the matching.\\n    /// @return The matchingId.\\n    function createMatching(\\n        uint64 _datasetId,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint64 _biddingDelayBlockCount,\\n        uint64 _biddingPeriodBlockCount,\\n        uint64 _storageCompletionPeriodBlocks,\\n        uint256 _biddingThreshold,\\n        uint16 _replicaIndex,\\n        string memory _additionalInfo\\n    ) external returns (uint64);\\n\\n    /// @notice Function for pausing a matching\\n    /// @param _matchingId The matching id.\\n    function pauseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for resuming a paused matching\\n    /// @param _matchingId The matching id.\\n    function resumeMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    function reportPublishMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report canceling a matching\\n    /// @param _matchingId The matching id.\\n    function reportCancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report closing a matching\\n    /// @param _matchingId The matching id.\\n    function reportCloseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report complete with a winner\\n    /// @param _matchingId The matching id.\\n    /// @param _winner The winner of bids of matching.\\n    function reportMatchingHasWinner(\\n        uint64 _matchingId,\\n        address _winner\\n    ) external;\\n\\n    /// @notice Function for report complete a matching without winner\\n    /// @param _matchingId The matching id.\\n    function reportMatchingNoWinner(uint64 _matchingId) external;\\n\\n    /// @notice Function for getting matchings initiator\\n    function getMatchingInitiator(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting the state of a matching\\n    function getMatchingState(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.State);\\n\\n    /// @notice  Function for getting the bid selection rule of a matching\\n    function getBidSelectionRule(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.BidSelectionRule);\\n\\n    /// @notice  Function for getting the bid threshold of a matching\\n    function getBiddingThreshold(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the start height of a matching\\n    function getBiddingStartHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the after pause height of a matching\\n    function getBiddingAfterPauseHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the end height of a matching\\n    function getBiddingEndHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the storage completion period blocks in a matching\\n    function getMatchingStorageCompletionHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the matching creation block number\\n    function getMatchingCreatedHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    // Default getter functions for public variables\\n    function matchingsCount() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x8909f5e067a7c4713ad3c766cef947c91714b205e75e4f251578794946c1473b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsBids.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsBid\\ninterface IMatchingsBids {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsTarget\\n    ) external;\\n\\n    /// @notice  Function for bidding on a matching\\n    function bidding(uint64 _matchingId, uint256 _amount) external payable;\\n\\n    /// @notice  Function for canceling a matching\\n    function cancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for closing a matching and choosing a winner\\n    function closeMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for getting bids in a matching\\n    function getMatchingBids(\\n        uint64 _matchingId\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice  Function for getting bid amount of a bidder in a matching\\n    function getMatchingBidAmount(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingBidsCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting winner of a matching\\n    function getMatchingWinner(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting winners of a matchings\\n    function getMatchingWinners(\\n        uint64[] memory _matchingIds\\n    ) external view returns (address[] memory);\\n\\n    /// @notice  Function for checking if a bidder has a bid in a matching\\n    function hasMatchingBid(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7585d631e867ca5c6538c5d630b364ad984f9d0615d012dce8214f4988433cfa\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsTarget.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsTarget\\ninterface IMatchingsTarget {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching target.\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _dataType Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\\n    /// @param _associatedMappingFilesMatchingID The matching ID that associated with mapping files of dataset of _datasetId\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    function createTarget(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice  Function for parse cars from indexes.\\n    /// @param _starts The starts of cars to publish.\\n    /// @param _ends The ends of cars to publish.\\n    /// @return The cars of the indexes.\\n    function parseCars(\\n        uint64[] memory _starts,\\n        uint64[] memory _ends\\n    ) external pure returns (uint64[] memory);\\n\\n    /// @notice  Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id of matching.\\n    /// @param _carsStarts The cars to publish.\\n    /// @param _carsEnds The cars to publish.\\n    /// @param complete If the publish is complete.\\n    function publishMatching(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        uint64[] memory _carsStarts,\\n        uint64[] memory _carsEnds,\\n        bool complete\\n    ) external;\\n\\n    /// @notice Function for getting subsidy amount in a matching\\n    function getMatchingSubsidy(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice  Function for getting the dataset id in a matching\\n    function getMatchingDatasetId(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the index of matching's replica.\\n    function getMatchingReplicaIndex(\\n        uint64 _matchingId\\n    ) external view returns (uint16);\\n\\n    /// @notice get matchings size\\n    function getMatchingSize(uint64 _matchingId) external view returns (uint64);\\n\\n    /// @notice Get the target information of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return datasetID The ID of the associated dataset.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    /// @return size The size of the matching.\\n    /// @return dataType The data type of the matching.\\n    /// @return associatedMappingFilesMatchingID The ID of the associated mapping files matching.\\n    function getMatchingTarget(\\n        uint64 _matchingId\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 datasetID,\\n            uint64[] memory cars,\\n            uint64 size,\\n            DatasetType.DataType dataType,\\n            uint64 associatedMappingFilesMatchingID\\n        );\\n\\n    /// @notice Check if a matching with the given matching ID contains a specific CID.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cid The CID (Content Identifier) to check for.\\n    /// @return True if the matching contains the specified CID, otherwise false.\\n    function isMatchingContainsCar(\\n        uint64 _matchingId,\\n        uint64 _cid\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching with the given matching ID contains multiple CIDs.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cids An array of CIDs (Content Identifiers) to check for.\\n    /// @return True if the matching contains all the specified CIDs, otherwise false.\\n    function isMatchingContainsCars(\\n        uint64 _matchingId,\\n        uint64[] memory _cids\\n    ) external view returns (bool);\\n\\n    /// @notice check is matching targe valid\\n    function isMatchingTargetValid(\\n        uint64 _datasetId,\\n        uint64[] memory _cars,\\n        uint64 _size,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching meets the requirements of Fil+.\\n    function isMatchingTargetMeetsFilPlusRequirements(\\n        uint64 _matchingId,\\n        address candidate\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54e756188dd5529f4d270050e57a20a5b21a6a922a486beb8f35c34b394dc3cd\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IStorages.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n\\n/// @title Interface for Matchedstores contract\\ninterface IStorages {\\n    /// @dev Submits multiple Filecoin claim Ids for a matchedstore after successful matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _provider A provider of storage provider of matching.\\n    /// @param _ids An array of content identifiers of the matched data.\\n    /// @param _claimIds An array of IDs of successful Filecoin storage deals.\\n    function submitStorageClaimIds(\\n        uint64 _matchingId,\\n        uint64 _provider,\\n        uint64[] memory _ids,\\n        uint64[] memory _claimIds\\n    ) external;\\n\\n    /// @dev Gets the list of done cars in the matchedstore.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return An array of content identifiers of the done cars.\\n    function getStoredCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @dev Gets the count of done cars in the matchedstore.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return The count of done cars in the matchedstore.\\n    function getStoredCarCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice get total stored size\\n    /// @param _matchingId The ID of the matching.\\n    /// @return The total size of the matching's stored cars.\\n    function getTotalStoredSize(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    ///@notice get car size\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _id The content identifier of the matched data.\\n    /// @return The size of the matching's stored cars.\\n    function getStoredCarSize(\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) external view returns (uint64);\\n\\n    /// @dev Get the collateral amount\\n    function getProviderLockPayment(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @dev Get the client allow payment amount\\n    function getClientLockPayment(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @dev Checks if all cars are done in the matchedstore.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return True if all cars are done in the matchedstore, otherwise false.\\n    function isAllStoredDone(uint64 _matchingId) external view returns (bool);\\n\\n    /// @dev Checks if store expiration in the matchedstore.\\n    function isStorageExpiration(\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    ///@notice get datasets instance\\n    function datasets() external view returns (IDatasets);\\n\\n    ///@notice get matchings instance\\n    function matchings() external view returns (IMatchings);\\n\\n    ///@notice get matchingsTarget instance\\n    function matchingsTarget() external view returns (IMatchingsTarget);\\n\\n    ///@notice get matchingsBids instance\\n    function matchingsBids() external view returns (IMatchingsBids);\\n}\\n\",\"keccak256\":\"0xbae912fd8625806d9e983cbf598879c7b76b079a0428993af5b1eebcbe2fc0c8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/datacap/Datacaps.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IEscrow} from \\\"src/v0.8/interfaces/core/IEscrow.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\nimport {IStorages} from \\\"src/v0.8/interfaces/module/IStorages.sol\\\";\\nimport {IDatacaps} from \\\"src/v0.8/interfaces/module/IDatacaps.sol\\\";\\n\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// shared\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\nimport {DatacapsModifiers} from \\\"src/v0.8/shared/modifiers/DatacapsModifiers.sol\\\";\\nimport {DatacapsEvents} from \\\"src/v0.8/shared/events/DatacapsEvents.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n// TODO:version issue\\n// import {DataCapAPI} from \\\"@zondax/filecoin-solidity/contracts/v0.8/DataCapAPI.sol\\\";\\n// import {DataCapTypes} from \\\"@zondax/filecoin-solidity/contracts/v0.8/types/DataCapTypes.sol\\\";\\n// import {FilAddresses} from \\\"@zondax/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\\\";\\n// import {BigInts} from \\\"@zondax/filecoin-solidity/contracts/v0.8/utils/BigInts.sol\\\";\\n\\n/// @title Datacap\\n/// @dev Manages the allocation of datacap for matched data storage after successful matching with Filecoin storage deals.\\n/// Note:The removal of datacap is not necessary.\\n///     This design allocates datacap step by step according to chunks,\\n///     rather than allocating all at once.\\ncontract Datacaps is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IDatacaps,\\n    DatacapsModifiers\\n{\\n    //(matchingID => allocated datacap size)\\n    mapping(uint64 => uint64) private allocatedDatacaps;\\n    address private governanceAddress;\\n    IRoles private roles;\\n    IEscrow private escrow;\\n    IFilplus private filplus;\\n    IFilecoin private filecoin;\\n    ICarstore private carstore;\\n    IMatchings private matchings;\\n    IMatchingsTarget private matchingsTarget;\\n    IMatchingsBids private matchingsBids;\\n    IStorages public storages;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    // solhint-disable-next-line\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _filplus,\\n        address _filecoin,\\n        address _carstore,\\n        address _matchings,\\n        address _matchingsTarget,\\n        address _matchingsBids,\\n        address _storages,\\n        address _escrow\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        escrow = IEscrow(_escrow);\\n        filplus = IFilplus(_filplus);\\n        filecoin = IFilecoin(_filecoin);\\n        carstore = ICarstore(_carstore);\\n        matchings = IMatchings(_matchings);\\n        matchingsTarget = IMatchingsTarget(_matchingsTarget);\\n        matchingsBids = IMatchingsBids(_matchingsBids);\\n        storages = IStorages(_storages);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice Add collateral funds for allocating datacap chunk\\n    /// @param _matchingId The ID of the matching\\n    function addDatacapChunkCollateral(uint64 _matchingId) public payable {\\n        uint256 requirement = getCollateralRequirement();\\n        address winner = matchingsBids.getMatchingWinner(_matchingId);\\n        uint256 currentFunds = escrow.getOwnerCollateral(\\n            EscrowType.Type.DatacapChunkCollateral,\\n            winner,\\n            _matchingId\\n        );\\n        uint256 requiredFunds = requirement - currentFunds;\\n        require(msg.value >= requiredFunds, \\\"Insufficient collateral funds\\\");\\n\\n        escrow.collateral{value: msg.value}(\\n            EscrowType.Type.DatacapChunkCollateral,\\n            winner,\\n            _matchingId,\\n            requiredFunds\\n        );\\n\\n        emit DatacapsEvents.DatacapChunkCollateral(\\n            _matchingId,\\n            winner,\\n            msg.value,\\n            requiredFunds\\n        );\\n    }\\n\\n    /// @dev Internal function to allocate matched datacap.\\n    // solhint-disable-next-line\\n    function _allocateDatacap(\\n        uint64 /*_matchingId*/,\\n        uint64 /*_size*/ // solhint-disable-next-line\\n    ) internal {\\n        // DataCapTypes.TransferParams memory params = DataCapTypes.TransferParams(\\n        //     FilAddresses.fromEthAddress(_to),\\n        //     BigInts.fromUint256(_size),\\n        //     \\\"\\\"\\n        // );\\n        // DataCapAPI.transfer(params);\\n        //TODO: logic https://github.com/dataswap/core/issues/30\\n    }\\n\\n    /// @dev Requests the allocation of matched datacap for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    function requestAllocateDatacap(\\n        uint64 _matchingId\\n    )\\n        external\\n        onlyAddress(matchings.getMatchingInitiator(_matchingId))\\n        onlyNotZeroAddress(matchings.getMatchingInitiator(_matchingId))\\n        validNextDatacapAllocation(this, _matchingId)\\n        returns (uint64)\\n    {\\n        uint256 currentFunds = escrow.getOwnerCollateral(\\n            EscrowType.Type.DatacapChunkCollateral,\\n            matchingsBids.getMatchingWinner(_matchingId),\\n            _matchingId\\n        );\\n        uint256 requirement = getCollateralRequirement();\\n        require(currentFunds >= requirement, \\\"Insufficient collateral funds\\\");\\n\\n        uint64 remainingUnallocatedDatacap = getRemainingUnallocatedDatacap(\\n            _matchingId\\n        );\\n        uint64 maxAllocateCapacityPreTime = filplus\\n            .datacapRulesMaxAllocatedSizePerTime();\\n        if (remainingUnallocatedDatacap <= maxAllocateCapacityPreTime) {\\n            allocatedDatacaps[_matchingId] =\\n                allocatedDatacaps[_matchingId] +\\n                remainingUnallocatedDatacap;\\n            _allocateDatacap(_matchingId, remainingUnallocatedDatacap);\\n\\n            emit DatacapsEvents.DatacapAllocated(\\n                _matchingId,\\n                remainingUnallocatedDatacap\\n            );\\n            return remainingUnallocatedDatacap;\\n        } else {\\n            allocatedDatacaps[_matchingId] =\\n                allocatedDatacaps[_matchingId] +\\n                maxAllocateCapacityPreTime;\\n            _allocateDatacap(_matchingId, maxAllocateCapacityPreTime);\\n\\n            emit DatacapsEvents.DatacapAllocated(\\n                _matchingId,\\n                maxAllocateCapacityPreTime\\n            );\\n            return maxAllocateCapacityPreTime;\\n        }\\n    }\\n\\n    /// @notice Get collateral funds requirement for allocate chunk datacap\\n    function getCollateralRequirement() public view returns (uint256) {\\n        // TODO: PRICE_PER_BYTE import from governance\\n        uint64 PER_TIB_BYTE = (1024 * 1024 * 1024 * 1024);\\n        uint256 PRICE_PER_BYTE = (1000000000000000000 / PER_TIB_BYTE);\\n        return filplus.datacapRulesMaxAllocatedSizePerTime() * PRICE_PER_BYTE;\\n    }\\n\\n    /// @notice Get the updated collateral funds for datacap chunk based on real-time business data\\n    /// @param _matchingId The ID of the matching\\n    /// @return The updated collateral funds required\\n    function updatedDatacapChunkCollateralFunds(\\n        uint64 _matchingId\\n    ) public view returns (uint256) {\\n        uint256 availableFunds = escrow.getOwnerCollateral(\\n            EscrowType.Type.DatacapChunkCollateral,\\n            matchingsBids.getMatchingWinner(_matchingId),\\n            _matchingId\\n        );\\n\\n        if (storages.isStorageExpiration(_matchingId) == true) {\\n            uint64 matchingSize = matchingsTarget.getMatchingSize(_matchingId);\\n            uint64 storedSize = storages.getTotalStoredSize(_matchingId);\\n\\n            // TODO: PRICE_PER_BYTE import from governance\\n            uint64 PER_TIB_BYTE = (1024 * 1024 * 1024 * 1024);\\n            uint256 PRICE_PER_BYTE = (1000000000000000000 / PER_TIB_BYTE);\\n            uint256 requiredFunds = (matchingSize - storedSize) *\\n                PRICE_PER_BYTE;\\n\\n            if (requiredFunds < availableFunds) return requiredFunds;\\n        }\\n\\n        return availableFunds;\\n    }\\n\\n    /// @notice Get the updated burn funds for datacap chunk based on real-time business data\\n    /// @param _matchingId The ID of the matching\\n    /// @return The updated burn funds required\\n    function updatedDatacapChunkBurnFunds(\\n        uint64 _matchingId\\n    ) public view returns (uint256) {\\n        if (storages.isStorageExpiration(_matchingId) == true) {\\n            uint64 matchingSize = matchingsTarget.getMatchingSize(_matchingId);\\n            uint64 storedSize = storages.getTotalStoredSize(_matchingId);\\n\\n            // TODO: PRICE_PER_BYTE import from governance\\n            uint64 PER_TIB_BYTE = (1024 * 1024 * 1024 * 1024);\\n            uint256 PRICE_PER_BYTE = (1000000000000000000 / PER_TIB_BYTE);\\n            uint256 requiredFunds = (matchingSize - storedSize) *\\n                PRICE_PER_BYTE;\\n\\n            uint256 availableFunds = escrow.getOwnerCollateral(\\n                EscrowType.Type.DatacapChunkCollateral,\\n                matchingsBids.getMatchingWinner(_matchingId),\\n                _matchingId\\n            );\\n\\n            if (requiredFunds < availableFunds) {\\n                return requiredFunds;\\n            } else {\\n                return availableFunds;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @dev Gets the allocated matched datacap for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The allocated datacap size.\\n    function getAllocatedDatacap(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        return allocatedDatacaps[_matchingId];\\n    }\\n\\n    /// @notice Gets the available datacap that can still be allocated for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The available datacap size.\\n    function getAvailableDatacap(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        uint64 allocatedDatacap = getAllocatedDatacap(_matchingId);\\n        uint64 reallyStored = storages.getTotalStoredSize(_matchingId);\\n        return allocatedDatacap - reallyStored;\\n    }\\n\\n    /// @dev Gets the total datacap size needed to be allocated for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The total datacap size needed.\\n    function getTotalDatacapAllocationRequirement(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        return matchingsTarget.getMatchingSize(_matchingId);\\n    }\\n\\n    /// @dev Gets the remaining datacap size needed to be allocated for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return The remaining datacap size needed.\\n    function getRemainingUnallocatedDatacap(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        uint64 allocatedDatacap = getAllocatedDatacap(_matchingId);\\n        uint64 totalDatacapAllocationRequirement = getTotalDatacapAllocationRequirement(\\n                _matchingId\\n            );\\n        return totalDatacapAllocationRequirement - allocatedDatacap;\\n    }\\n\\n    /// @dev Checks if the next datacap allocation is allowed for a matching process.\\n    /// @param _matchingId The ID of the matching process.\\n    /// @return True if next allocation is allowed, otherwise false.\\n    function isNextDatacapAllocationValid(\\n        uint64 _matchingId\\n    ) public view returns (bool) {\\n        uint64 totalDatacapAllocationRequirement = getTotalDatacapAllocationRequirement(\\n                _matchingId\\n            );\\n        uint64 allocatedDatacap = getAllocatedDatacap(_matchingId);\\n        uint64 reallyStored = storages.getTotalStoredSize(_matchingId);\\n        uint64 availableDatacap = getAvailableDatacap(_matchingId);\\n        uint64 allocationThreshold = (filplus\\n            .datacapRulesMaxRemainingPercentageForNext() / 100) *\\n            filplus.datacapRulesMaxAllocatedSizePerTime();\\n\\n        if (allocatedDatacap > totalDatacapAllocationRequirement) {\\n            revert Errors.AllocatedDatacapExceedsTotalRequirement(\\n                allocatedDatacap,\\n                totalDatacapAllocationRequirement\\n            );\\n        }\\n\\n        if (reallyStored > allocatedDatacap) {\\n            revert Errors.StoredExceedsAllocatedDatacap(\\n                reallyStored,\\n                allocatedDatacap\\n            );\\n        }\\n\\n        if (availableDatacap > allocationThreshold) {\\n            revert Errors.AvailableDatacapExceedAllocationThreshold(\\n                availableDatacap,\\n                allocationThreshold\\n            );\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf3e22bc89721bea1152a7bf96e30365163c26141f852778a1dff1373ea880f98\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n\\n    /// @notice escrow errors\\n    error ExceedValidPaymentAmount(uint256 total, uint256 payment);\\n    error ExceedValidTransferAmount(uint256 total, uint256 transfer);\\n    error ExceedValidRefundAmount(uint256 total, uint256 refund);\\n    error ExceedValidBurnAmount(uint256 total, uint256 burn);\\n    error ExceedValidCollateralAmount(uint256 total, uint256 collateral);\\n    error BeneficiaryAlreadyExist(address);\\n    error BeneficiaryIsInvalid(address);\\n    error OnlySpecifyTypeAllowedTransfer();\\n    error SubAccountAlreadyExist(address);\\n    error NotRefundableAmount();\\n}\\n\",\"keccak256\":\"0x97305fe742822eef7e1dba0b8146f91dae07189f14bbdb8c73a5fcb115eff302\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/DatacapsEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary DatacapsEvents {\\n    ///notice:  Event emitted when datacap is allocated to a matching\\n    event DatacapAllocated(uint64 indexed matchingId, uint64 allocatedCapacity);\\n\\n    ///notice:  Event emitted when chunk datacap is collateral to a matching\\n    event DatacapChunkCollateral(uint64 indexed, address, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xab46a97e746c820ca3da98d48ac7d9e58329d312051bea0364a0a6c68e6414ce\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/DatacapsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IDatacaps} from \\\"src/v0.8/interfaces/module/IDatacaps.sol\\\";\\n///shared\\nimport {StoragesModifiers} from \\\"src/v0.8/shared/modifiers/StoragesModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract DatacapsModifiers is StoragesModifiers {\\n    /// @notice  validNextDatacapAllocation\\n    modifier validNextDatacapAllocation(\\n        IDatacaps _datacaps,\\n        uint64 _matchingId\\n    ) {\\n        if (!_datacaps.isNextDatacapAllocationValid(_matchingId)) {\\n            revert Errors.NextDatacapAllocationInvalid(_matchingId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa37ff662d850b74ec990e16ead87908fb78c6b48599e71515e06eb6787094c0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract MatchingsModifiers is CarstoreModifiers {\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingInitiator(IMatchings _matchings, uint64 _matchingId) {\\n        address initiator = _matchings.getMatchingInitiator(_matchingId);\\n        if (initiator != msg.sender) {\\n            revert Errors.NotMatchingInitiator(\\n                _matchingId,\\n                initiator,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access based on matching state\\n    modifier onlyMatchingState(\\n        IMatchings _matchings,\\n        uint64 _matchingId,\\n        MatchingType.State _state\\n    ) {\\n        MatchingType.State matchingState = _matchings.getMatchingState(\\n            _matchingId\\n        );\\n        if (matchingState != _state) {\\n            revert Errors.InvalidMatchingState(\\n                _matchingId,\\n                _state,\\n                matchingState\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsTarget(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsTarget) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsBids(\\n        IMatchingsBids _matchingsBids,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsBids) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingContainsCar(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) {\\n        if (!_matchingsTarget.isMatchingContainsCar(_matchingId, _id)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2aaf11a9100face83692e5b9d6ab8b0440d05e4baa5a795ba6ac4a3c1f09d387\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/StoragesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///shared\\nimport {MatchingsModifiers} from \\\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract StoragesModifiers is MatchingsModifiers {\\n\\n}\\n\",\"keccak256\":\"0x654e1ef8c20aa552a5c13fa11a63a42036191c4abda99bb6c6b0df077b46d085\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        FundsNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        uint64 usedSizeInBytes; // Already matching size.\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x37374caed842596d4f4fad36b66805caa76c4cb2659170c7bd42f202f2ff9376\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/EscrowType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title EscrowType Library\\n/// @notice This library defines escrow type within the system.\\nlibrary EscrowType {\\n    /// @notice Enum escrow object types.\\n    enum Type {\\n        DatacapCollateral, // The storage client collateral.\\n        DatacapChunkCollateral, // The storage provider collateral.\\n        DataAuditCollateral, // The dataset auditor collateral, for dispute\\n        DataPrepareCollateral, // The data preparer collateral,for dispute\\n        DatasetAuditFee, // The dataset auditor calculate fees.\\n        TotalDataPrepareFeeByClient, // The data preparer calculate fees of dataset paid by storage client.\\n        DataPrepareFeeByClient, // The data preparer calculate fees of matching paid by storage client.\\n        DataPrepareFeeByProvider // The data preparer calculate fees paid by storage provider.\\n    }\\n\\n    /// @notice Enum representing the events related to collateral management.Triggered by business contract\\n    enum CollateralEvent {\\n        SyncBurn, // Escrow synchronize collateral burn amount.\\n        SyncCollateral // Escrow synchronize collateral amount.\\n    }\\n\\n    /// @notice Enum representing the events related to payment management.Triggered by business contract\\n    enum PaymentEvent {\\n        SyncPaymentLock, // Escrow synchronize allow payment amount.\\n        SyncPaymentBeneficiary, // Escrow synchronize payment beneficiaries list.\\n        AddPaymentSubAccount // Escrow synchronize sub payment account.\\n    }\\n\\n    /// @notice Struct the beneficiary of escrow\\n    struct Fund {\\n        uint256 total; // Total amount in fund account\\n        uint256 lock; // Lock amount in fund account for payment beneficiaries\\n        uint256 collateral; // Collateral amount in fund account for withdraw and punishment\\n        uint256 burned; // burned amount in fund account\\n        uint64 createdBlockNumber; // Fund account created block number\\n    }\\n\\n    /// @notice Struct the escrow\\n    struct Escrow {\\n        Fund owner; // fund owner\\n        address[] beneficiariesList; // Retrieves beneficiaries list\\n        mapping(address beneficiary => Fund) beneficiaries; // Beneficiaries information\\n    }\\n}\\n\",\"keccak256\":\"0x277d1c16e2b2da9ab128fb551c203359faf8817e57ea5192d142669c2029e6aa\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n        uint256 subsidy; // subsidy amount\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0xaada4a7a4f23284bffe0ca9cf885002d6a7589d3751e44dde5b20e439b7535dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161262b61004c6000396000818161039a015281816103e30152818161046b015281816104ab0152610527015261262b6000f3fe6080604052600436106100c35760003560e01c806313a06782146100c85780633659cfe6146100f35780634f1ef2861461011557806352d1902d146101285780636d6ae67c1461013d5780637de147871461016a578063a6d4258b1461018a578063aaf10f42146101b7578063c306b378146101d9578063d333d216146101f9578063db7ae81d14610219578063e088290014610239578063e1d5201c1461024c578063e40a20a214610279578063f1378bd014610299578063f7e7a2b0146102b9575b600080fd5b3480156100d457600080fd5b506100dd6102d9565b6040516100ea9190611a1b565b60405180910390f35b3480156100ff57600080fd5b5061011361010e366004611a5f565b610390565b005b610113610123366004611b85565b610461565b34801561013457600080fd5b506100dd61051a565b34801561014957600080fd5b5061015d610158366004611bfc565b610577565b6040516100ea9190611c26565b34801561017657600080fd5b506100dd610185366004611bfc565b610a0c565b34801561019657600080fd5b506101aa6101a5366004611bfc565b610cbb565b6040516100ea9190611c3c565b3480156101c357600080fd5b506101cc610f0c565b6040516100ea9190611c53565b3480156101e557600080fd5b506101136101f4366004611c61565b610f1b565b34801561020557600080fd5b5061015d610214366004611bfc565b61108d565b34801561022557600080fd5b5061015d610234366004611bfc565b6110ab565b610113610247366004611bfc565b6110d8565b34801561025857600080fd5b50606f5461026c906001600160a01b031681565b6040516100ea9190611d75565b34801561028557600080fd5b506100dd610294366004611bfc565b6112bc565b3480156102a557600080fd5b5061015d6102b4366004611bfc565b611574565b3480156102c557600080fd5b5061015d6102d4366004611bfc565b611603565b6000600160281b816102f382670de0b6b3a7640000611daf565b6001600160401b0316905080606960009054906101000a90046001600160a01b03166001600160a01b031663f4e5f7bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103769190611de4565b6001600160401b03166103899190611e05565b9250505090565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103e15760405162461bcd60e51b81526004016103d890611e5e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610413611675565b6001600160a01b0316146104395760405162461bcd60e51b81526004016103d890611ea5565b61044281611691565b6040805160008082526020820190925261045e9183919061172a565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104a95760405162461bcd60e51b81526004016103d890611e5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104db611675565b6001600160a01b0316146105015760405162461bcd60e51b81526004016103d890611ea5565b61050a82611691565b6105168282600161172a565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105645760405162461bcd60e51b81526004016103d890611f0a565b506000805160206125af83398151915290565b606c5460405163e19edda160e01b81526000916001600160a01b03169063e19edda1906105a8908590600401611c26565b602060405180830381865afa1580156105c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e99190611f25565b336001600160a01b038216146106115760405162461bcd60e51b81526004016103d890611f7d565b606c5460405163e19edda160e01b81526001600160a01b039091169063e19edda190610641908690600401611c26565b602060405180830381865afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190611f25565b6001600160a01b0381166000036106ab5760405162461bcd60e51b81526004016103d890611fbc565b60405163a6d4258b60e01b815230908590829063a6d4258b906106d2908490600401611c26565b602060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190611fdf565b610732578060405163fa77daf360e01b81526004016103d89190611c26565b606854606e54604051636397640760e01b81526000926001600160a01b039081169263f39b9c519260019290911690636397640790610775908d90600401611c26565b602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611f25565b8a6040518463ffffffff1660e01b81526004016107d593929190612044565b602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610816919061207d565b905060006108226102d9565b9050808210156108445760405162461bcd60e51b81526004016103d8906120d2565b600061084f896110ab565b90506000606960009054906101000a90046001600160a01b03166001600160a01b031663f4e5f7bd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190611de4565b9050806001600160401b0316826001600160401b031611610974576001600160401b03808b1660009081526065602052604090205461090b918491166120e2565b6001600160401b038b8116600090815260656020526040902080546001600160401b03191692909116919091179055896001600160401b031660008051602061256f833981519152836040516109619190611c26565b60405180910390a2509650610a03915050565b6001600160401b03808b1660009081526065602052604090205461099a918391166120e2565b6001600160401b038b8116600090815260656020526040902080546001600160401b03191692909116919091179055896001600160401b031660008051602061256f833981519152826040516109f09190611c26565b60405180910390a29750610a0392505050565b50505050919050565b606854606e54604051636397640760e01b815260009283926001600160a01b039182169263f39b9c51926001921690636397640790610a4f908990600401611c26565b602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190611f25565b866040518463ffffffff1660e01b8152600401610aaf93929190612044565b602060405180830381865afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af0919061207d565b606f5460405163b46251e560e01b81529192506001600160a01b03169063b46251e590610b21908690600401611c26565b602060405180830381865afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b629190611fdf565b1515600103610cb557606d5460405163167843d160e31b81526000916001600160a01b03169063b3c21e8890610b9c908790600401611c26565b602060405180830381865afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd9190611de4565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f90610c13908890600401611c26565b602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611de4565b9050600160281b6000610c6f82670de0b6b3a7640000611daf565b6001600160401b03169050600081610c878587612115565b6001600160401b0316610c9a9190611e05565b905085811015610caf57979650505050505050565b50505050505b92915050565b600080610cc783611603565b90506000610cd48461108d565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f90610d0a908890600401611c26565b602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190611de4565b90506000610d5886611574565b90506000606960009054906101000a90046001600160a01b03166001600160a01b031663f4e5f7bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190611de4565b60695460408051630e23b87960e21b815290516064926001600160a01b03169163388ee1e49160048083019260209291908290030181865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e41919061215c565b610e4b919061217d565b60ff16610e58919061218e565b9050846001600160401b0316846001600160401b03161115610e91578385604051630f010cf560e41b81526004016103d89291906121c3565b836001600160401b0316836001600160401b03161115610ec85782846040516364adb70560e11b81526004016103d89291906121c3565b806001600160401b0316826001600160401b03161115610eff578181604051630535a42f60e31b81526004016103d89291906121c3565b5060019695505050505050565b6000610f16611675565b905090565b600054610100900460ff1615808015610f3b5750600054600160ff909116105b80610f5c5750610f4a3061180c565b158015610f5c575060005460ff166001145b610f785760405162461bcd60e51b81526004016103d890612229565b6000805460ff191660011790558015610f9b576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038e8116919091179092556067805482168d84161790556068805482168584161790556069805482168c8416179055606a805482168b8416179055606b805482168a8416179055606c80548216898416179055606d80548216888416179055606e80548216878416179055606f805490911691851691909117905561103561181b565b8015611080576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906110779060019061224d565b60405180910390a15b5050505050505050505050565b6001600160401b039081166000908152606560205260409020541690565b6000806110b78361108d565b905060006110c484611603565b90506110d08282612115565b949350505050565b60006110e26102d9565b606e54604051636397640760e01b81529192506000916001600160a01b0390911690636397640790611118908690600401611c26565b602060405180830381865afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190611f25565b60685460405163f39b9c5160e01b81529192506000916001600160a01b039091169063f39b9c51906111949060019086908990600401612044565b602060405180830381865afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d5919061207d565b905060006111e3828561225b565b9050803410156112055760405162461bcd60e51b81526004016103d8906120d2565b60685460405163ce37bde760e01b81526001600160a01b039091169063ce37bde790349061123e9060019088908b90889060040161226e565b6000604051808303818588803b15801561125757600080fd5b505af115801561126b573d6000803e3d6000fd5b5050505050846001600160401b03167fbb1676a1890689a738fec1337efcbabdffca931a1b23b848118368460fc1b7488434846040516112ad939291906122ac565b60405180910390a25050505050565b606f5460405163b46251e560e01b81526000916001600160a01b03169063b46251e5906112ed908590600401611c26565b602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190611fdf565b151560010361156c57606d5460405163167843d160e31b81526000916001600160a01b03169063b3c21e8890611368908690600401611c26565b602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190611de4565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f906113df908790600401611c26565b602060405180830381865afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190611de4565b9050600160281b600061143b82670de0b6b3a7640000611daf565b6001600160401b031690506000816114538587612115565b6001600160401b03166114669190611e05565b606854606e54604051636397640760e01b81529293506000926001600160a01b039283169263f39b9c51926001929116906363976407906114ab908e90600401611c26565b602060405180830381865afa1580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ec9190611f25565b8b6040518463ffffffff1660e01b815260040161150b93929190612044565b602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c919061207d565b90508082101561156157509695505050505050565b979650505050505050565b506000919050565b6000806115808361108d565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f906115b6908790600401611c26565b602060405180830381865afa1580156115d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f79190611de4565b90506110d08183612115565b606d5460405163167843d160e31b81526000916001600160a01b03169063b3c21e8890611634908590600401611c26565b602060405180830381865afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190611de4565b6000805160206125af833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d14854906116c890849033906004016122d4565b602060405180830381865afa1580156116e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117099190611fdf565b6117255760405162461bcd60e51b81526004016103d890612320565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561175d5761172583611844565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156117b7575060408051601f3d908101601f191682019092526117b49181019061207d565b60015b6117d35760405162461bcd60e51b81526004016103d89061237b565b6000805160206125af83398151915281146118005760405162461bcd60e51b81526004016103d8906123d1565b50611725838383611898565b6001600160a01b03163b151590565b600054610100900460ff166118425760405162461bcd60e51b81526004016103d890612429565b565b61184d8161180c565b6118695760405162461bcd60e51b81526004016103d890612483565b6000805160206125af83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118a1836118c3565b6000825111806118ae5750805b15611725576118bd8383611903565b50505050565b6118cc81611844565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061192883836040518060600160405280602781526020016125cf6027913961192f565b9392505050565b6060600080856001600160a01b03168560405161194c91906124d9565b600060405180830381855af49150503d8060008114611987576040519150601f19603f3d011682016040523d82523d6000602084013e61198c565b606091505b509150915061199d868383876119a7565b9695505050505050565b606083156119e45782516000036119dd576119c18561180c565b6119dd5760405162461bcd60e51b81526004016103d890612519565b50816110d0565b6110d083838151156119f95781518083602001fd5b8060405162461bcd60e51b81526004016103d8919061255d565b805b82525050565b60208101610cb58284611a13565b6001600160a01b031690565b6000610cb582611a29565b611a4981611a35565b811461045e57600080fd5b8035610cb581611a40565b600060208284031215611a7457611a74600080fd5b60006110d08484611a54565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611aa982611a80565b81018181106001600160401b0382111715611ac657611ac6611a8a565b6040525050565b6000611ad860405190565b9050611ae48282611aa0565b919050565b60006001600160401b03821115611b0257611b02611a8a565b611b0b82611a80565b60200192915050565b82818337506000910152565b6000611b33611b2e84611ae9565b611acd565b905082815260208101848484011115611b4e57611b4e600080fd5b611b59848285611b14565b509392505050565b600082601f830112611b7557611b75600080fd5b81356110d0848260208601611b20565b60008060408385031215611b9b57611b9b600080fd5b6000611ba78585611a54565b92505060208301356001600160401b03811115611bc657611bc6600080fd5b611bd285828601611b61565b9150509250929050565b6001600160401b031690565b611a4981611bdc565b8035610cb581611be8565b600060208284031215611c1157611c11600080fd5b60006110d08484611bf1565b611a1581611bdc565b60208101610cb58284611c1d565b801515611a15565b60208101610cb58284611c34565b611a1581611a35565b60208101610cb58284611c4a565b6000806000806000806000806000806101408b8d031215611c8457611c84600080fd5b6000611c908d8d611a54565b9a50506020611ca18d828e01611a54565b9950506040611cb28d828e01611a54565b9850506060611cc38d828e01611a54565b9750506080611cd48d828e01611a54565b96505060a0611ce58d828e01611a54565b95505060c0611cf68d828e01611a54565b94505060e0611d078d828e01611a54565b935050610100611d198d828e01611a54565b925050610120611d2b8d828e01611a54565b9150509295989b9194979a5092959850565b6000610cb5611d51611d4e84611a29565b90565b611a29565b6000610cb582611d3d565b6000610cb582611d56565b611a1581611d61565b60208101610cb58284611d6c565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000611dba82611bdc565b9150611dc583611bdc565b925082611dd457611dd4611d83565b500490565b8051610cb581611be8565b600060208284031215611df957611df9600080fd5b60006110d08484611dd9565b818102808215838204851417611e1d57611e1d611d99565b5092915050565b602c815260006020820160008051602061258f83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610cb581611e24565b602c815260006020820160008051602061258f83398151915281526b6163746976652070726f787960a01b60208201529150611e57565b60208082528101610cb581611e6e565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150611e57565b60208082528101610cb581611eb5565b8051610cb581611a40565b600060208284031215611f3a57611f3a600080fd5b60006110d08484611f1a565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c000000815291505b5060200190565b60208082528101610cb581611f46565b601881526000602082017741646472657373206d757374206e6f74206265207a65726f60401b81529150611f76565b60208082528101610cb581611f8d565b801515611a49565b8051610cb581611fcc565b600060208284031215611ff457611ff4600080fd5b60006110d08484611fd4565b634e487b7160e01b600052602160045260246000fd5b6008811061045e5761045e612000565b80611ae481612016565b6000610cb582612026565b611a1581612030565b60608101612052828661203b565b61205f6020830185611c4a565b6110d06040830184611c1d565b80611a49565b8051610cb58161206c565b60006020828403121561209257612092600080fd5b60006110d08484612072565b601d81526000602082017f496e73756666696369656e7420636f6c6c61746572616c2066756e647300000081529150611f76565b60208082528101610cb58161209e565b60006120ed82611bdc565b91506120f883611bdc565b9250508082016001600160401b03811115610cb557610cb5611d99565b600061212082611bdc565b915061212b83611bdc565b9250508181036001600160401b03811115610cb557610cb5611d99565b60ff8116611a49565b8051610cb581612148565b60006020828403121561217157612171600080fd5b60006110d08484612151565b600060ff8216915060ff8316611dc5565b600061219982611bdc565b91506121a483611bdc565b92508282026121b281611bdc565b9150808214611e1d57611e1d611d99565b604081016121d18285611c1d565b6119286020830184611c1d565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611e57565b60208082528101610cb5816121de565b600060ff8216610cb5565b611a1581612239565b60208101610cb58284612244565b81810381811115610cb557610cb5611d99565b6080810161227c828761203b565b6122896020830186611c4a565b6122966040830185611c1d565b6122a36060830184611a13565b95945050505050565b606081016122ba8286611c4a565b6122c76020830185611a13565b6110d06040830184611a13565b604081016122e28285611a13565b6119286020830184611c4a565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150611f76565b60208082528101610cb5816122ef565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150611e57565b60208082528101610cb581612330565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150611e57565b60208082528101610cb58161238b565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611e57565b60208082528101610cb5816123e1565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150611e57565b60208082528101610cb581612439565b60005b838110156124ae578181015183820152602001612496565b50506000910152565b60006124c1825190565b6124cf818560208601612493565b9290920192915050565b600061192882846124b7565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611f76565b60208082528101610cb5816124e5565b6000612533825190565b80845260208401935061254a818560208601612493565b61255381611a80565b9093019392505050565b60208082528101611928818461252956fe7f3309fe9c4f1dd0543c577ee6d481942b3cd4f7bf613fd056d1ba9084184f4846756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e8dc32f7ff473515f4880367cb057c194157b1c20f11f63217b6bb0bf134469c64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100c35760003560e01c806313a06782146100c85780633659cfe6146100f35780634f1ef2861461011557806352d1902d146101285780636d6ae67c1461013d5780637de147871461016a578063a6d4258b1461018a578063aaf10f42146101b7578063c306b378146101d9578063d333d216146101f9578063db7ae81d14610219578063e088290014610239578063e1d5201c1461024c578063e40a20a214610279578063f1378bd014610299578063f7e7a2b0146102b9575b600080fd5b3480156100d457600080fd5b506100dd6102d9565b6040516100ea9190611a1b565b60405180910390f35b3480156100ff57600080fd5b5061011361010e366004611a5f565b610390565b005b610113610123366004611b85565b610461565b34801561013457600080fd5b506100dd61051a565b34801561014957600080fd5b5061015d610158366004611bfc565b610577565b6040516100ea9190611c26565b34801561017657600080fd5b506100dd610185366004611bfc565b610a0c565b34801561019657600080fd5b506101aa6101a5366004611bfc565b610cbb565b6040516100ea9190611c3c565b3480156101c357600080fd5b506101cc610f0c565b6040516100ea9190611c53565b3480156101e557600080fd5b506101136101f4366004611c61565b610f1b565b34801561020557600080fd5b5061015d610214366004611bfc565b61108d565b34801561022557600080fd5b5061015d610234366004611bfc565b6110ab565b610113610247366004611bfc565b6110d8565b34801561025857600080fd5b50606f5461026c906001600160a01b031681565b6040516100ea9190611d75565b34801561028557600080fd5b506100dd610294366004611bfc565b6112bc565b3480156102a557600080fd5b5061015d6102b4366004611bfc565b611574565b3480156102c557600080fd5b5061015d6102d4366004611bfc565b611603565b6000600160281b816102f382670de0b6b3a7640000611daf565b6001600160401b0316905080606960009054906101000a90046001600160a01b03166001600160a01b031663f4e5f7bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103769190611de4565b6001600160401b03166103899190611e05565b9250505090565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103e15760405162461bcd60e51b81526004016103d890611e5e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610413611675565b6001600160a01b0316146104395760405162461bcd60e51b81526004016103d890611ea5565b61044281611691565b6040805160008082526020820190925261045e9183919061172a565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104a95760405162461bcd60e51b81526004016103d890611e5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104db611675565b6001600160a01b0316146105015760405162461bcd60e51b81526004016103d890611ea5565b61050a82611691565b6105168282600161172a565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105645760405162461bcd60e51b81526004016103d890611f0a565b506000805160206125af83398151915290565b606c5460405163e19edda160e01b81526000916001600160a01b03169063e19edda1906105a8908590600401611c26565b602060405180830381865afa1580156105c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e99190611f25565b336001600160a01b038216146106115760405162461bcd60e51b81526004016103d890611f7d565b606c5460405163e19edda160e01b81526001600160a01b039091169063e19edda190610641908690600401611c26565b602060405180830381865afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190611f25565b6001600160a01b0381166000036106ab5760405162461bcd60e51b81526004016103d890611fbc565b60405163a6d4258b60e01b815230908590829063a6d4258b906106d2908490600401611c26565b602060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190611fdf565b610732578060405163fa77daf360e01b81526004016103d89190611c26565b606854606e54604051636397640760e01b81526000926001600160a01b039081169263f39b9c519260019290911690636397640790610775908d90600401611c26565b602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611f25565b8a6040518463ffffffff1660e01b81526004016107d593929190612044565b602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610816919061207d565b905060006108226102d9565b9050808210156108445760405162461bcd60e51b81526004016103d8906120d2565b600061084f896110ab565b90506000606960009054906101000a90046001600160a01b03166001600160a01b031663f4e5f7bd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190611de4565b9050806001600160401b0316826001600160401b031611610974576001600160401b03808b1660009081526065602052604090205461090b918491166120e2565b6001600160401b038b8116600090815260656020526040902080546001600160401b03191692909116919091179055896001600160401b031660008051602061256f833981519152836040516109619190611c26565b60405180910390a2509650610a03915050565b6001600160401b03808b1660009081526065602052604090205461099a918391166120e2565b6001600160401b038b8116600090815260656020526040902080546001600160401b03191692909116919091179055896001600160401b031660008051602061256f833981519152826040516109f09190611c26565b60405180910390a29750610a0392505050565b50505050919050565b606854606e54604051636397640760e01b815260009283926001600160a01b039182169263f39b9c51926001921690636397640790610a4f908990600401611c26565b602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190611f25565b866040518463ffffffff1660e01b8152600401610aaf93929190612044565b602060405180830381865afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af0919061207d565b606f5460405163b46251e560e01b81529192506001600160a01b03169063b46251e590610b21908690600401611c26565b602060405180830381865afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b629190611fdf565b1515600103610cb557606d5460405163167843d160e31b81526000916001600160a01b03169063b3c21e8890610b9c908790600401611c26565b602060405180830381865afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd9190611de4565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f90610c13908890600401611c26565b602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611de4565b9050600160281b6000610c6f82670de0b6b3a7640000611daf565b6001600160401b03169050600081610c878587612115565b6001600160401b0316610c9a9190611e05565b905085811015610caf57979650505050505050565b50505050505b92915050565b600080610cc783611603565b90506000610cd48461108d565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f90610d0a908890600401611c26565b602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190611de4565b90506000610d5886611574565b90506000606960009054906101000a90046001600160a01b03166001600160a01b031663f4e5f7bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190611de4565b60695460408051630e23b87960e21b815290516064926001600160a01b03169163388ee1e49160048083019260209291908290030181865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e41919061215c565b610e4b919061217d565b60ff16610e58919061218e565b9050846001600160401b0316846001600160401b03161115610e91578385604051630f010cf560e41b81526004016103d89291906121c3565b836001600160401b0316836001600160401b03161115610ec85782846040516364adb70560e11b81526004016103d89291906121c3565b806001600160401b0316826001600160401b03161115610eff578181604051630535a42f60e31b81526004016103d89291906121c3565b5060019695505050505050565b6000610f16611675565b905090565b600054610100900460ff1615808015610f3b5750600054600160ff909116105b80610f5c5750610f4a3061180c565b158015610f5c575060005460ff166001145b610f785760405162461bcd60e51b81526004016103d890612229565b6000805460ff191660011790558015610f9b576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038e8116919091179092556067805482168d84161790556068805482168584161790556069805482168c8416179055606a805482168b8416179055606b805482168a8416179055606c80548216898416179055606d80548216888416179055606e80548216878416179055606f805490911691851691909117905561103561181b565b8015611080576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906110779060019061224d565b60405180910390a15b5050505050505050505050565b6001600160401b039081166000908152606560205260409020541690565b6000806110b78361108d565b905060006110c484611603565b90506110d08282612115565b949350505050565b60006110e26102d9565b606e54604051636397640760e01b81529192506000916001600160a01b0390911690636397640790611118908690600401611c26565b602060405180830381865afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190611f25565b60685460405163f39b9c5160e01b81529192506000916001600160a01b039091169063f39b9c51906111949060019086908990600401612044565b602060405180830381865afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d5919061207d565b905060006111e3828561225b565b9050803410156112055760405162461bcd60e51b81526004016103d8906120d2565b60685460405163ce37bde760e01b81526001600160a01b039091169063ce37bde790349061123e9060019088908b90889060040161226e565b6000604051808303818588803b15801561125757600080fd5b505af115801561126b573d6000803e3d6000fd5b5050505050846001600160401b03167fbb1676a1890689a738fec1337efcbabdffca931a1b23b848118368460fc1b7488434846040516112ad939291906122ac565b60405180910390a25050505050565b606f5460405163b46251e560e01b81526000916001600160a01b03169063b46251e5906112ed908590600401611c26565b602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190611fdf565b151560010361156c57606d5460405163167843d160e31b81526000916001600160a01b03169063b3c21e8890611368908690600401611c26565b602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190611de4565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f906113df908790600401611c26565b602060405180830381865afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190611de4565b9050600160281b600061143b82670de0b6b3a7640000611daf565b6001600160401b031690506000816114538587612115565b6001600160401b03166114669190611e05565b606854606e54604051636397640760e01b81529293506000926001600160a01b039283169263f39b9c51926001929116906363976407906114ab908e90600401611c26565b602060405180830381865afa1580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ec9190611f25565b8b6040518463ffffffff1660e01b815260040161150b93929190612044565b602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c919061207d565b90508082101561156157509695505050505050565b979650505050505050565b506000919050565b6000806115808361108d565b606f5460405163e9eade6f60e01b81529192506000916001600160a01b039091169063e9eade6f906115b6908790600401611c26565b602060405180830381865afa1580156115d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f79190611de4565b90506110d08183612115565b606d5460405163167843d160e31b81526000916001600160a01b03169063b3c21e8890611634908590600401611c26565b602060405180830381865afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190611de4565b6000805160206125af833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d14854906116c890849033906004016122d4565b602060405180830381865afa1580156116e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117099190611fdf565b6117255760405162461bcd60e51b81526004016103d890612320565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561175d5761172583611844565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156117b7575060408051601f3d908101601f191682019092526117b49181019061207d565b60015b6117d35760405162461bcd60e51b81526004016103d89061237b565b6000805160206125af83398151915281146118005760405162461bcd60e51b81526004016103d8906123d1565b50611725838383611898565b6001600160a01b03163b151590565b600054610100900460ff166118425760405162461bcd60e51b81526004016103d890612429565b565b61184d8161180c565b6118695760405162461bcd60e51b81526004016103d890612483565b6000805160206125af83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118a1836118c3565b6000825111806118ae5750805b15611725576118bd8383611903565b50505050565b6118cc81611844565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061192883836040518060600160405280602781526020016125cf6027913961192f565b9392505050565b6060600080856001600160a01b03168560405161194c91906124d9565b600060405180830381855af49150503d8060008114611987576040519150601f19603f3d011682016040523d82523d6000602084013e61198c565b606091505b509150915061199d868383876119a7565b9695505050505050565b606083156119e45782516000036119dd576119c18561180c565b6119dd5760405162461bcd60e51b81526004016103d890612519565b50816110d0565b6110d083838151156119f95781518083602001fd5b8060405162461bcd60e51b81526004016103d8919061255d565b805b82525050565b60208101610cb58284611a13565b6001600160a01b031690565b6000610cb582611a29565b611a4981611a35565b811461045e57600080fd5b8035610cb581611a40565b600060208284031215611a7457611a74600080fd5b60006110d08484611a54565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611aa982611a80565b81018181106001600160401b0382111715611ac657611ac6611a8a565b6040525050565b6000611ad860405190565b9050611ae48282611aa0565b919050565b60006001600160401b03821115611b0257611b02611a8a565b611b0b82611a80565b60200192915050565b82818337506000910152565b6000611b33611b2e84611ae9565b611acd565b905082815260208101848484011115611b4e57611b4e600080fd5b611b59848285611b14565b509392505050565b600082601f830112611b7557611b75600080fd5b81356110d0848260208601611b20565b60008060408385031215611b9b57611b9b600080fd5b6000611ba78585611a54565b92505060208301356001600160401b03811115611bc657611bc6600080fd5b611bd285828601611b61565b9150509250929050565b6001600160401b031690565b611a4981611bdc565b8035610cb581611be8565b600060208284031215611c1157611c11600080fd5b60006110d08484611bf1565b611a1581611bdc565b60208101610cb58284611c1d565b801515611a15565b60208101610cb58284611c34565b611a1581611a35565b60208101610cb58284611c4a565b6000806000806000806000806000806101408b8d031215611c8457611c84600080fd5b6000611c908d8d611a54565b9a50506020611ca18d828e01611a54565b9950506040611cb28d828e01611a54565b9850506060611cc38d828e01611a54565b9750506080611cd48d828e01611a54565b96505060a0611ce58d828e01611a54565b95505060c0611cf68d828e01611a54565b94505060e0611d078d828e01611a54565b935050610100611d198d828e01611a54565b925050610120611d2b8d828e01611a54565b9150509295989b9194979a5092959850565b6000610cb5611d51611d4e84611a29565b90565b611a29565b6000610cb582611d3d565b6000610cb582611d56565b611a1581611d61565b60208101610cb58284611d6c565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000611dba82611bdc565b9150611dc583611bdc565b925082611dd457611dd4611d83565b500490565b8051610cb581611be8565b600060208284031215611df957611df9600080fd5b60006110d08484611dd9565b818102808215838204851417611e1d57611e1d611d99565b5092915050565b602c815260006020820160008051602061258f83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610cb581611e24565b602c815260006020820160008051602061258f83398151915281526b6163746976652070726f787960a01b60208201529150611e57565b60208082528101610cb581611e6e565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150611e57565b60208082528101610cb581611eb5565b8051610cb581611a40565b600060208284031215611f3a57611f3a600080fd5b60006110d08484611f1a565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c000000815291505b5060200190565b60208082528101610cb581611f46565b601881526000602082017741646472657373206d757374206e6f74206265207a65726f60401b81529150611f76565b60208082528101610cb581611f8d565b801515611a49565b8051610cb581611fcc565b600060208284031215611ff457611ff4600080fd5b60006110d08484611fd4565b634e487b7160e01b600052602160045260246000fd5b6008811061045e5761045e612000565b80611ae481612016565b6000610cb582612026565b611a1581612030565b60608101612052828661203b565b61205f6020830185611c4a565b6110d06040830184611c1d565b80611a49565b8051610cb58161206c565b60006020828403121561209257612092600080fd5b60006110d08484612072565b601d81526000602082017f496e73756666696369656e7420636f6c6c61746572616c2066756e647300000081529150611f76565b60208082528101610cb58161209e565b60006120ed82611bdc565b91506120f883611bdc565b9250508082016001600160401b03811115610cb557610cb5611d99565b600061212082611bdc565b915061212b83611bdc565b9250508181036001600160401b03811115610cb557610cb5611d99565b60ff8116611a49565b8051610cb581612148565b60006020828403121561217157612171600080fd5b60006110d08484612151565b600060ff8216915060ff8316611dc5565b600061219982611bdc565b91506121a483611bdc565b92508282026121b281611bdc565b9150808214611e1d57611e1d611d99565b604081016121d18285611c1d565b6119286020830184611c1d565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611e57565b60208082528101610cb5816121de565b600060ff8216610cb5565b611a1581612239565b60208101610cb58284612244565b81810381811115610cb557610cb5611d99565b6080810161227c828761203b565b6122896020830186611c4a565b6122966040830185611c1d565b6122a36060830184611a13565b95945050505050565b606081016122ba8286611c4a565b6122c76020830185611a13565b6110d06040830184611a13565b604081016122e28285611a13565b6119286020830184611c4a565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150611f76565b60208082528101610cb5816122ef565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150611e57565b60208082528101610cb581612330565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150611e57565b60208082528101610cb58161238b565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611e57565b60208082528101610cb5816123e1565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150611e57565b60208082528101610cb581612439565b60005b838110156124ae578181015183820152602001612496565b50506000910152565b60006124c1825190565b6124cf818560208601612493565b9290920192915050565b600061192882846124b7565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611f76565b60208082528101610cb5816124e5565b6000612533825190565b80845260208401935061254a818560208601612493565b61255381611a80565b9093019392505050565b60208082528101611928818461252956fe7f3309fe9c4f1dd0543c577ee6d481942b3cd4f7bf613fd056d1ba9084184f4846756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e8dc32f7ff473515f4880367cb057c194157b1c20f11f63217b6bb0bf134469c64736f6c63430008150033",
  "devdoc": {
    "details": "Manages the allocation of datacap for matched data storage after successful matching with Filecoin storage deals. Note:The removal of datacap is not necessary.     This design allocates datacap step by step according to chunks,     rather than allocating all at once.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addDatacapChunkCollateral(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching"
        }
      },
      "getAllocatedDatacap(uint64)": {
        "details": "Gets the allocated matched datacap for a matching process.",
        "params": {
          "_matchingId": "The ID of the matching process."
        },
        "returns": {
          "_0": "The allocated datacap size."
        }
      },
      "getAvailableDatacap(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching process."
        },
        "returns": {
          "_0": "The available datacap size."
        }
      },
      "getRemainingUnallocatedDatacap(uint64)": {
        "details": "Gets the remaining datacap size needed to be allocated for a matching process.",
        "params": {
          "_matchingId": "The ID of the matching process."
        },
        "returns": {
          "_0": "The remaining datacap size needed."
        }
      },
      "getTotalDatacapAllocationRequirement(uint64)": {
        "details": "Gets the total datacap size needed to be allocated for a matching process.",
        "params": {
          "_matchingId": "The ID of the matching process."
        },
        "returns": {
          "_0": "The total datacap size needed."
        }
      },
      "isNextDatacapAllocationValid(uint64)": {
        "details": "Checks if the next datacap allocation is allowed for a matching process.",
        "params": {
          "_matchingId": "The ID of the matching process."
        },
        "returns": {
          "_0": "True if next allocation is allowed, otherwise false."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "requestAllocateDatacap(uint64)": {
        "details": "Requests the allocation of matched datacap for a matching process.",
        "params": {
          "_matchingId": "The ID of the matching process."
        }
      },
      "updatedDatacapChunkBurnFunds(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching"
        },
        "returns": {
          "_0": "The updated burn funds required"
        }
      },
      "updatedDatacapChunkCollateralFunds(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching"
        },
        "returns": {
          "_0": "The updated collateral funds required"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Datacap",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AllocatedDatacapExceedsTotalRequirement(uint64,uint64)": [
        {
          "notice": "datacap errors"
        }
      ]
    },
    "events": {
      "DatacapAllocated(uint64,uint64)": {
        "notice": "notice:  Event emitted when datacap is allocated to a matching"
      },
      "DatacapChunkCollateral(uint64,address,uint256,uint256)": {
        "notice": "notice:  Event emitted when chunk datacap is collateral to a matching"
      }
    },
    "kind": "user",
    "methods": {
      "addDatacapChunkCollateral(uint64)": {
        "notice": "Add collateral funds for allocating datacap chunk"
      },
      "getAvailableDatacap(uint64)": {
        "notice": "Gets the available datacap that can still be allocated for a matching process."
      },
      "getCollateralRequirement()": {
        "notice": "Get collateral funds requirement for allocate chunk datacap"
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "initialize(address,address,address,address,address,address,address,address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "updatedDatacapChunkBurnFunds(uint64)": {
        "notice": "Get the updated burn funds for datacap chunk based on real-time business data"
      },
      "updatedDatacapChunkCollateralFunds(uint64)": {
        "notice": "Get the updated collateral funds for datacap chunk based on real-time business data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31071,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "allocatedDatacaps",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint64,t_uint64)"
      },
      {
        "astId": 31073,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 31076,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "roles",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IRoles)29558"
      },
      {
        "astId": 31079,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "escrow",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IEscrow)29288"
      },
      {
        "astId": 31082,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "filplus",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IFilplus)29518"
      },
      {
        "astId": 31085,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "filecoin",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IFilecoin)29330"
      },
      {
        "astId": 31088,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "carstore",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(ICarstore)29050"
      },
      {
        "astId": 31091,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "matchings",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IMatchings)30370"
      },
      {
        "astId": 31094,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "matchingsTarget",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IMatchingsTarget)30632"
      },
      {
        "astId": 31097,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "matchingsBids",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IMatchingsBids)30464"
      },
      {
        "astId": 31100,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "storages",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IStorages)30753"
      },
      {
        "astId": 31105,
        "contract": "src/v0.8/module/datacap/Datacaps.sol:Datacaps",
        "label": "__gap",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICarstore)29050": {
        "encoding": "inplace",
        "label": "contract ICarstore",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)29288": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IFilecoin)29330": {
        "encoding": "inplace",
        "label": "contract IFilecoin",
        "numberOfBytes": "20"
      },
      "t_contract(IFilplus)29518": {
        "encoding": "inplace",
        "label": "contract IFilplus",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchings)30370": {
        "encoding": "inplace",
        "label": "contract IMatchings",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsBids)30464": {
        "encoding": "inplace",
        "label": "contract IMatchingsBids",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsTarget)30632": {
        "encoding": "inplace",
        "label": "contract IMatchingsTarget",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)29558": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_contract(IStorages)30753": {
        "encoding": "inplace",
        "label": "contract IStorages",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}