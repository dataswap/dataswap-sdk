{
  "address": "0xF24C489622f7c5855a239A3b967DD3E4C1E51795",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "DatasetChallengeProofsSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "datasetProof",
      "outputs": [
        {
          "internalType": "contract IDatasetsProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "getChallengeCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_auditor",
          "type": "address"
        }
      ],
      "name": "getDatasetChallengeProofs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "_siblings",
          "type": "bytes32[][]"
        },
        {
          "internalType": "uint32[]",
          "name": "_paths",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "getDatasetChallengeProofsCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetProof",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merkleUtils",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_auditor",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_randomSeed",
          "type": "uint64"
        }
      ],
      "name": "isDatasetChallengeProofDuplicate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleUtils",
      "outputs": [
        {
          "internalType": "contract IMerkleUtils",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract IRoles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_randomSeed",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_leaves",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "_siblings",
          "type": "bytes32[][]"
        },
        {
          "internalType": "uint32[]",
          "name": "_paths",
          "type": "uint32[]"
        }
      ],
      "name": "submitDatasetChallengeProofs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "86ceebc14306f94d4b734206564c3c08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"DatasetChallengeProofsSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"datasetProof\",\"outputs\":[{\"internalType\":\"contract IDatasetsProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"getChallengeCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"getDatasetChallengeProofs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_siblings\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint32[]\",\"name\":\"_paths\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"getDatasetChallengeProofsCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetProof\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merkleUtils\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_auditor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_randomSeed\",\"type\":\"uint64\"}],\"name\":\"isDatasetChallengeProofDuplicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleUtils\",\"outputs\":[{\"internalType\":\"contract IMerkleUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract IRoles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_randomSeed\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_siblings\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint32[]\",\"name\":\"_paths\",\"type\":\"uint32[]\"}],\"name\":\"submitDatasetChallengeProofs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is intended to be inherited by specific dataset-related contracts.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"getChallengeCount(uint64)\":{\"params\":{\"_datasetId\":\"The ID of the dataset for which proof is submitted.\"}},\"getDatasetChallengeProofs(uint64,address)\":{\"params\":{\"_auditor\":\"The auditor of the dataset for which challenge proof is submitted.\",\"_datasetId\":\"The ID of the dataset for which proof is submitted.\"}},\"getDatasetChallengeProofsCount(uint64)\":{\"params\":{\"_datasetId\":\"The ID of the dataset for which proof is submitted.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"DatasetsChallenge Contract\",\"version\":1},\"userdoc\":{\"events\":{\"DatasetChallengeProofsSubmitted(uint64,address)\":{\"notice\":\"Event emitted when a dataset is verified.\"}},\"kind\":\"user\",\"methods\":{\"getChallengeCount(uint64)\":{\"notice\":\"Get a dataset challenge count\"},\"getDatasetChallengeProofs(uint64,address)\":{\"notice\":\"Get dataset challenge proofs\"},\"getDatasetChallengeProofsCount(uint64)\":{\"notice\":\"Get count of dataset chellange proofs.\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"initialize(address,address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"isDatasetChallengeProofDuplicate(uint64,address,uint64)\":{\"notice\":\"Check if the challenge proof is a duplicate.\"},\"merkleUtils()\":{\"notice\":\"get  merkle utils\"},\"submitDatasetChallengeProofs(uint64,uint64,bytes32[],bytes32[][],uint32[])\":{\"notice\":\"Submit challenge proof for a dataset Based on merkle proof challenge. random challenge method is used to reduce the amount of data and calculation while ensuring algorithm security.\"}},\"notice\":\"This contract serves as the base for managing DatasetChallengeProof.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/dataset/DatasetsChallenge.sol\":\"DatasetsChallenge\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030363434343639383630\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to init the dependencies of a filecoin.\\n    function initDependencies(address _datacap) external;\\n\\n    /// @notice The function to allocate the datacap of a storage deal.\\n    function allocateDatacap(uint64 client, uint256 _size) external;\\n\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0x5f39c709a0e57fa50f9f38e8fa5eb7c311e9700bc32bea042e8b1cf0c452ad2f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsChallenge.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsChallenge\\ninterface IDatasetsChallenge {\\n    ///@notice Submit challenge proof for a dataset\\n    /// Based on merkle proof challenge.\\n    /// random challenge method is used to reduce the amount of data and calculation while ensuring algorithm security.\\n    function submitDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        uint64 _randomSeed,\\n        bytes32[] memory _leaves,\\n        bytes32[][] memory _siblings,\\n        uint32[] memory _paths\\n    ) external;\\n\\n    ///@notice Get dataset challenge proofs\\n    function getDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        address _auditor\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32[] memory,\\n            bytes32[][] memory _siblings,\\n            uint32[] memory _paths\\n        );\\n\\n    ///@notice Get count of dataset challenge proofs\\n    function getDatasetChallengeProofsCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Checking if duplicate verifications of the Dataset\\n    function isDatasetChallengeProofDuplicate(\\n        uint64 _datasetId,\\n        address _auditor,\\n        uint64 _randomSeed\\n    ) external view returns (bool);\\n\\n    /// @notice Get a dataset challenge count\\n    function getChallengeCount(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    /// @notice get  merkle utils\\n    function merkleUtils() external view returns (IMerkleUtils);\\n}\\n\",\"keccak256\":\"0x81be54ccad5287408baa52cf615414ee7649cd7acb78c0057dff37793a95c470\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsProof.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsProof\\ninterface IDatasetsProof {\\n    ///@notice Submit proof root for a dataset\\n    function submitDatasetProofRoot(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        string calldata _mappingFilesAccessMethod,\\n        bytes32 _rootHash\\n    ) external;\\n\\n    ///@notice Submit proof for a dataset\\n    function submitDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        bytes32[] memory _leafHashes,\\n        uint64 _leafIndex,\\n        uint64[] memory _leafSizes,\\n        bool _completed\\n    ) external;\\n\\n    ///@notice Submit proof completed for a dataset\\n    function submitDatasetProofCompleted(uint64 _datasetId) external;\\n\\n    /// @notice Append dataset collateral funds\\n    function appendDatasetCollateral(uint64 _datasetId) external payable;\\n\\n    /// @notice Get dataset need append collateral funds\\n    function getDatasetAppendCollateral(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCars(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    function getDatasetProofCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset proof's submitter\\n    function getDatasetProofSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCarsCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset size\\n    function getDatasetSize(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset minimum conditional\\n    function getDatasetCollateralRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Check if a dataset has a car id\\n    function isDatasetContainsCar(\\n        uint64 _datasetId,\\n        uint64 _id\\n    ) external returns (bool);\\n\\n    ///@notice Check if a dataset has car ids\\n    function isDatasetContainsCars(\\n        uint64 _datasetId,\\n        uint64[] memory _ids\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset has submitter\\n    function isDatasetProofSubmitter(\\n        uint64 _datasetId,\\n        address _submitter\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset proof all completed\\n    function isDatasetProofallCompleted(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe6f984da1ffcf0bb6dec2e79a232f394d564107972c727420d21a2d084c0a584\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsRequirement\\ninterface IDatasetsRequirement {\\n    ///@notice Submit storage requirement for a dataset\\n    ///        Note: submmiter of dataset can submit dataset storage requirement\\n    function submitDatasetReplicaRequirements(\\n        uint64 _datasetId,\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external payable;\\n\\n    ///@notice Get dataset replicas count\\n    function getDatasetReplicasCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Get dataset replica requirement\\n    function getDatasetReplicaRequirement(\\n        uint64 _datasetId,\\n        uint64 _index\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            address[] memory,\\n            uint16,\\n            uint16,\\n            uint32[] memory\\n        );\\n\\n    ///@notice Get dataset pre conditional\\n    function getDatasetPreCollateralRequirements(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7dc6c2d7dfaa3f6aaa56052304f36adda27182c1c34e7d6fead3671245d3e9bc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/DatasetsChallenge.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IDatasetsChallenge} from \\\"src/v0.8/interfaces/module/IDatasetsChallenge.sol\\\";\\nimport {IDatasetsProof} from \\\"src/v0.8/interfaces/module/IDatasetsProof.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n///shared\\nimport {DatasetsEvents} from \\\"src/v0.8/shared/events/DatasetsEvents.sol\\\";\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\n/// library\\nimport {DatasetChallengeProofLIB} from \\\"src/v0.8/module/dataset/library/challenge/DatasetChallengeProofLIB.sol\\\";\\n\\n/// type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title DatasetsChallenge Contract\\n/// @notice This contract serves as the base for managing DatasetChallengeProof.\\n/// @dev This contract is intended to be inherited by specific dataset-related contracts.\\ncontract DatasetsChallenge is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IDatasetsChallenge,\\n    CarstoreModifiers\\n{\\n    using DatasetChallengeProofLIB for DatasetType.DatasetChallengeProof;\\n    mapping(uint64 => DatasetType.DatasetChallengeProof)\\n        private datasetChallengeProofs; // Mapping of dataset ID to dataset details\\n\\n    address public governanceAddress;\\n    IRoles public roles;\\n    IMerkleUtils public merkleUtils;\\n    IDatasetsProof public datasetProof;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _datasetProof,\\n        address _merkleUtils\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        datasetProof = IDatasetsProof(_datasetProof);\\n        merkleUtils = IMerkleUtils(_merkleUtils);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    ///@notice Submit challenge proof for a dataset\\n    /// Based on merkle proof challenge.\\n    /// random challenge method is used to reduce the amount of data and calculation while ensuring algorithm security.\\n    function submitDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        uint64 _randomSeed,\\n        bytes32[] memory _leaves,\\n        bytes32[][] memory _siblings,\\n        uint32[] memory _paths\\n    ) external onlyRole(roles, RolesType.DATASET_AUDITOR) {\\n        DatasetType.DatasetChallengeProof\\n            storage datasetChallengeProof = datasetChallengeProofs[_datasetId];\\n        bytes32[] memory roots = _getChallengeRoots(\\n            _datasetId,\\n            _randomSeed,\\n            getChallengeCount(_datasetId)\\n        );\\n        datasetChallengeProof._submitDatasetChallengeProofs(\\n            _randomSeed,\\n            _leaves,\\n            _siblings,\\n            _paths,\\n            roots,\\n            merkleUtils\\n        );\\n        emit DatasetsEvents.DatasetChallengeProofsSubmitted(\\n            _datasetId,\\n            msg.sender\\n        );\\n    }\\n\\n    ///@notice Get dataset challenge proofs\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    /// @param _auditor The auditor of the dataset for which challenge proof is submitted.\\n    function getDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        address _auditor\\n    )\\n        public\\n        view\\n        onlyNotZero(_datasetId)\\n        returns (\\n            bytes32[] memory,\\n            bytes32[][] memory _siblings,\\n            uint32[] memory _paths\\n        )\\n    {\\n        DatasetType.DatasetChallengeProof\\n            storage datasetChallengeProof = datasetChallengeProofs[_datasetId];\\n        return datasetChallengeProof.getDatasetChallengeProofs(_auditor);\\n    }\\n\\n    ///@notice Get count of dataset chellange proofs.\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    function getDatasetChallengeProofsCount(\\n        uint64 _datasetId\\n    ) public view onlyNotZero(_datasetId) returns (uint16) {\\n        DatasetType.DatasetChallengeProof\\n            storage datasetChallengeProof = datasetChallengeProofs[_datasetId];\\n        return datasetChallengeProof.getDatasetChallengeProofsCount();\\n    }\\n\\n    ///@notice Check if the challenge proof is a duplicate.\\n    function isDatasetChallengeProofDuplicate(\\n        uint64 _datasetId,\\n        address _auditor,\\n        uint64 _randomSeed\\n    ) public view returns (bool) {\\n        DatasetType.DatasetChallengeProof\\n            storage datasetChallengeProof = datasetChallengeProofs[_datasetId];\\n        return\\n            datasetChallengeProof.isDatasetChallengeProofDuplicate(\\n                _auditor,\\n                _randomSeed\\n            );\\n    }\\n\\n    ///@notice Get a dataset challenge count\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    function getChallengeCount(uint64 _datasetId) public view returns (uint64) {\\n        uint32 smallDataSet = 1000;\\n        uint64 carCount = datasetProof.getDatasetProofCount(\\n            _datasetId,\\n            DatasetType.DataType.Source\\n        );\\n        if (carCount < smallDataSet) {\\n            return 1;\\n        } else {\\n            return carCount / smallDataSet + 1;\\n        }\\n    }\\n\\n    /// @notice generate cars challenge.\\n    /// @dev This function returns the cars Challenge information for a specific dataset.\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    /// @param _randomSeed The cars challenge random seed.\\n    /// @param _carChallengesCount the cars Challenge count for specific dataset.\\n    function _getChallengeRoots(\\n        uint64 _datasetId,\\n        uint64 _randomSeed,\\n        uint64 _carChallengesCount\\n    ) internal view returns (bytes32[] memory) {\\n        bytes32[] memory carChallenges = new bytes32[](_carChallengesCount);\\n        for (uint64 i = 0; i < _carChallengesCount; i++) {\\n            carChallenges[i] = _getChallengeRoot(\\n                _datasetId,\\n                _randomSeed,\\n                i,\\n                _carChallengesCount\\n            );\\n        }\\n        return carChallenges;\\n    }\\n\\n    /// @notice generate a car challenge.\\n    /// @dev This function returns a car Challenge information for a specific dataset.\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    /// @param _randomSeed The cars challenge random seed.\\n    /// @param _index The car index of challenge.\\n    /// @param _carChallengesCount the cars Challenge count for specific dataset.\\n    function _getChallengeRoot(\\n        uint64 _datasetId,\\n        uint64 _randomSeed,\\n        uint64 _index,\\n        uint64 _carChallengesCount\\n    ) internal view returns (bytes32) {\\n        uint64 index = DatasetChallengeProofLIB.generateChallengeIndex(\\n            _randomSeed,\\n            _index,\\n            _carChallengesCount\\n        );\\n\\n        return\\n            datasetProof.getDatasetProof(\\n                _datasetId,\\n                DatasetType.DataType.Source,\\n                index,\\n                1\\n            )[0];\\n    }\\n}\\n\",\"keccak256\":\"0x2bf59163cb321da98204e7b7471e42f0847937cd07a9cee5684d8bc310e4f848\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/challenge/DatasetChallengeLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\nlibrary DatasetChallengeLIB {\\n    function setChallengeProof(\\n        DatasetType.Challenge memory self,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) internal pure {\\n        for (uint256 i = 0; i < _siblings.length; i++) {\\n            self.siblings[i] = _siblings[i];\\n        }\\n        self.leaf = _leaf;\\n        self.path = _path;\\n    }\\n\\n    function getChallengeProof(\\n        DatasetType.Challenge storage self\\n    )\\n        internal\\n        view\\n        returns (bytes32 _leaf, bytes32[] memory _siblings, uint32 _path)\\n    {\\n        bytes32[] memory result = new bytes32[](self.siblings.length);\\n        bytes32 leaf;\\n        uint32 path;\\n        for (uint256 i = 0; i < self.siblings.length; i++) {\\n            result[i] = self.siblings[i];\\n        }\\n        leaf = self.leaf;\\n        path = self.path;\\n        return (leaf, result, path);\\n    }\\n}\\n\",\"keccak256\":\"0x569c65f904431cb6d437349164941bccf88ac81a7a29f8c1d9d0bfd6ceba918c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/challenge/DatasetChallengeProofLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\nimport {DatasetProofLIB} from \\\"src/v0.8/module/dataset/library/proof/DatasetProofLIB.sol\\\";\\nimport {DatasetChallengeLIB} from \\\"src/v0.8/module/dataset/library/challenge/DatasetChallengeLIB.sol\\\";\\n\\n/// @title DatasetVerificationLIB Library,include add,get,verify.\\n/// @notice This library provides functions for managing verification associated with datasets.\\n/// @dev Note:Need to check carefully,Need rewrite verification logic.\\nlibrary DatasetChallengeProofLIB {\\n    using DatasetProofLIB for DatasetType.DatasetProof;\\n    using DatasetChallengeLIB for DatasetType.Challenge;\\n\\n    /// @notice Submit a challenge proofs for a dataset.\\n    /// @dev This function allows submitting a challenge proofs for a dataset and triggers appropriate actions based on challenge results.\\n    /// @param self The dataset to which the challenge proofs will be submitted.\\n    function _submitDatasetChallengeProofs(\\n        DatasetType.DatasetChallengeProof storage self,\\n        uint64 _randomSeed,\\n        bytes32[] memory _leaves,\\n        bytes32[][] memory _siblings,\\n        uint32[] memory _paths,\\n        bytes32[] memory _roots,\\n        IMerkleUtils _merkle\\n    ) internal returns (bool) {\\n        //For each challenge proofs submitted by an auditor, the random seed must be different.\\n        require(\\n            !isDatasetChallengeProofDuplicate(self, msg.sender, _randomSeed),\\n            \\\"Verification is duplicate\\\"\\n        );\\n        require(_randomSeed > 0, \\\"Invalid random seed\\\");\\n\\n        if (\\n            !_requireValidChallengeProofs(\\n                _leaves,\\n                _siblings,\\n                _paths,\\n                _roots,\\n                _merkle\\n            )\\n        ) {\\n            return false;\\n        }\\n\\n        // Update the dataset state here\\n        self.challengesCount++;\\n        DatasetType.ChallengeProof storage challengeProof = self\\n            .challengeProofs[msg.sender];\\n        for (uint32 i = 0; i < _paths.length; i++) {\\n            DatasetType.Challenge memory challenge;\\n            challenge.siblings = new bytes32[](_siblings[i].length);\\n            challenge.setChallengeProof(_leaves[i], _siblings[i], _paths[i]);\\n            challengeProof.challenges.push(challenge);\\n        }\\n        // Recording the auditor\\n        self.auditors.push(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /// @notice Validates the submitted challenge proofs.\\n    /// @dev This function checks the validity of the submitted Merkle proofs for both the source dataset and mapping files.\\n    // solhint-disable-next-line\\n    function _requireValidChallengeProofs(\\n        bytes32[] memory _leaves,\\n        bytes32[][] memory _siblings,\\n        uint32[] memory _paths,\\n        bytes32[] memory roots,\\n        IMerkleUtils _merkle\\n    ) private view returns (bool) {\\n        require(\\n            roots.length == _leaves.length,\\n            \\\"roots.length != _leaves.length\\\"\\n        );\\n        require(\\n            roots.length == _siblings.length,\\n            \\\"roots.length != _siblings.length\\\"\\n        );\\n        require(roots.length == _paths.length, \\\"roots.length != _paths.length\\\");\\n\\n        for (uint32 i = 0; i < roots.length; i++) {\\n            if (\\n                !_merkle.isValidMerkleProof(\\n                    roots[i],\\n                    _leaves[i],\\n                    _siblings[i],\\n                    _paths[i]\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Get the challenge proofs details for a specific index of a dataset.\\n    /// @dev This function returns the challenge proofs details for a specific challenge proofs conducted on the dataset.\\n    /// @param self The dataset for which to retrieve challenge proofs details.\\n    /// @param _auditor address of the auditor.\\n    function getDatasetChallengeProofs(\\n        DatasetType.DatasetChallengeProof storage self,\\n        address _auditor\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory, bytes32[][] memory, uint32[] memory)\\n    {\\n        DatasetType.ChallengeProof storage challengeProof = self\\n            .challengeProofs[_auditor];\\n        bytes32[][] memory siblingss = new bytes32[][](\\n            challengeProof.challenges.length\\n        );\\n        uint32[] memory paths = new uint32[](challengeProof.challenges.length);\\n        bytes32[] memory leaves = new bytes32[](\\n            challengeProof.challenges.length\\n        );\\n\\n        for (uint256 i = 0; i < challengeProof.challenges.length; i++) {\\n            DatasetType.Challenge storage challenge = challengeProof.challenges[\\n                i\\n            ];\\n            (bytes32 leaf, bytes32[] memory siblings, uint32 path) = challenge\\n                .getChallengeProof();\\n            leaves[i] = leaf;\\n            siblingss[i] = siblings;\\n            paths[i] = path;\\n        }\\n        return (leaves, siblingss, paths);\\n    }\\n\\n    /// @notice Get the count of challenge proofs for a dataset.\\n    /// @dev This function returns the count of challenge proofs conducted on the dataset.\\n    /// @param self The dataset for which to retrieve the challenge proofs count.\\n    function getDatasetChallengeProofsCount(\\n        DatasetType.DatasetChallengeProof storage self\\n    ) internal view returns (uint16) {\\n        return self.challengesCount;\\n    }\\n\\n    /// @notice Check if the challange proof is a duplicate.\\n    /// @param self The dataset for which to retrieve challenge proof details.\\n    /// @param _auditor The address of the auditor submitting the challenge proof.\\n    /// @param _randomSeed The random value used for selecting the challenge point.\\n    function isDatasetChallengeProofDuplicate(\\n        DatasetType.DatasetChallengeProof storage self,\\n        address _auditor,\\n        uint64 _randomSeed\\n    ) internal view returns (bool) {\\n        for (uint32 i = 0; i < self.auditors.length; i++) {\\n            if (self.auditors[i] == _auditor) return true;\\n            DatasetType.ChallengeProof storage verification = self\\n                .challengeProofs[_auditor];\\n            if (verification.randomSeed == _randomSeed) return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice generate a car challenge index.\\n    /// @dev This function returns a car Challenge information for a specific dataset.\\n    /// @param _randomSeed The cars challenge random seed.\\n    /// @param _index The car index of challenge.\\n    /// @param _carChallengesCount the cars Challenge count for specific dataset.\\n    function generateChallengeIndex(\\n        uint64 _randomSeed,\\n        uint64 _index,\\n        uint64 _carChallengesCount\\n    ) internal pure returns (uint64) {\\n        // Convert randomness and index to bytes\\n        bytes memory input = new bytes(16);\\n\\n        bytes8 randomSeedBytes = bytes8(_randomSeed);\\n        bytes8 indexBytes = bytes8(_index);\\n\\n        // LittleEndian encode\\n        for (uint256 i = 0; i < 8; i++) {\\n            input[i] = randomSeedBytes[7 - i];\\n            input[i + 8] = indexBytes[7 - i];\\n        }\\n        // Calculate SHA-256 hash\\n        bytes32 hash = sha256(input);\\n\\n        uint64 carChallenge;\\n        // from golang binary.LittleEndian.Uint64\\n        for (uint256 i = 0; i < 8; i++) {\\n            carChallenge |= uint64(uint8(hash[i])) << uint64(i * 8);\\n        }\\n\\n        return carChallenge % _carChallengesCount;\\n    }\\n}\\n\",\"keccak256\":\"0x48028b64e7f1ed4e72de88b48061277fda70c6d0899562bf22eec45a283234cb\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/metadata/DatasetStateMachineLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title DatasetStateMachineLIB Library,include add,get,verify.\\n/// @notice This library defines the state machine for managing the states of datasets.\\nlibrary DatasetStateMachineLIB {\\n    /// @notice Post an event for a dataset.\\n    /// @dev This function updates the dataset's state based on the event and emits the corresponding event.\\n    /// @param self The dataset for which the event will be posted.\\n    /// @param _event The event to be posted.\\n    function _emitDatasetEvent(\\n        DatasetType.Dataset storage self,\\n        DatasetType.Event _event\\n    ) internal {\\n        DatasetType.State currentState = self.state;\\n        DatasetType.State newState;\\n        // Apply the state transition based on the event\\n        if (_event == DatasetType.Event.SubmitMetadata) {\\n            if (currentState == DatasetType.State.None) {\\n                newState = DatasetType.State.MetadataSubmitted;\\n            }\\n        } else if (_event == DatasetType.Event.MetadataApproved) {\\n            if (currentState == DatasetType.State.MetadataSubmitted) {\\n                newState = DatasetType.State.MetadataApproved;\\n            }\\n        } else if (_event == DatasetType.Event.MetadataRejected) {\\n            if (currentState == DatasetType.State.MetadataSubmitted) {\\n                newState = DatasetType.State.MetadataRejected;\\n            }\\n        } else if (_event == DatasetType.Event.NotEnoughCollateral) {\\n            if (currentState == DatasetType.State.MetadataApproved) {\\n                newState = DatasetType.State.CollateralNotEnough;\\n            }\\n        } else if (_event == DatasetType.Event.EnoughCollateral) {\\n            if (currentState == DatasetType.State.CollateralNotEnough) {\\n                newState = DatasetType.State.MetadataApproved;\\n            }\\n        } else if (_event == DatasetType.Event.SubmitDatasetProof) {\\n            if (currentState == DatasetType.State.MetadataApproved) {\\n                newState = DatasetType.State.DatasetProofSubmitted;\\n            }\\n        } else if (_event == DatasetType.Event.DatasetApproved) {\\n            if (currentState == DatasetType.State.DatasetProofSubmitted) {\\n                newState = DatasetType.State.DatasetApproved;\\n            }\\n        } else if (_event == DatasetType.Event.DatasetRejected) {\\n            if (currentState == DatasetType.State.DatasetProofSubmitted) {\\n                newState = DatasetType.State.MetadataApproved;\\n            }\\n        }\\n\\n        // Update the state if newState is not None (i.e., a valid transition)\\n        if (newState != DatasetType.State.None) {\\n            self.state = newState;\\n        }\\n    }\\n\\n    /// @notice Get the state of a dataset.\\n    /// @dev This function returns the current state of a dataset.\\n    /// @param self The dataset for which to retrieve the state.\\n    /// @return The current state of the dataset.\\n    function getDatasetState(\\n        DatasetType.Dataset storage self\\n    ) internal view returns (DatasetType.State) {\\n        return self.state;\\n    }\\n}\\n\",\"keccak256\":\"0x5c973fe363d8544a1a4eabde5a0fc24b0ca3b50e6575fecd90d390b89d7de627\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/proof/DatasetProofInnerLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {DatasetStateMachineLIB} from \\\"src/v0.8/module/dataset/library/metadata/DatasetStateMachineLIB.sol\\\";\\n\\nlibrary DatasetProofInnerLIB {\\n    using DatasetStateMachineLIB for DatasetType.Dataset;\\n\\n    /// @notice Set the root hash of the data's Merkle tree for a dataset proof.\\n    /// @dev This function allows setting the root hash of the Merkle tree associated with a dataset proof.\\n    /// @param self The dataset proof to which the root hash will be set.\\n    /// @param _rootHash The root hash of the data's Merkle tree.\\n    function setRootHash(\\n        DatasetType.Proof storage self,\\n        bytes32 _rootHash\\n    ) internal {\\n        self.rootHash = _rootHash;\\n    }\\n\\n    /// @notice Get the root hash of the data's Merkle tree from a dataset proof.\\n    /// @dev This function allows getting the root hash of the Merkle tree associated with a dataset proof.\\n    /// @param self The dataset proof from which the root hash will be retrieved.\\n    /// @return The root hash of the data's Merkle tree.\\n    function getRootHash(\\n        DatasetType.Proof storage self\\n    ) internal view returns (bytes32) {\\n        return self.rootHash;\\n    }\\n\\n    /// @notice Set the completion status for all proof batches in a dataset proof.\\n    /// @dev This function allows setting the completion status for all proof batches in a dataset proof.\\n    /// @param self The dataset proof for which the completion status will be set.\\n    /// @param _completed The completion status to be set.\\n    function setAllCompleted(\\n        DatasetType.Proof storage self,\\n        bool _completed\\n    ) internal {\\n        self.allCompleted = _completed;\\n    }\\n\\n    /// @notice Get the completion status for all proof batches in a dataset proof.\\n    /// @dev This function allows getting the completion status for all proof batches in a dataset proof.\\n    /// @param self The dataset proof from which the completion status will be retrieved.\\n    /// @return The completion status for all proof batches.\\n    function getAllCompleted(\\n        DatasetType.Proof storage self\\n    ) internal view returns (bool) {\\n        return self.allCompleted;\\n    }\\n\\n    /// @notice Set a specific proof batch for a dataset proof.\\n    /// @dev This function allows setting a specific proof batch in a dataset proof.\\n    /// @param self The dataset proof to which the proof batch will be added.\\n    /// @param _leafHashes Array of leaf hashes representing items in the data.\\n    /// @param _leafIndex The sizes of the leaf hashes.\\n    function addProofBatch(\\n        DatasetType.Proof storage self,\\n        uint64[] memory _leafHashes,\\n        uint64 _leafIndex\\n    ) internal {\\n        uint64 index = _leafIndex;\\n        for (uint64 i; i < _leafHashes.length; i++) {\\n            require(index == self.leafHashesCount, \\\"index must match Count\\\");\\n            index++;\\n            self.leafHashesCount++;\\n            self.leafHashes.push(_leafHashes[i]);\\n        }\\n    }\\n\\n    /// @notice Get a specific proof batch from a dataset proof.\\n    /// @dev This function allows getting a specific proof batch from a dataset proof.\\n    /// @param self The dataset proof from which the proof batch will be retrieved.\\n    function getProof(\\n        DatasetType.Proof storage self,\\n        uint64 _index,\\n        uint64 _len\\n    ) internal view returns (uint64[] memory) {\\n        require(\\n            _index + _len <= self.leafHashes.length,\\n            \\\"Index+len out of bounds\\\"\\n        );\\n        require(\\n            self.leafHashesCount == self.leafHashes.length,\\n            \\\"length must matched\\\"\\n        );\\n        uint64[] memory result = new uint64[](_len);\\n        for (uint64 i = 0; i < _len; i++) {\\n            result[i] = self.leafHashes[i + _index];\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x736319998a408d961dd0c8ae7bf8fd0d1f02c530c2be15bf2528e3772c488e2b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/proof/DatasetProofLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {DatasetProofInnerLIB} from \\\"src/v0.8/module/dataset/library/proof/DatasetProofInnerLIB.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n\\n/// @title DatasetProofLIB Library,include add,get,verify.\\n/// @notice This library provides functions for managing proofs associated with datasets.\\nlibrary DatasetProofLIB {\\n    using DatasetProofInnerLIB for DatasetType.Proof;\\n\\n    /// @notice Submit a proof root for a dataset.\\n    /// @dev This function allows submitting a proof root for a dataset and emits the SubmitDatasetProof event.\\n    /// @param self The dataset to which the proof will be submitted.\\n    /// @param _dataType The type of the dataset proof.\\n    /// @param _rootHash The root hash of the dataset proofs.\\n    function addDatasetProofRoot(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType,\\n        bytes32 _rootHash\\n    ) internal {\\n        DatasetType.Proof storage proof;\\n        if (_dataType == DatasetType.DataType.Source) {\\n            proof = self.sourceProof;\\n        } else {\\n            proof = self.mappingFilesProof;\\n        }\\n        if (proof.leafHashesCount == 0) {\\n            require(_rootHash.length == 32, \\\"length must matched\\\");\\n            proof.rootHash = _rootHash;\\n        }\\n    }\\n\\n    /// @notice Submit a proof for a dataset.\\n    /// @dev This function allows submitting a proof for a dataset and emits the SubmitDatasetProof event.\\n    /// @param self The dataset to which the proof will be submitted.\\n    /// @param _dataType The type of the dataset proof.\\n    /// @param _leafHashes The leaf hashes of the proof.\\n    /// @param _leafIndex The sizes of the leaf hashes.\\n    /// @param _size The total size of the leaf hashes.\\n    /// @param _allCompleted A boolean indicating if the proof is completed.\\n    function addDatasetProofBatch(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType,\\n        uint64[] memory _leafHashes,\\n        uint64 _leafIndex,\\n        uint64 _size,\\n        bool _allCompleted\\n    ) internal {\\n        DatasetType.Proof storage proof;\\n        if (_dataType == DatasetType.DataType.Source) {\\n            proof = self.sourceProof;\\n        } else {\\n            proof = self.mappingFilesProof;\\n        }\\n\\n        if (proof.allCompleted == false && _allCompleted == true)\\n            proof.allCompleted = _allCompleted;\\n        proof.addProofBatch(_leafHashes, _leafIndex);\\n\\n        proof.datasetSize += _size;\\n    }\\n\\n    /// @notice Get the source dataset proof from the submitted dataset proof.\\n    /// @dev This function returns the root hash and array of leaf hashes of the Merkle proof for the source dataset.\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @param _dataType The type of the dataset proof.\\n    /// @param _index The starting index to get dataset proof..\\n    /// @param _len The length to get dataset proof..\\n    /// @return The car hashs of the dataset proof.\\n    function getDatasetProof(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) internal view returns (uint64[] memory) {\\n        DatasetType.Proof storage proof;\\n        if (_dataType == DatasetType.DataType.Source) {\\n            proof = self.sourceProof;\\n        } else {\\n            proof = self.mappingFilesProof;\\n        }\\n        return proof.getProof(_index, _len);\\n    }\\n\\n    /// @notice Get the source dataset proof from the submitted dataset proof.\\n    /// @dev This function returns the root hash and array of leaf hashes of the Merkle proof for the source dataset.\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @param _dataType The type of the dataset proof.\\n    /// @param _index The starting index to get dataset proof..\\n    /// @param _len The length to get dataset proof..\\n    /// @return The car hashs of the dataset proof.\\n    function getDatasetCars(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) internal view returns (uint64[] memory) {\\n        uint64[] memory hashes = getDatasetProof(self, _dataType, _index, _len);\\n        //TODO: hashes to cid\\n        return hashes;\\n    }\\n\\n    /// @notice Get the source dataset proof from the submitted dataset proof.\\n    /// @dev This function returns the root hash and array of leaf hashes of the Merkle proof for the source dataset.\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @param _dataType The type of the dataset proof.\\n    /// @return The count of the hashs of dataset proof.\\n    function getDatasetCount(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType\\n    ) internal view returns (uint64) {\\n        DatasetType.Proof storage proof;\\n        if (_dataType == DatasetType.DataType.Source) {\\n            proof = self.sourceProof;\\n        } else {\\n            proof = self.mappingFilesProof;\\n        }\\n        return proof.leafHashesCount;\\n    }\\n\\n    /// @notice Get the source dataset proof from the submitted dataset proof.\\n    /// @dev This function returns the root hash and array of leaf hashes of the Merkle proof for the source dataset.\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @param _dataType The type of the dataset proof.\\n    function getDatasetSize(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType\\n    ) internal view returns (uint64) {\\n        DatasetType.Proof storage proof;\\n        if (_dataType == DatasetType.DataType.Source) {\\n            proof = self.sourceProof;\\n        } else {\\n            proof = self.mappingFilesProof;\\n        }\\n        return proof.datasetSize;\\n    }\\n\\n    /// @notice Get submitter of dataset's proofs.\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @return The address of submitter\\n    function getDatasetSubmitter(\\n        DatasetType.DatasetProof storage self\\n    ) internal view returns (address) {\\n        return self.proofSubmitter;\\n    }\\n\\n    /// @notice Check if a dataset has submitter\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @param submitter The address being compared.\\n    function isDatasetSubmitter(\\n        DatasetType.DatasetProof storage self,\\n        address submitter\\n    ) internal view returns (bool) {\\n        if (submitter == self.proofSubmitter) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a dataset proof has completed\\n    /// @param self The dataset from which to retrieve the source dataset proof.\\n    /// @param _dataType The type of the dataset proof.\\n    function isDatasetProofallCompleted(\\n        DatasetType.DatasetProof storage self,\\n        DatasetType.DataType _dataType\\n    ) internal view returns (bool) {\\n        if (_dataType == DatasetType.DataType.Source) {\\n            return self.sourceProof.allCompleted;\\n        } else {\\n            return self.mappingFilesProof.allCompleted;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50fa437bb65dd0a80358f1ff13b986a967a366d718c29fb5a65f23b57f2f1911\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n    error NotEnough(uint256 amount, uint256 append);\\n}\\n\",\"keccak256\":\"0x9bb103e0cf0c9cd5a9d200382cc51060a2494f41b38ce2fda1d5762dd9306b94\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/DatasetsEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary DatasetsEvents {\\n    /// @notice Event emitted when metadata is approved for a dataset.\\n    event DatasetMetadataApproved(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when metadata is rejected for a dataset.\\n    event DatasetMetadataRejected(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when a dataset is approved.\\n    event DatasetApproved(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when a dataset is rejected.\\n    event DatasetRejected(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when metadata is submitted for a new dataset.\\n    event DatasetMetadataSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when replica requirement is submitted for a new dataset.\\n    event DatasetReplicaRequirementSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a dataset has not enough collateral.\\n    event CollateralNotEnough(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a dataset has enough collateral.\\n    event CollateralEnough(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a proof is submitted for a dataset.\\n    event DatasetProofSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a dataset is verified.\\n    event DatasetChallengeProofsSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _verifier\\n    );\\n    event LogMessage(\\n        address indexed sender,\\n        string message,\\n        uint256 v1,\\n        uint256 v2\\n    );\\n}\\n\",\"keccak256\":\"0xa31e6395bae096ef3eed31eb1558de10e69bca8633da5e2525e7e6580796e276\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        CollateralNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 client; // Filecoin actor id of the dataset's client.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x0eea4527c3d5df919e552d99d728ad823427974e4e01944efc8aadcf3744773b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0x3b6918e967adea47fceea5d699a40f86c24c9417379cd387071ee96bb246f7dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161292761004c6000396000818161043501528181610475015281816104fd0152818161053d01526105b901526129276000f3fe6080604052600436106100ad5760003560e01c80630465c1e1146100b25780630ecee42d146100e85780631fd40abb146101175780633659cfe614610144578063392f5f641461016657806347b0f08e146101935780634f1ef286146101b357806352d1902d146101c657806357ca304f146101e8578063795053d31461020857806396b1a02b14610235578063aaf10f4214610262578063cc22e64f14610277578063f8c8765e14610297575b600080fd5b3480156100be57600080fd5b506100d26100cd3660046117c1565b6102b7565b6040516100df91906117ee565b60405180910390f35b3480156100f457600080fd5b50610108610103366004611827565b610313565b6040516100df939291906119cd565b34801561012357600080fd5b506101376101323660046117c1565b610373565b6040516100df9190611a0f565b34801561015057600080fd5b5061016461015f366004611a1d565b61042b565b005b34801561017257600080fd5b50606754610186906001600160a01b031681565b6040516100df9190611a76565b34801561019f57600080fd5b50606854610186906001600160a01b031681565b6101646101c1366004611b89565b6104f3565b3480156101d257600080fd5b506101db6105ac565b6040516100df9190611bd6565b3480156101f457600080fd5b50610164610203366004611db4565b610609565b34801561021457600080fd5b50606654610228906001600160a01b031681565b6040516100df9190611e83565b34801561024157600080fd5b50610255610250366004611e91565b61074e565b6040516100df9190611ee9565b34801561026e57600080fd5b5061022861077c565b34801561028357600080fd5b50606954610186906001600160a01b031681565b3480156102a357600080fd5b506101646102b2366004611ef7565b61078b565b600081806001600160401b03166000036102ec5760405162461bcd60e51b81526004016102e390611f8b565b60405180910390fd5b6001600160401b0383166000908152606560205260409020805461ffff165b949350505050565b606080606084806001600160401b03166000036103425760405162461bcd60e51b81526004016102e390611f8b565b6001600160401b038616600090815260656020526040902061036481876108af565b94509450945050509250925092565b60695460405163365e3b9b60e11b81526000916103e89183916001600160a01b031690636cbc7736906103ac9087908590600401611fdf565b602060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190612005565b90508163ffffffff16816001600160401b03161015610410575060019392505050565b61042063ffffffff831682612052565b61030b90600161207c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104735760405162461bcd60e51b81526004016102e3906120e9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104a5610a96565b6001600160a01b0316146104cb5760405162461bcd60e51b81526004016102e390612130565b6104d481610ab2565b604080516000808252602082019092526104f091839190610b4b565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361053b5760405162461bcd60e51b81526004016102e3906120e9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661056d610a96565b6001600160a01b0316146105935760405162461bcd60e51b81526004016102e390612130565b61059c82610ab2565b6105a882826001610b4b565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105f65760405162461bcd60e51b81526004016102e390612195565b506000805160206128ab83398151915290565b606754604051632474521560e21b81526001600160a01b03909116907facb68218675a6b8f94b96a4ce188a1d45e6ec45c7e40f7b357bd68d677840f3d9082906391d148549061065f90849033906004016121a5565b602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a091906121d3565b6106bc5760405162461bcd60e51b81526004016102e390612225565b6001600160401b0387166000908152606560205260408120906106e889896106e382610373565b610c2d565b60685490915061070c9083908a908a908a908a9087906001600160a01b0316610ce8565b5060405133906001600160401b038b16907fe8a40fe112c091094e01693b4d3d6deb60fb476936d4e4c30719bb2253fadccc90600090a3505050505050505050565b6001600160401b0383166000908152606560205260408120610771818585610f4b565b9150505b9392505050565b6000610786610a96565b905090565b600054610100900460ff16158080156107ab5750600054600160ff909116105b806107cc57506107ba30611001565b1580156107cc575060005460ff166001145b6107e85760405162461bcd60e51b81526004016102e390612280565b6000805460ff19166001179055801561080b576000805461ff0019166101001790555b606680546001600160a01b038088166001600160a01b0319928316179092556067805487841690831617905560698054868416908316179055606880549285169290911691909117905561085d611010565b80156108a8576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061089f906001906122a4565b60405180910390a15b5050505050565b6001600160a01b038116600090815260018084016020526040822090810154606092839283929091906001600160401b038111156108ef576108ef611a8e565b60405190808252806020026020018201604052801561092257816020015b606081526020019060019003908161090d5790505b5060018301549091506000906001600160401b0381111561094557610945611a8e565b60405190808252806020026020018201604052801561096e578160200160208202803683370190505b5060018401549091506000906001600160401b0381111561099157610991611a8e565b6040519080825280602002602001820160405280156109ba578160200160208202803683370190505b50905060005b6001850154811015610a885760008560010182815481106109e3576109e36122b2565b906000526020600020906003020190506000806000610a0184611039565b92509250925082868681518110610a1a57610a1a6122b2565b60200260200101818152505081888681518110610a3957610a396122b2565b602002602001018190525080878681518110610a5757610a576122b2565b602002602001019063ffffffff16908163ffffffff1681525050505050508080610a80906122c8565b9150506109c0565b509891975095509350505050565b6000805160206128ab833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610ae990849033906004016121a5565b602060405180830381865afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a91906121d3565b610b465760405162461bcd60e51b81526004016102e390612225565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b7e57610b4683611109565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610bd8575060408051601f3d908101601f19168201909252610bd5918101906122ed565b60015b610bf45760405162461bcd60e51b81526004016102e390612359565b6000805160206128ab8339815191528114610c215760405162461bcd60e51b81526004016102e3906123af565b50610b4683838361115d565b60606000826001600160401b03166001600160401b03811115610c5257610c52611a8e565b604051908082528060200260200182016040528015610c7b578160200160208202803683370190505b50905060005b836001600160401b0316816001600160401b03161015610cdf57610ca786868387611188565b82826001600160401b031681518110610cc257610cc26122b2565b602090810291909101015280610cd7816123bf565b915050610c81565b50949350505050565b6000610cf5883389610f4b565b15610d125760405162461bcd60e51b81526004016102e390612412565b6000876001600160401b031611610d3b5760405162461bcd60e51b81526004016102e39061244c565b610d488686868686611239565b610d5457506000610f40565b875461ffff16886000610d668361245c565b825461ffff9182166101009390930a9283029190920219909116179055503360009081526001890160205260408120905b85518163ffffffff161015610f145760408051606080820183526000808352602083019190915291810191909152878263ffffffff1681518110610ddd57610ddd6122b2565b6020026020010151516001600160401b03811115610dfd57610dfd611a8e565b604051908082528060200260200182016040528015610e26578160200160208202803683370190505b508160200181905250610ea3898363ffffffff1681518110610e4a57610e4a6122b2565b6020026020010151898463ffffffff1681518110610e6a57610e6a6122b2565b6020026020010151898563ffffffff1681518110610e8a57610e8a6122b2565b6020026020010151846113ce909392919063ffffffff16565b6001808401805480830182556000918252602091829020845160039092020190815581840151805185949293610edd938501920190611736565b50604091909101516002909101805463ffffffff191663ffffffff9092169190911790555080610f0c81612474565b915050610d97565b50505060028701805460018181018355600092835260209092200180546001600160a01b031916331790555b979650505050505050565b6000805b600285015463ffffffff82161015610ff657836001600160a01b0316856002018263ffffffff1681548110610f8657610f866122b2565b6000918252602090912001546001600160a01b031603610faa576001915050610775565b6001600160a01b0384166000908152600186016020526040902080546001600160401b03808616911603610fe357600192505050610775565b5080610fee81612474565b915050610f4f565b506000949350505050565b6001600160a01b03163b151590565b600054610100900460ff166110375760405162461bcd60e51b81526004016102e3906124d8565b565b6000606060008084600101805490506001600160401b0381111561105f5761105f611a8e565b604051908082528060200260200182016040528015611088578160200160208202803683370190505b50905060008060005b60018801548110156110ec578760010181815481106110b2576110b26122b2565b90600052602060002001548482815181106110cf576110cf6122b2565b6020908102919091010152806110e4816122c8565b915050611091565b505085546002909601549596919563ffffffff1694509092505050565b61111281611001565b61112e5760405162461bcd60e51b81526004016102e390612532565b6000805160206128ab83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6111668361143a565b6000825111806111735750805b15610b4657611182838361147a565b50505050565b6000806111968585856114a8565b60695460405163192e965360e01b81529192506001600160a01b03169063192e9653906111cf9089906000908690600190600401612556565b600060405180830381865afa1580156111ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112149190810190612600565b600081518110611226576112266122b2565b6020026020010151915050949350505050565b6000855183511461125c5760405162461bcd60e51b81526004016102e39061266e565b845183511461127d5760405162461bcd60e51b81526004016102e3906126b0565b835183511461129e5760405162461bcd60e51b81526004016102e3906126f4565b60005b83518163ffffffff1610156113bf57826001600160a01b03166341c2412d858363ffffffff16815181106112d7576112d76122b2565b6020026020010151898463ffffffff16815181106112f7576112f76122b2565b6020026020010151898563ffffffff1681518110611317576113176122b2565b6020026020010151898663ffffffff1681518110611337576113376122b2565b60200260200101516040518563ffffffff1660e01b815260040161135e9493929190612704565b602060405180830381865afa15801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f91906121d3565b6113ad5760009150506113c5565b806113b781612474565b9150506112a1565b50600190505b95945050505050565b60005b8251811015611427578281815181106113ec576113ec6122b2565b60200260200101518560200151828151811061140a5761140a6122b2565b60209081029190910101528061141f816122c8565b9150506113d1565b509183525063ffffffff16604090910152565b61144381611109565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061149f83836040518060600160405280602781526020016128cb60279139611652565b90505b92915050565b60408051601080825281830190925260009182919060208201818036833701905050905060c085811b9085901b60005b600881101561158f57826114ed826007612740565b600881106114fd576114fd6122b2565b1a60f81b848281518110611513576115136122b2565b60200101906001600160f81b031916908160001a90535081611536826007612740565b60088110611546576115466122b2565b1a60f81b84611556836008612753565b81518110611566576115666122b2565b60200101906001600160f81b031916908160001a90535080611587816122c8565b9150506114d8565b5060006002846040516115a291906127ac565b602060405180830381855afa1580156115bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115e291906122ed565b90506000805b600881101561163a576115fc8160086127b8565b6001600160401b0316838260208110611617576116176122b2565b1a6001600160401b0316901b919091179080611632816122c8565b9150506115e8565b5061164587826127d7565b9998505050505050505050565b6060600080856001600160a01b03168560405161166f91906127ac565b600060405180830381855af49150503d80600081146116aa576040519150601f19603f3d011682016040523d82523d6000602084013e6116af565b606091505b50915091506116c0868383876116ca565b9695505050505050565b60608315611707578251600003611700576116e485611001565b6117005760405162461bcd60e51b81526004016102e390612835565b508161030b565b61030b838381511561171c5781518083602001fd5b8060405162461bcd60e51b81526004016102e39190612879565b828054828255906000526020600020908101928215611771579160200282015b82811115611771578251825591602001919060010190611756565b5061177d929150611781565b5090565b5b8082111561177d5760008155600101611782565b6001600160401b031690565b6117ab81611796565b81146104f057600080fd5b80356114a2816117a2565b6000602082840312156117d6576117d6600080fd5b600061030b84846117b6565b61ffff81165b82525050565b602081016114a282846117e2565b6001600160a01b031690565b60006114a2826117fc565b6117ab81611808565b80356114a281611813565b6000806040838503121561183d5761183d600080fd5b600061184985856117b6565b925050602061185a8582860161181c565b9150509250929050565b806117e8565b60006118768383611864565b505060200190565b6000611888825190565b80845260209384019383018060005b838110156118bc5781516118ab888261186a565b975060208301925050600101611897565b509495945050505050565b60006118d1825190565b80845260209384019383018060005b838110156118bc5781516118f4888261186a565b9750602083019250506001016118e0565b600061149f83836118c7565b600061191b825190565b808452602084019350836020820285016119358560200190565b8060005b8581101561196a57848403895281516119528582611905565b94506020830160209a909a0199925050600101611939565b5091979650505050505050565b63ffffffff81166117e8565b60006118768383611977565b6000611999825190565b80845260209384019383018060005b838110156118bc5781516119bc8882611983565b9750602083019250506001016119a8565b606080825281016119de818661187e565b905081810360208301526119f28185611911565b905081810360408301526113c5818461198f565b6117e881611796565b602081016114a28284611a06565b600060208284031215611a3257611a32600080fd5b600061030b848461181c565b60006114a2611a52611a4f846117fc565b90565b6117fc565b60006114a282611a3e565b60006114a282611a57565b6117e881611a62565b602081016114a28284611a6d565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611aad82611a84565b81018181106001600160401b0382111715611aca57611aca611a8e565b6040525050565b6000611adc60405190565b9050611ae88282611aa4565b919050565b60006001600160401b03821115611b0657611b06611a8e565b611b0f82611a84565b60200192915050565b82818337506000910152565b6000611b37611b3284611aed565b611ad1565b905082815260208101848484011115611b5257611b52600080fd5b611b5d848285611b18565b509392505050565b600082601f830112611b7957611b79600080fd5b813561030b848260208601611b24565b60008060408385031215611b9f57611b9f600080fd5b6000611bab858561181c565b92505060208301356001600160401b03811115611bca57611bca600080fd5b61185a85828601611b65565b602081016114a28284611864565b60006001600160401b03821115611bfd57611bfd611a8e565b5060209081020190565b806117ab565b80356114a281611c07565b6000611c26611b3284611be4565b83815290506020808201908402830185811115611c4557611c45600080fd5b835b81811015611c695780611c5a8882611c0d565b84525060209283019201611c47565b5050509392505050565b600082601f830112611c8757611c87600080fd5b813561030b848260208601611c18565b6000611ca5611b3284611be4565b83815290506020808201908402830185811115611cc457611cc4600080fd5b835b81811015611c695780356001600160401b03811115611ce757611ce7600080fd5b808601611cf48982611c73565b8552505060209283019201611cc6565b600082601f830112611d1857611d18600080fd5b813561030b848260208601611c97565b63ffffffff81166117ab565b80356114a281611d28565b6000611d4d611b3284611be4565b83815290506020808201908402830185811115611d6c57611d6c600080fd5b835b81811015611c695780611d818882611d34565b84525060209283019201611d6e565b600082601f830112611da457611da4600080fd5b813561030b848260208601611d3f565b600080600080600060a08688031215611dcf57611dcf600080fd5b6000611ddb88886117b6565b9550506020611dec888289016117b6565b94505060408601356001600160401b03811115611e0b57611e0b600080fd5b611e1788828901611c73565b93505060608601356001600160401b03811115611e3657611e36600080fd5b611e4288828901611d04565b92505060808601356001600160401b03811115611e6157611e61600080fd5b611e6d88828901611d90565b9150509295509295909350565b6117e881611808565b602081016114a28284611e7a565b600080600060608486031215611ea957611ea9600080fd5b6000611eb586866117b6565b9350506020611ec68682870161181c565b9250506040611ed7868287016117b6565b9150509250925092565b8015156117e8565b602081016114a28284611ee1565b60008060008060808587031215611f1057611f10600080fd5b6000611f1c878761181c565b9450506020611f2d8782880161181c565b9350506040611f3e8782880161181c565b9250506060611f4f8782880161181c565b91505092959194509250565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b815291505b5060200190565b602080825281016114a281611f5b565b634e487b7160e01b600052602160045260246000fd5b600281106104f0576104f0611f9b565b80611ae881611fb1565b60006114a282611fc1565b6117e881611fcb565b60408101611fed8285611a06565b6107756020830184611fd6565b80516114a2816117a2565b60006020828403121561201a5761201a600080fd5b600061030b8484611ffa565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061205d82611796565b915061206883611796565b92508261207757612077612026565b500490565b600061208782611796565b915061209283611796565b9250508082016001600160401b038111156114a2576114a261203c565b602c815260006020820160008051602061288b83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016114a2816120af565b602c815260006020820160008051602061288b83398151915281526b6163746976652070726f787960a01b602082015291506120e2565b602080825281016114a2816120f9565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b602082015291506120e2565b602080825281016114a281612140565b604081016121b38285611864565b6107756020830184611e7a565b8015156117ab565b80516114a2816121c0565b6000602082840312156121e8576121e8600080fd5b600061030b84846121c8565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150611f84565b602080825281016114a2816121f4565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506120e2565b602080825281016114a281612235565b600060ff82166114a2565b6117e881612290565b602081016114a2828461229b565b634e487b7160e01b600052603260045260246000fd5b600060001982036122db576122db61203c565b5060010190565b80516114a281611c07565b60006020828403121561230257612302600080fd5b600061030b84846122e2565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b602082015291506120e2565b602080825281016114a28161230e565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b602082015291506120e2565b602080825281016114a281612369565b60006123ca82611796565b91506001600160401b0382036122db576122db61203c565b6019815260006020820178566572696669636174696f6e206973206475706c696361746560381b81529150611f84565b602080825281016114a2816123e2565b6013815260006020820172125b9d985b1a59081c985b991bdb481cd95959606a1b81529150611f84565b602080825281016114a281612422565b61ffff16600061fffe1982016122db576122db61203c565b63ffffffff16600063fffffffe1982016122db576122db61203c565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506120e2565b602080825281016114a281612490565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b602082015291506120e2565b602080825281016114a2816124e8565b60006114a282611796565b6117e881612542565b608081016125648287611a06565b6125716020830186611fd6565b61257e6040830185611a06565b6113c5606083018461254d565b6000612599611b3284611be4565b838152905060208082019084028301858111156125b8576125b8600080fd5b835b81811015611c6957806125cd88826122e2565b845250602092830192016125ba565b600082601f8301126125f0576125f0600080fd5b815161030b84826020860161258b565b60006020828403121561261557612615600080fd5b81516001600160401b0381111561262e5761262e600080fd5b61030b848285016125dc565b601e81526000602082017f726f6f74732e6c656e67746820213d205f6c65617665732e6c656e677468000081529150611f84565b602080825281016114a28161263a565b60208082527f726f6f74732e6c656e67746820213d205f7369626c696e67732e6c656e67746891019081526000611f84565b602080825281016114a28161267e565b601d81526000602082017f726f6f74732e6c656e67746820213d205f70617468732e6c656e67746800000081529150611f84565b602080825281016114a2816126c0565b608081016127128287611864565b61271f6020830186611864565b8181036040830152612731818561187e565b90506113c56060830184611977565b818103818111156114a2576114a261203c565b808201808211156114a2576114a261203c565b60005b83811015612781578181015183820152602001612769565b50506000910152565b6000612794825190565b6127a2818560208601612766565b9290920192915050565b6000610775828461278a565b8181028082158382048514176127d0576127d061203c565b5092915050565b60006127e282611796565b91506127ed83611796565b9250826127fc576127fc612026565b500690565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611f84565b602080825281016114a281612801565b600061284f825190565b808452602084019350612866818560208601612766565b61286f81611a84565b9093019392505050565b6020808252810161149f818461284556fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202c4e583481e09540dd6ffdc4a589e79024201395920e5cd4798246dd2d6c77e864736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100ad5760003560e01c80630465c1e1146100b25780630ecee42d146100e85780631fd40abb146101175780633659cfe614610144578063392f5f641461016657806347b0f08e146101935780634f1ef286146101b357806352d1902d146101c657806357ca304f146101e8578063795053d31461020857806396b1a02b14610235578063aaf10f4214610262578063cc22e64f14610277578063f8c8765e14610297575b600080fd5b3480156100be57600080fd5b506100d26100cd3660046117c1565b6102b7565b6040516100df91906117ee565b60405180910390f35b3480156100f457600080fd5b50610108610103366004611827565b610313565b6040516100df939291906119cd565b34801561012357600080fd5b506101376101323660046117c1565b610373565b6040516100df9190611a0f565b34801561015057600080fd5b5061016461015f366004611a1d565b61042b565b005b34801561017257600080fd5b50606754610186906001600160a01b031681565b6040516100df9190611a76565b34801561019f57600080fd5b50606854610186906001600160a01b031681565b6101646101c1366004611b89565b6104f3565b3480156101d257600080fd5b506101db6105ac565b6040516100df9190611bd6565b3480156101f457600080fd5b50610164610203366004611db4565b610609565b34801561021457600080fd5b50606654610228906001600160a01b031681565b6040516100df9190611e83565b34801561024157600080fd5b50610255610250366004611e91565b61074e565b6040516100df9190611ee9565b34801561026e57600080fd5b5061022861077c565b34801561028357600080fd5b50606954610186906001600160a01b031681565b3480156102a357600080fd5b506101646102b2366004611ef7565b61078b565b600081806001600160401b03166000036102ec5760405162461bcd60e51b81526004016102e390611f8b565b60405180910390fd5b6001600160401b0383166000908152606560205260409020805461ffff165b949350505050565b606080606084806001600160401b03166000036103425760405162461bcd60e51b81526004016102e390611f8b565b6001600160401b038616600090815260656020526040902061036481876108af565b94509450945050509250925092565b60695460405163365e3b9b60e11b81526000916103e89183916001600160a01b031690636cbc7736906103ac9087908590600401611fdf565b602060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190612005565b90508163ffffffff16816001600160401b03161015610410575060019392505050565b61042063ffffffff831682612052565b61030b90600161207c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104735760405162461bcd60e51b81526004016102e3906120e9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104a5610a96565b6001600160a01b0316146104cb5760405162461bcd60e51b81526004016102e390612130565b6104d481610ab2565b604080516000808252602082019092526104f091839190610b4b565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361053b5760405162461bcd60e51b81526004016102e3906120e9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661056d610a96565b6001600160a01b0316146105935760405162461bcd60e51b81526004016102e390612130565b61059c82610ab2565b6105a882826001610b4b565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105f65760405162461bcd60e51b81526004016102e390612195565b506000805160206128ab83398151915290565b606754604051632474521560e21b81526001600160a01b03909116907facb68218675a6b8f94b96a4ce188a1d45e6ec45c7e40f7b357bd68d677840f3d9082906391d148549061065f90849033906004016121a5565b602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a091906121d3565b6106bc5760405162461bcd60e51b81526004016102e390612225565b6001600160401b0387166000908152606560205260408120906106e889896106e382610373565b610c2d565b60685490915061070c9083908a908a908a908a9087906001600160a01b0316610ce8565b5060405133906001600160401b038b16907fe8a40fe112c091094e01693b4d3d6deb60fb476936d4e4c30719bb2253fadccc90600090a3505050505050505050565b6001600160401b0383166000908152606560205260408120610771818585610f4b565b9150505b9392505050565b6000610786610a96565b905090565b600054610100900460ff16158080156107ab5750600054600160ff909116105b806107cc57506107ba30611001565b1580156107cc575060005460ff166001145b6107e85760405162461bcd60e51b81526004016102e390612280565b6000805460ff19166001179055801561080b576000805461ff0019166101001790555b606680546001600160a01b038088166001600160a01b0319928316179092556067805487841690831617905560698054868416908316179055606880549285169290911691909117905561085d611010565b80156108a8576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061089f906001906122a4565b60405180910390a15b5050505050565b6001600160a01b038116600090815260018084016020526040822090810154606092839283929091906001600160401b038111156108ef576108ef611a8e565b60405190808252806020026020018201604052801561092257816020015b606081526020019060019003908161090d5790505b5060018301549091506000906001600160401b0381111561094557610945611a8e565b60405190808252806020026020018201604052801561096e578160200160208202803683370190505b5060018401549091506000906001600160401b0381111561099157610991611a8e565b6040519080825280602002602001820160405280156109ba578160200160208202803683370190505b50905060005b6001850154811015610a885760008560010182815481106109e3576109e36122b2565b906000526020600020906003020190506000806000610a0184611039565b92509250925082868681518110610a1a57610a1a6122b2565b60200260200101818152505081888681518110610a3957610a396122b2565b602002602001018190525080878681518110610a5757610a576122b2565b602002602001019063ffffffff16908163ffffffff1681525050505050508080610a80906122c8565b9150506109c0565b509891975095509350505050565b6000805160206128ab833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610ae990849033906004016121a5565b602060405180830381865afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a91906121d3565b610b465760405162461bcd60e51b81526004016102e390612225565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b7e57610b4683611109565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610bd8575060408051601f3d908101601f19168201909252610bd5918101906122ed565b60015b610bf45760405162461bcd60e51b81526004016102e390612359565b6000805160206128ab8339815191528114610c215760405162461bcd60e51b81526004016102e3906123af565b50610b4683838361115d565b60606000826001600160401b03166001600160401b03811115610c5257610c52611a8e565b604051908082528060200260200182016040528015610c7b578160200160208202803683370190505b50905060005b836001600160401b0316816001600160401b03161015610cdf57610ca786868387611188565b82826001600160401b031681518110610cc257610cc26122b2565b602090810291909101015280610cd7816123bf565b915050610c81565b50949350505050565b6000610cf5883389610f4b565b15610d125760405162461bcd60e51b81526004016102e390612412565b6000876001600160401b031611610d3b5760405162461bcd60e51b81526004016102e39061244c565b610d488686868686611239565b610d5457506000610f40565b875461ffff16886000610d668361245c565b825461ffff9182166101009390930a9283029190920219909116179055503360009081526001890160205260408120905b85518163ffffffff161015610f145760408051606080820183526000808352602083019190915291810191909152878263ffffffff1681518110610ddd57610ddd6122b2565b6020026020010151516001600160401b03811115610dfd57610dfd611a8e565b604051908082528060200260200182016040528015610e26578160200160208202803683370190505b508160200181905250610ea3898363ffffffff1681518110610e4a57610e4a6122b2565b6020026020010151898463ffffffff1681518110610e6a57610e6a6122b2565b6020026020010151898563ffffffff1681518110610e8a57610e8a6122b2565b6020026020010151846113ce909392919063ffffffff16565b6001808401805480830182556000918252602091829020845160039092020190815581840151805185949293610edd938501920190611736565b50604091909101516002909101805463ffffffff191663ffffffff9092169190911790555080610f0c81612474565b915050610d97565b50505060028701805460018181018355600092835260209092200180546001600160a01b031916331790555b979650505050505050565b6000805b600285015463ffffffff82161015610ff657836001600160a01b0316856002018263ffffffff1681548110610f8657610f866122b2565b6000918252602090912001546001600160a01b031603610faa576001915050610775565b6001600160a01b0384166000908152600186016020526040902080546001600160401b03808616911603610fe357600192505050610775565b5080610fee81612474565b915050610f4f565b506000949350505050565b6001600160a01b03163b151590565b600054610100900460ff166110375760405162461bcd60e51b81526004016102e3906124d8565b565b6000606060008084600101805490506001600160401b0381111561105f5761105f611a8e565b604051908082528060200260200182016040528015611088578160200160208202803683370190505b50905060008060005b60018801548110156110ec578760010181815481106110b2576110b26122b2565b90600052602060002001548482815181106110cf576110cf6122b2565b6020908102919091010152806110e4816122c8565b915050611091565b505085546002909601549596919563ffffffff1694509092505050565b61111281611001565b61112e5760405162461bcd60e51b81526004016102e390612532565b6000805160206128ab83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6111668361143a565b6000825111806111735750805b15610b4657611182838361147a565b50505050565b6000806111968585856114a8565b60695460405163192e965360e01b81529192506001600160a01b03169063192e9653906111cf9089906000908690600190600401612556565b600060405180830381865afa1580156111ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112149190810190612600565b600081518110611226576112266122b2565b6020026020010151915050949350505050565b6000855183511461125c5760405162461bcd60e51b81526004016102e39061266e565b845183511461127d5760405162461bcd60e51b81526004016102e3906126b0565b835183511461129e5760405162461bcd60e51b81526004016102e3906126f4565b60005b83518163ffffffff1610156113bf57826001600160a01b03166341c2412d858363ffffffff16815181106112d7576112d76122b2565b6020026020010151898463ffffffff16815181106112f7576112f76122b2565b6020026020010151898563ffffffff1681518110611317576113176122b2565b6020026020010151898663ffffffff1681518110611337576113376122b2565b60200260200101516040518563ffffffff1660e01b815260040161135e9493929190612704565b602060405180830381865afa15801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f91906121d3565b6113ad5760009150506113c5565b806113b781612474565b9150506112a1565b50600190505b95945050505050565b60005b8251811015611427578281815181106113ec576113ec6122b2565b60200260200101518560200151828151811061140a5761140a6122b2565b60209081029190910101528061141f816122c8565b9150506113d1565b509183525063ffffffff16604090910152565b61144381611109565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061149f83836040518060600160405280602781526020016128cb60279139611652565b90505b92915050565b60408051601080825281830190925260009182919060208201818036833701905050905060c085811b9085901b60005b600881101561158f57826114ed826007612740565b600881106114fd576114fd6122b2565b1a60f81b848281518110611513576115136122b2565b60200101906001600160f81b031916908160001a90535081611536826007612740565b60088110611546576115466122b2565b1a60f81b84611556836008612753565b81518110611566576115666122b2565b60200101906001600160f81b031916908160001a90535080611587816122c8565b9150506114d8565b5060006002846040516115a291906127ac565b602060405180830381855afa1580156115bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115e291906122ed565b90506000805b600881101561163a576115fc8160086127b8565b6001600160401b0316838260208110611617576116176122b2565b1a6001600160401b0316901b919091179080611632816122c8565b9150506115e8565b5061164587826127d7565b9998505050505050505050565b6060600080856001600160a01b03168560405161166f91906127ac565b600060405180830381855af49150503d80600081146116aa576040519150601f19603f3d011682016040523d82523d6000602084013e6116af565b606091505b50915091506116c0868383876116ca565b9695505050505050565b60608315611707578251600003611700576116e485611001565b6117005760405162461bcd60e51b81526004016102e390612835565b508161030b565b61030b838381511561171c5781518083602001fd5b8060405162461bcd60e51b81526004016102e39190612879565b828054828255906000526020600020908101928215611771579160200282015b82811115611771578251825591602001919060010190611756565b5061177d929150611781565b5090565b5b8082111561177d5760008155600101611782565b6001600160401b031690565b6117ab81611796565b81146104f057600080fd5b80356114a2816117a2565b6000602082840312156117d6576117d6600080fd5b600061030b84846117b6565b61ffff81165b82525050565b602081016114a282846117e2565b6001600160a01b031690565b60006114a2826117fc565b6117ab81611808565b80356114a281611813565b6000806040838503121561183d5761183d600080fd5b600061184985856117b6565b925050602061185a8582860161181c565b9150509250929050565b806117e8565b60006118768383611864565b505060200190565b6000611888825190565b80845260209384019383018060005b838110156118bc5781516118ab888261186a565b975060208301925050600101611897565b509495945050505050565b60006118d1825190565b80845260209384019383018060005b838110156118bc5781516118f4888261186a565b9750602083019250506001016118e0565b600061149f83836118c7565b600061191b825190565b808452602084019350836020820285016119358560200190565b8060005b8581101561196a57848403895281516119528582611905565b94506020830160209a909a0199925050600101611939565b5091979650505050505050565b63ffffffff81166117e8565b60006118768383611977565b6000611999825190565b80845260209384019383018060005b838110156118bc5781516119bc8882611983565b9750602083019250506001016119a8565b606080825281016119de818661187e565b905081810360208301526119f28185611911565b905081810360408301526113c5818461198f565b6117e881611796565b602081016114a28284611a06565b600060208284031215611a3257611a32600080fd5b600061030b848461181c565b60006114a2611a52611a4f846117fc565b90565b6117fc565b60006114a282611a3e565b60006114a282611a57565b6117e881611a62565b602081016114a28284611a6d565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611aad82611a84565b81018181106001600160401b0382111715611aca57611aca611a8e565b6040525050565b6000611adc60405190565b9050611ae88282611aa4565b919050565b60006001600160401b03821115611b0657611b06611a8e565b611b0f82611a84565b60200192915050565b82818337506000910152565b6000611b37611b3284611aed565b611ad1565b905082815260208101848484011115611b5257611b52600080fd5b611b5d848285611b18565b509392505050565b600082601f830112611b7957611b79600080fd5b813561030b848260208601611b24565b60008060408385031215611b9f57611b9f600080fd5b6000611bab858561181c565b92505060208301356001600160401b03811115611bca57611bca600080fd5b61185a85828601611b65565b602081016114a28284611864565b60006001600160401b03821115611bfd57611bfd611a8e565b5060209081020190565b806117ab565b80356114a281611c07565b6000611c26611b3284611be4565b83815290506020808201908402830185811115611c4557611c45600080fd5b835b81811015611c695780611c5a8882611c0d565b84525060209283019201611c47565b5050509392505050565b600082601f830112611c8757611c87600080fd5b813561030b848260208601611c18565b6000611ca5611b3284611be4565b83815290506020808201908402830185811115611cc457611cc4600080fd5b835b81811015611c695780356001600160401b03811115611ce757611ce7600080fd5b808601611cf48982611c73565b8552505060209283019201611cc6565b600082601f830112611d1857611d18600080fd5b813561030b848260208601611c97565b63ffffffff81166117ab565b80356114a281611d28565b6000611d4d611b3284611be4565b83815290506020808201908402830185811115611d6c57611d6c600080fd5b835b81811015611c695780611d818882611d34565b84525060209283019201611d6e565b600082601f830112611da457611da4600080fd5b813561030b848260208601611d3f565b600080600080600060a08688031215611dcf57611dcf600080fd5b6000611ddb88886117b6565b9550506020611dec888289016117b6565b94505060408601356001600160401b03811115611e0b57611e0b600080fd5b611e1788828901611c73565b93505060608601356001600160401b03811115611e3657611e36600080fd5b611e4288828901611d04565b92505060808601356001600160401b03811115611e6157611e61600080fd5b611e6d88828901611d90565b9150509295509295909350565b6117e881611808565b602081016114a28284611e7a565b600080600060608486031215611ea957611ea9600080fd5b6000611eb586866117b6565b9350506020611ec68682870161181c565b9250506040611ed7868287016117b6565b9150509250925092565b8015156117e8565b602081016114a28284611ee1565b60008060008060808587031215611f1057611f10600080fd5b6000611f1c878761181c565b9450506020611f2d8782880161181c565b9350506040611f3e8782880161181c565b9250506060611f4f8782880161181c565b91505092959194509250565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b815291505b5060200190565b602080825281016114a281611f5b565b634e487b7160e01b600052602160045260246000fd5b600281106104f0576104f0611f9b565b80611ae881611fb1565b60006114a282611fc1565b6117e881611fcb565b60408101611fed8285611a06565b6107756020830184611fd6565b80516114a2816117a2565b60006020828403121561201a5761201a600080fd5b600061030b8484611ffa565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061205d82611796565b915061206883611796565b92508261207757612077612026565b500490565b600061208782611796565b915061209283611796565b9250508082016001600160401b038111156114a2576114a261203c565b602c815260006020820160008051602061288b83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016114a2816120af565b602c815260006020820160008051602061288b83398151915281526b6163746976652070726f787960a01b602082015291506120e2565b602080825281016114a2816120f9565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b602082015291506120e2565b602080825281016114a281612140565b604081016121b38285611864565b6107756020830184611e7a565b8015156117ab565b80516114a2816121c0565b6000602082840312156121e8576121e8600080fd5b600061030b84846121c8565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150611f84565b602080825281016114a2816121f4565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506120e2565b602080825281016114a281612235565b600060ff82166114a2565b6117e881612290565b602081016114a2828461229b565b634e487b7160e01b600052603260045260246000fd5b600060001982036122db576122db61203c565b5060010190565b80516114a281611c07565b60006020828403121561230257612302600080fd5b600061030b84846122e2565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b602082015291506120e2565b602080825281016114a28161230e565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b602082015291506120e2565b602080825281016114a281612369565b60006123ca82611796565b91506001600160401b0382036122db576122db61203c565b6019815260006020820178566572696669636174696f6e206973206475706c696361746560381b81529150611f84565b602080825281016114a2816123e2565b6013815260006020820172125b9d985b1a59081c985b991bdb481cd95959606a1b81529150611f84565b602080825281016114a281612422565b61ffff16600061fffe1982016122db576122db61203c565b63ffffffff16600063fffffffe1982016122db576122db61203c565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506120e2565b602080825281016114a281612490565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b602082015291506120e2565b602080825281016114a2816124e8565b60006114a282611796565b6117e881612542565b608081016125648287611a06565b6125716020830186611fd6565b61257e6040830185611a06565b6113c5606083018461254d565b6000612599611b3284611be4565b838152905060208082019084028301858111156125b8576125b8600080fd5b835b81811015611c6957806125cd88826122e2565b845250602092830192016125ba565b600082601f8301126125f0576125f0600080fd5b815161030b84826020860161258b565b60006020828403121561261557612615600080fd5b81516001600160401b0381111561262e5761262e600080fd5b61030b848285016125dc565b601e81526000602082017f726f6f74732e6c656e67746820213d205f6c65617665732e6c656e677468000081529150611f84565b602080825281016114a28161263a565b60208082527f726f6f74732e6c656e67746820213d205f7369626c696e67732e6c656e67746891019081526000611f84565b602080825281016114a28161267e565b601d81526000602082017f726f6f74732e6c656e67746820213d205f70617468732e6c656e67746800000081529150611f84565b602080825281016114a2816126c0565b608081016127128287611864565b61271f6020830186611864565b8181036040830152612731818561187e565b90506113c56060830184611977565b818103818111156114a2576114a261203c565b808201808211156114a2576114a261203c565b60005b83811015612781578181015183820152602001612769565b50506000910152565b6000612794825190565b6127a2818560208601612766565b9290920192915050565b6000610775828461278a565b8181028082158382048514176127d0576127d061203c565b5092915050565b60006127e282611796565b91506127ed83611796565b9250826127fc576127fc612026565b500690565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611f84565b602080825281016114a281612801565b600061284f825190565b808452602084019350612866818560208601612766565b61286f81611a84565b9093019392505050565b6020808252810161149f818461284556fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202c4e583481e09540dd6ffdc4a589e79024201395920e5cd4798246dd2d6c77e864736f6c63430008150033",
  "devdoc": {
    "details": "This contract is intended to be inherited by specific dataset-related contracts.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "getChallengeCount(uint64)": {
        "params": {
          "_datasetId": "The ID of the dataset for which proof is submitted."
        }
      },
      "getDatasetChallengeProofs(uint64,address)": {
        "params": {
          "_auditor": "The auditor of the dataset for which challenge proof is submitted.",
          "_datasetId": "The ID of the dataset for which proof is submitted."
        }
      },
      "getDatasetChallengeProofsCount(uint64)": {
        "params": {
          "_datasetId": "The ID of the dataset for which proof is submitted."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "DatasetsChallenge Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DatasetChallengeProofsSubmitted(uint64,address)": {
        "notice": "Event emitted when a dataset is verified."
      }
    },
    "kind": "user",
    "methods": {
      "getChallengeCount(uint64)": {
        "notice": "Get a dataset challenge count"
      },
      "getDatasetChallengeProofs(uint64,address)": {
        "notice": "Get dataset challenge proofs"
      },
      "getDatasetChallengeProofsCount(uint64)": {
        "notice": "Get count of dataset chellange proofs."
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "initialize(address,address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "isDatasetChallengeProofDuplicate(uint64,address,uint64)": {
        "notice": "Check if the challenge proof is a duplicate."
      },
      "merkleUtils()": {
        "notice": "get  merkle utils"
      },
      "submitDatasetChallengeProofs(uint64,uint64,bytes32[],bytes32[][],uint32[])": {
        "notice": "Submit challenge proof for a dataset Based on merkle proof challenge. random challenge method is used to reduce the amount of data and calculation while ensuring algorithm security."
      }
    },
    "notice": "This contract serves as the base for managing DatasetChallengeProof.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23574,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "datasetChallengeProofs",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint64,t_struct(DatasetChallengeProof)35223_storage)"
      },
      {
        "astId": 23576,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 23579,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "roles",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IRoles)20939"
      },
      {
        "astId": 23582,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "merkleUtils",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IMerkleUtils)22032"
      },
      {
        "astId": 23585,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "datasetProof",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IDatasetsProof)21436"
      },
      {
        "astId": 23590,
        "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Challenge)35204_storage)dyn_storage": {
        "base": "t_struct(Challenge)35204_storage",
        "encoding": "dynamic_array",
        "label": "struct DatasetType.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDatasetsProof)21436": {
        "encoding": "inplace",
        "label": "contract IDatasetsProof",
        "numberOfBytes": "20"
      },
      "t_contract(IMerkleUtils)22032": {
        "encoding": "inplace",
        "label": "contract IMerkleUtils",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)20939": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ChallengeProof)35212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DatasetType.ChallengeProof)",
        "numberOfBytes": "32",
        "value": "t_struct(ChallengeProof)35212_storage"
      },
      "t_mapping(t_uint64,t_struct(DatasetChallengeProof)35223_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct DatasetType.DatasetChallengeProof)",
        "numberOfBytes": "32",
        "value": "t_struct(DatasetChallengeProof)35223_storage"
      },
      "t_struct(Challenge)35204_storage": {
        "encoding": "inplace",
        "label": "struct DatasetType.Challenge",
        "members": [
          {
            "astId": 35198,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "leaf",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 35201,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "siblings",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 35203,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "path",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ChallengeProof)35212_storage": {
        "encoding": "inplace",
        "label": "struct DatasetType.ChallengeProof",
        "members": [
          {
            "astId": 35207,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "randomSeed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35211,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "challenges",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Challenge)35204_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DatasetChallengeProof)35223_storage": {
        "encoding": "inplace",
        "label": "struct DatasetType.DatasetChallengeProof",
        "members": [
          {
            "astId": 35214,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "challengesCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 35219,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "challengeProofs",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(ChallengeProof)35212_storage)"
          },
          {
            "astId": 35222,
            "contract": "src/v0.8/module/dataset/DatasetsChallenge.sol:DatasetsChallenge",
            "label": "auditors",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}