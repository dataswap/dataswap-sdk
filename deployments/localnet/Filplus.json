{
  "address": "0x90fFE542E51C80174Ff3daeD0c39Bd9A1EA7C16B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newValue",
          "type": "uint64"
        }
      ],
      "name": "SetDatacapRulesMaxAllocatedSizePerTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newValue",
          "type": "uint64"
        }
      ],
      "name": "SetDatacapRulesMaxRemainingPercentageForNext",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleDefaultMaxReplicasPerCountry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_newValue",
          "type": "uint8"
        }
      ],
      "name": "SetDatasetRuleMaxProportionOfMappingFilesToDataset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_countryCode",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "SetDatasetRuleMaxReplicasInCountry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleMaxReplicasPerCity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleMaxReplicasPerSP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleMaxTotalReplicasPerDataset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleMinRegionsPerDataset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleMinSPsPerDataset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newValue",
          "type": "uint32"
        }
      ],
      "name": "SetDatasetRuleMinTotalReplicasPerDataset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datacapRulesMaxAllocatedSizePerTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datacapRulesMaxRemainingPercentageForNext",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleDefaultMaxReplicasPerCountry",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMaxProportionOfMappingFilesToDataset",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMaxReplicasPerCity",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMaxReplicasPerSP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMaxTotalReplicasPerDataset",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMinRegionsPerDataset",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMinSPsPerDataset",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetRuleMinTotalReplicasPerDataset",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_countryCode",
          "type": "uint16"
        }
      ],
      "name": "getDatasetRuleMaxReplicasInCountry",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_regions",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_countrys",
          "type": "uint16[]"
        },
        {
          "internalType": "uint32[][]",
          "name": "_citys",
          "type": "uint32[][]"
        }
      ],
      "name": "isCompliantRuleGeolocation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_mappingFilesSize",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_sourceSize",
          "type": "uint64"
        }
      ],
      "name": "isCompliantRuleMaxProportionOfMappingFilesToDataset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_value",
          "type": "uint16"
        }
      ],
      "name": "isCompliantRuleMaxReplicasPerSP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_requirementValue",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_totalExists",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_uniqueExists",
          "type": "uint16"
        }
      ],
      "name": "isCompliantRuleMinSPsPerDataset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[][]",
          "name": "_dataPreparers",
          "type": "address[][]"
        },
        {
          "internalType": "address[][]",
          "name": "_storageProviders",
          "type": "address[][]"
        },
        {
          "internalType": "uint16[]",
          "name": "_regions",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_countrys",
          "type": "uint16[]"
        },
        {
          "internalType": "uint32[][]",
          "name": "_citys",
          "type": "uint32[][]"
        }
      ],
      "name": "isCompliantRuleTotalReplicasPerDataset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newValue",
          "type": "uint64"
        }
      ],
      "name": "setDatacapRulesMaxAllocatedSizePerTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newValue",
          "type": "uint8"
        }
      ],
      "name": "setDatacapRulesMaxRemainingPercentageForNext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleDefaultMaxReplicasPerCountry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newValue",
          "type": "uint8"
        }
      ],
      "name": "setDatasetRuleMaxProportionOfMappingFilesToDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_countryCode",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMaxReplicasInCountry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMaxReplicasPerCity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMaxReplicasPerSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMaxTotalReplicasPerDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMinRegionsPerDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMinSPsPerDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newValue",
          "type": "uint16"
        }
      ],
      "name": "setDatasetRuleMinTotalReplicasPerDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9021cb8d818084f87f27b3e6df282435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newValue\",\"type\":\"uint64\"}],\"name\":\"SetDatacapRulesMaxAllocatedSizePerTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newValue\",\"type\":\"uint64\"}],\"name\":\"SetDatacapRulesMaxRemainingPercentageForNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleDefaultMaxReplicasPerCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_newValue\",\"type\":\"uint8\"}],\"name\":\"SetDatasetRuleMaxProportionOfMappingFilesToDataset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_countryCode\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"SetDatasetRuleMaxReplicasInCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleMaxReplicasPerCity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleMaxReplicasPerSP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleMaxTotalReplicasPerDataset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleMinRegionsPerDataset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleMinSPsPerDataset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"SetDatasetRuleMinTotalReplicasPerDataset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOVERNANCE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datacapRulesMaxAllocatedSizePerTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datacapRulesMaxRemainingPercentageForNext\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleDefaultMaxReplicasPerCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMaxProportionOfMappingFilesToDataset\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMaxReplicasPerCity\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMaxReplicasPerSP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMaxTotalReplicasPerDataset\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMinRegionsPerDataset\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMinSPsPerDataset\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetRuleMinTotalReplicasPerDataset\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_countryCode\",\"type\":\"uint16\"}],\"name\":\"getDatasetRuleMaxReplicasInCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_regions\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countrys\",\"type\":\"uint16[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"_citys\",\"type\":\"uint32[][]\"}],\"name\":\"isCompliantRuleGeolocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_mappingFilesSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_sourceSize\",\"type\":\"uint64\"}],\"name\":\"isCompliantRuleMaxProportionOfMappingFilesToDataset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"isCompliantRuleMaxReplicasPerSP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_requirementValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_totalExists\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_uniqueExists\",\"type\":\"uint16\"}],\"name\":\"isCompliantRuleMinSPsPerDataset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"_dataPreparers\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"_storageProviders\",\"type\":\"address[][]\"},{\"internalType\":\"uint16[]\",\"name\":\"_regions\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countrys\",\"type\":\"uint16[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"_citys\",\"type\":\"uint32[][]\"}],\"name\":\"isCompliantRuleTotalReplicasPerDataset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newValue\",\"type\":\"uint64\"}],\"name\":\"setDatacapRulesMaxAllocatedSizePerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newValue\",\"type\":\"uint8\"}],\"name\":\"setDatacapRulesMaxRemainingPercentageForNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleDefaultMaxReplicasPerCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newValue\",\"type\":\"uint8\"}],\"name\":\"setDatasetRuleMaxProportionOfMappingFilesToDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_countryCode\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMaxReplicasInCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMaxReplicasPerCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMaxReplicasPerSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMaxTotalReplicasPerDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMinRegionsPerDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMinSPsPerDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newValue\",\"type\":\"uint16\"}],\"name\":\"setDatasetRuleMinTotalReplicasPerDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Filplus\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"datacapRulesMaxAllocatedSizePerTime()\":{\"notice\":\"datacap rules\"},\"datasetRuleMinRegionsPerDataset()\":{\"notice\":\"dataset region rules\"},\"datasetRuleMinSPsPerDataset()\":{\"notice\":\"dataset sp rules\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"initialize(address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"isCompliantRuleGeolocation(uint16[],uint16[],uint32[][])\":{\"notice\":\"Check if the storage geolocation complies with filplus rules.\"},\"isCompliantRuleMaxProportionOfMappingFilesToDataset(uint64,uint64)\":{\"notice\":\"Check if the mappingFiles percentage in the dataset complies with filplus rules.\"},\"isCompliantRuleMaxReplicasPerSP(uint16)\":{\"notice\":\"Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\"},\"isCompliantRuleMinSPsPerDataset(uint16,uint16,uint16)\":{\"notice\":\"Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\"},\"isCompliantRuleTotalReplicasPerDataset(address[][],address[][],uint16[],uint16[],uint32[][])\":{\"notice\":\"Check if the total number of storage replicas complies with filplus rules.\"},\"setDatasetRuleMaxProportionOfMappingFilesToDataset(uint8)\":{\"notice\":\"set maximum proportion of dataset mapping files\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/core/filplus/Filplus.sol\":\"Filplus\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373031363738333234383532\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/core/filplus/Filplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {FilplusEvents} from \\\"src/v0.8/shared/events/FilplusEvents.sol\\\";\\nimport \\\"src/v0.8/shared/utils/array/ArrayLIB.sol\\\";\\n///type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Filplus\\ncontract Filplus is Initializable, UUPSUpgradeable, IFilplus, RolesModifiers {\\n    using ArrayUint16LIB for uint16[];\\n    using ArrayUint32LIB for uint32[];\\n    IRoles private roles;\\n    // solhint-disable-next-line\\n    address public GOVERNANCE_ADDRESS; //The address of the governance contract.\\n\\n    ///@notice dataset region rules\\n    uint16 public datasetRuleMinRegionsPerDataset; // Minimum required number of regions (e.g., 3).\\n\\n    uint16 public datasetRuleDefaultMaxReplicasPerCountry; // Default maximum replicas allowed per country.\\n\\n    mapping(uint16 => uint16) private datasetRuleMaxReplicasInCountries; // Maximum replicas allowed per country.\\n\\n    uint16 public datasetRuleMaxReplicasPerCity; // Maximum replicas allowed per city (e.g., 1).\\n\\n    uint8 public datasetRuleMaxProportionOfMappingFilesToDataset; //Maximum proportion of dataset mapping files,measured in ten-thousandths.(e.g.,40)\\n\\n    ///@notice dataset sp rules\\n    uint16 public datasetRuleMinSPsPerDataset; // Minimum required number of storage providers (e.g., 5).\\n\\n    uint16 public datasetRuleMaxReplicasPerSP; // Maximum replicas allowed per storage provider (e.g., 1).\\n\\n    uint16 public datasetRuleMinTotalReplicasPerDataset; // Minimum required total replicas (e.g., 5).\\n\\n    uint16 public datasetRuleMaxTotalReplicasPerDataset; // Maximum allowed total replicas (e.g., 10).\\n\\n    ///@notice datacap rules\\n    uint64 public datacapRulesMaxAllocatedSizePerTime; // Maximum allocate datacap size per time.\\n\\n    uint8 public datacapRulesMaxRemainingPercentageForNext; // Minimum completion percentage for the next allocation.\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    // solhint-disable-next-line\\n    function initialize(\\n        address payable _governanceAddress,\\n        address _roles\\n    ) public initializer {\\n        roles = IRoles(_roles);\\n        GOVERNANCE_ADDRESS = _governanceAddress;\\n\\n        //defalut dataset region rules\\n        datasetRuleMinRegionsPerDataset = 3;\\n        datasetRuleDefaultMaxReplicasPerCountry = 1;\\n        datasetRuleMaxReplicasPerCity = 1;\\n        datasetRuleMaxProportionOfMappingFilesToDataset = 40; // 40/10000\\n\\n        //defalut dataset sp rules\\n        datasetRuleMinSPsPerDataset = 5;\\n        datasetRuleMaxReplicasPerSP = 1;\\n        datasetRuleMinTotalReplicasPerDataset = 5;\\n        datasetRuleMaxTotalReplicasPerDataset = 10;\\n\\n        //defalut datacap rules\\n        datacapRulesMaxAllocatedSizePerTime = 50 * 1024 * 1024 * 1024 * 1024; //50TB\\n        datacapRulesMaxRemainingPercentageForNext = 20; //20%\\n\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) public view returns (uint16) {\\n        if (datasetRuleMaxReplicasInCountries[_countryCode] == 0) {\\n            return datasetRuleDefaultMaxReplicasPerCountry;\\n        } else {\\n            return datasetRuleMaxReplicasInCountries[_countryCode];\\n        }\\n    }\\n\\n    function setDatasetRuleMinRegionsPerDataset(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMinRegionsPerDataset = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMinRegionsPerDataset(_newValue);\\n    }\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleDefaultMaxReplicasPerCountry = _newValue;\\n        emit FilplusEvents.SetDatasetRuleDefaultMaxReplicasPerCountry(\\n            _newValue\\n        );\\n    }\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) onlyNotZero(_newValue) {\\n        datasetRuleMaxReplicasInCountries[_countryCode] = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMaxReplicasInCountry(\\n            _countryCode,\\n            _newValue\\n        );\\n    }\\n\\n    function setDatasetRuleMaxReplicasPerCity(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMaxReplicasPerCity = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMaxReplicasPerCity(_newValue);\\n    }\\n\\n    /// @notice set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMaxProportionOfMappingFilesToDataset = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMaxProportionOfMappingFilesToDataset(\\n            _newValue\\n        );\\n    }\\n\\n    function setDatasetRuleMinSPsPerDataset(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMinSPsPerDataset = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMinSPsPerDataset(_newValue);\\n    }\\n\\n    function setDatasetRuleMaxReplicasPerSP(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMaxReplicasPerSP = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMaxReplicasPerSP(_newValue);\\n    }\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMinTotalReplicasPerDataset = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMinTotalReplicasPerDataset(_newValue);\\n    }\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datasetRuleMaxTotalReplicasPerDataset = _newValue;\\n        emit FilplusEvents.SetDatasetRuleMaxTotalReplicasPerDataset(_newValue);\\n    }\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(\\n        uint64 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datacapRulesMaxAllocatedSizePerTime = _newValue;\\n        emit FilplusEvents.SetDatacapRulesMaxAllocatedSizePerTime(_newValue);\\n    }\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external onlyAddress(GOVERNANCE_ADDRESS) {\\n        datacapRulesMaxRemainingPercentageForNext = _newValue;\\n        emit FilplusEvents.SetDatacapRulesMaxRemainingPercentageForNext(\\n            _newValue\\n        );\\n    }\\n\\n    /// @notice Check if the storage regions complies with filplus rules.\\n    function isCompliantRuleMinRegionsPerDataset(\\n        uint16[] memory _regions\\n    ) internal view returns (bool) {\\n        uint256 count = _regions.countUniqueElements();\\n        if (count < datasetRuleMinRegionsPerDataset) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if the distribution of storage replica countries complies with filplus rules.\\n    function isCompliantRuleMaxReplicasPerCountry(\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) internal view returns (bool) {\\n        (uint256 uniqueCountryCount, uint16[] memory uniqueCountrys) = _countrys\\n            .uniqueElements();\\n\\n        for (uint256 i = 0; i < uniqueCountryCount; i++) {\\n            uint256 _value = _countrys.countOccurrences(uniqueCountrys[i]);\\n            if (_value > 1) {\\n                for (uint32 j = 0; j < _countrys.length; j++) {\\n                    if (uniqueCountrys[i] == _countrys[j]) {\\n                        require(_citys[j].length > 0, \\\"City is required\\\");\\n                    }\\n                }\\n            }\\n            if (\\n                _value > getDatasetRuleMaxReplicasInCountry(uniqueCountrys[i])\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Check if the distribution of storage replica cities complies with filplus rules\\n    function isCompliantRuleMaxReplicasPerCity(\\n        uint32[][] memory _citys\\n    ) internal view returns (bool) {\\n        uint256 cityCount = 0;\\n        for (uint256 i = 0; i < _citys.length; i++) {\\n            require(!_citys[i].hasDuplicates(), \\\"Invalid duplicate city\\\");\\n            cityCount += _citys[i].length;\\n        }\\n        uint32[] memory totalCitys = new uint32[](cityCount);\\n        uint256 cnt = 0;\\n\\n        for (uint256 i = 0; i < _citys.length; i++) {\\n            for (uint256 j = 0; j < _citys[i].length; j++) {\\n                totalCitys[cnt] = _citys[i][j];\\n                cnt++;\\n            }\\n        }\\n\\n        (uint256 count, uint32[] memory uniqueCitys) = totalCitys\\n            .uniqueElements();\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 _value = totalCitys.countOccurrences(uniqueCitys[i]);\\n            if (_value > datasetRuleMaxReplicasPerCity) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if the storage geolocation complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool) {\\n        if (!isCompliantRuleMinRegionsPerDataset(_regions)) {\\n            return false;\\n        }\\n\\n        if (!isCompliantRuleMaxReplicasPerCountry(_countrys, _citys)) {\\n            return false;\\n        }\\n\\n        if (!isCompliantRuleMaxReplicasPerCity(_citys)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool) {\\n        uint64 proportion = (_mappingFilesSize * 10000) / _sourceSize;\\n        if (proportion > datasetRuleMaxProportionOfMappingFilesToDataset) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool) {\\n        if (\\n            _regions.length != _dataPreparers.length ||\\n            _regions.length != _storageProviders.length ||\\n            _regions.length != _countrys.length ||\\n            _regions.length != _citys.length\\n        ) {\\n            return false;\\n        }\\n\\n        if (\\n            _regions.length > datasetRuleMaxTotalReplicasPerDataset ||\\n            _regions.length < datasetRuleMinTotalReplicasPerDataset ||\\n            _regions.length < datasetRuleMinSPsPerDataset\\n        ) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool) {\\n        if (_uniqueExists >= datasetRuleMinSPsPerDataset) {\\n            return true;\\n        }\\n\\n        if (\\n            _uniqueExists >= _requirementValue ||\\n            _totalExists >= _requirementValue\\n        ) {\\n            return false;\\n        }\\n\\n        if (\\n            (_requirementValue - _totalExists + _uniqueExists) >=\\n            datasetRuleMinSPsPerDataset\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool) {\\n        if (_value > datasetRuleMaxReplicasPerSP) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x952c77361ebfb00808b31cd4ac54ffc581c44ad3b7f9badd339b069dbb9ed612\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/FilplusEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title Filplus\\nlibrary FilplusEvents {\\n    // Event emitted when the maximum number of car replicas per car rule is set\\n    event SetCarRuleMaxCarReplicas(uint32 _newValue);\\n\\n    // Event emitted when the minimum regions per dataset rule is set\\n    event SetDatasetRuleMinRegionsPerDataset(uint32 _newValue);\\n\\n    // Event emitted when the default maximum replicas per country rule is set for a dataset\\n    event SetDatasetRuleDefaultMaxReplicasPerCountry(uint32 _newValue);\\n\\n    // Event emitted when the maximum replicas per country rule is set for a dataset\\n    event SetDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    );\\n\\n    // Event emitted when the maximum replicas per city rule is set for a dataset\\n    event SetDatasetRuleMaxReplicasPerCity(uint32 _newValue);\\n\\n    // Event emitted when the maximum proportion of dataset mapping files rule is set for a dataset\\n    event SetDatasetRuleMaxProportionOfMappingFilesToDataset(uint8 _newValue);\\n\\n    // Event emitted when the minimum service providers (SPs) per dataset rule is set\\n    event SetDatasetRuleMinSPsPerDataset(uint32 _newValue);\\n\\n    // Event emitted when the maximum replicas per SP (service provider) rule is set for a dataset\\n    event SetDatasetRuleMaxReplicasPerSP(uint32 _newValue);\\n\\n    // Event emitted when the minimum total replicas per dataset rule is set\\n    event SetDatasetRuleMinTotalReplicasPerDataset(uint32 _newValue);\\n\\n    // Event emitted when the maximum total replicas per dataset rule is set\\n    event SetDatasetRuleMaxTotalReplicasPerDataset(uint32 _newValue);\\n\\n    // Event emitted when the maximum allocated datacap size per time rule is set\\n    event SetDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue);\\n\\n    // Event emitted when the maximum remaining percentage for the next allocation rule is set\\n    event SetDatacapRulesMaxRemainingPercentageForNext(uint64 _newValue);\\n}\\n\",\"keccak256\":\"0x97a967c3101b65b3bd5470206bb70f7c64f82d2c88f072ade390813944852e34\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/utils/array/ArrayLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary ArrayUint16LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint16[] memory result = new uint16[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint16[] memory _elements,\\n        uint16 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint16[] memory updatedArray = new uint16[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint16[] memory result = new uint16[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint16[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint16[] memory _elements,\\n        uint16 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint32LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint32[] memory result = new uint32[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint32[] memory _elements,\\n        uint32 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint32[] memory updatedArray = new uint32[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint32[] memory result = new uint32[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint32[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint32[] memory _elements,\\n        uint32 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint64LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint64[] memory result = new uint64[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint64[] memory _elements,\\n        uint64 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint64[] memory updatedArray = new uint64[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint64[] memory result = new uint64[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint64[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint64[] memory _elements,\\n        uint64 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayAddressLIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256, address[] memory) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        address[] memory result = new address[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        address[] memory _elements,\\n        address _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256, address[] memory) {\\n        address[] memory updatedArray = new address[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        address[] memory result = new address[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        address[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        address[] memory _elements,\\n        address target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xa7e0795c087c5270c3af404ed45be0762fed1a09eea5ee547bd10fb76708d98b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051612dca61004c60003960008181610768015281816107a801528181610976015281816109b60152610af40152612dca6000f3fe60806040526004361061017e5760003560e01c80630143dd8614610183578063037864d2146101b95780630d73ce49146101e657806310f247591461021557806322ba9eb91461023757806322eede81146102595780632e6e21811461027b5780633659cfe61461029b578063388ee1e4146102bb578063441e5cda146102e9578063485cc955146103095780634f1ef2861461032957806350cc591f1461033c578063526cb8bf1461035c57806352d1902d1461037c57806353160a631461039e578063591abc51146103c05780635ac47b27146103e05780636f52df711461040057806384cbe2ee146104205780638e2f7e07146104425780639017e5da146104625780639ba6cf3d146104825780639eaa0818146104a2578063a155c939146104c2578063a54bfaf3146104dd578063a8bbce4a146104fd578063aaf10f421461051f578063b333af1414610534578063b363e1f514610554578063b77af5b914610574578063e502523c14610594578063f4e5f7bd146105b4575b600080fd5b34801561018f57600080fd5b506066546101a3906001600160a01b031681565b6040516101b09190611e43565b60405180910390f35b3480156101c557600080fd5b506101d96101d4366004611e6d565b6105e8565b6040516101b09190611e96565b3480156101f257600080fd5b5060665461020890600160b01b900461ffff1681565b6040516101b09190611eae565b34801561022157600080fd5b5060685461020890600160281b900461ffff1681565b34801561024357600080fd5b50610257610252366004611ebc565b610614565b005b34801561026557600080fd5b5060685461020890600160481b900461ffff1681565b34801561028757600080fd5b50610257610296366004611f19565b6106d3565b3480156102a757600080fd5b506102576102b6366004611f4e565b61075e565b3480156102c757600080fd5b506068546102dc90600160981b900460ff1681565b6040516101b09190611f78565b3480156102f557600080fd5b506068546102dc9062010000900460ff1681565b34801561031557600080fd5b50610257610324366004611f86565b610826565b6102576103373660046120b1565b61096c565b34801561034857600080fd5b506101d96103573660046122bd565b610a25565b34801561036857600080fd5b50610257610377366004611e6d565b610a72565b34801561038857600080fd5b50610391610ae7565b6040516101b09190612360565b3480156103aa57600080fd5b5060665461020890600160a01b900461ffff1681565b3480156103cc57600080fd5b506102576103db366004611e6d565b610b44565b3480156103ec57600080fd5b506102576103fb366004611e6d565b610bb9565b34801561040c57600080fd5b506101d961041b366004612474565b610c2e565b34801561042c57600080fd5b50606854610208906301000000900461ffff1681565b34801561044e57600080fd5b5061025761045d366004611e6d565b610cc8565b34801561046e57600080fd5b5061025761047d366004612581565b610d3d565b34801561048e57600080fd5b5061025761049d366004611e6d565b610db0565b3480156104ae57600080fd5b506101d96104bd3660046125a2565b610e1c565b3480156104ce57600080fd5b506068546102089061ffff1681565b3480156104e957600080fd5b506102576104f8366004612581565b610e6b565b34801561050957600080fd5b5060685461020890600160381b900461ffff1681565b34801561052b57600080fd5b506101a3610edc565b34801561054057600080fd5b506101d961054f3660046125d5565b610eeb565b34801561056057600080fd5b5061025761056f366004611e6d565b610f78565b34801561058057600080fd5b5061025761058f366004611e6d565b610fed565b3480156105a057600080fd5b506102086105af366004611e6d565b611062565b3480156105c057600080fd5b506068546105db90600160581b90046001600160401b031681565b6040516101b09190612624565b60685460009061ffff600160281b9091048116908316111561060c57506000919050565b506001919050565b6066546001600160a01b03163381146106485760405162461bcd60e51b815260040161063f90612669565b60405180910390fd5b61ffff8216600081900361066e5760405162461bcd60e51b815260040161063f906126a6565b61ffff84811660009081526067602052604090819020805461ffff191692861692909217909155517f8ab4eba2d4f9e3a97284cfd4fe6c8fa42683ddf246884a2a5dd80f71155b9b6a906106c590869086906126b6565b60405180910390a150505050565b6066546001600160a01b03163381146106fe5760405162461bcd60e51b815260040161063f90612669565b60688054600160581b600160981b031916600160581b6001600160401b038516021790556040517f1638393c4a55a697b67b203f5a98cad8e01692bcd3120d675a50db08cfb8bf8590610752908490612624565b60405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107a65760405162461bcd60e51b815260040161063f9061270b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107d86110b2565b6001600160a01b0316146107fe5760405162461bcd60e51b815260040161063f90612752565b610807816110ce565b6040805160008082526020820190925261082391839190611162565b50565b600054610100900460ff16158080156108465750600054600160ff909116105b80610867575061085530611244565b158015610867575060005460ff166001145b6108835760405162461bcd60e51b815260040161063f906127ad565b6000805460ff1916600117905580156108a6576000805461ff0019166101001790555b606580546001600160a01b03199081166001600160a01b038581169190911790925560668054600160b01b9387166001600160b01b031990911617600360a01b1761ffff60b01b19169290921790915560688054909116690a000500010005280001630a00001960811b0117905561091c611253565b8015610967576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061095e906001906127d1565b60405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b45760405162461bcd60e51b815260040161063f9061270b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109e66110b2565b6001600160a01b031614610a0c5760405162461bcd60e51b815260040161063f90612752565b610a15826110ce565b610a2182826001611162565b5050565b6000610a308461127c565b610a3c57506000610a6b565b610a4683836112b2565b610a5257506000610a6b565b610a5b82611402565b610a6757506000610a6b565b5060015b9392505050565b6066546001600160a01b0316338114610a9d5760405162461bcd60e51b815260040161063f90612669565b6068805461ffff60481b1916600160481b61ffff8516021790556040517ff3e1e0209d38dd56f8504bdc185d9ce72a34fa9d5b6e808065560ec6084c7c6e906107529084906127f4565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b315760405162461bcd60e51b815260040161063f90612857565b50600080516020612d4e83398151915290565b6066546001600160a01b0316338114610b6f5760405162461bcd60e51b815260040161063f90612669565b6068805461ffff60381b1916600160381b61ffff8516021790556040517f989560ddf0d69e0698028d5a7c597da8f58582a5313f17ddef330466673014e5906107529084906127f4565b6066546001600160a01b0316338114610be45760405162461bcd60e51b815260040161063f90612669565b6068805461ffff60281b1916600160281b61ffff8516021790556040517f7cd9f9c39b6ef5f9be70105d3d19deae176dba103dd39f60aa9618191b254c7e906107529084906127f4565b600085518451141580610c4357508451845114155b80610c5057508251845114155b80610c5d57508151845114155b15610c6a57506000610cbf565b6068548451600160481b90910461ffff161080610c9557506068548451600160381b90910461ffff16115b80610cae57506068548451630100000090910461ffff16115b15610cbb57506000610cbf565b5060015b95945050505050565b6066546001600160a01b0316338114610cf35760405162461bcd60e51b815260040161063f90612669565b6066805461ffff60b01b1916600160b01b61ffff8516021790556040517f3dbf7a2575028a05ffc2141b7b21a5ff5bf242f97ffc79f0691636b590c40b5b906107529084906127f4565b6066546001600160a01b0316338114610d685760405162461bcd60e51b815260040161063f90612669565b6068805460ff60981b1916600160981b60ff8516021790556040517f0aa0c61a91b651e8b70878d66dacee7f4f914728325a7f3a60320bfc8c4ac14b9061075290849061287e565b6066546001600160a01b0316338114610ddb5760405162461bcd60e51b815260040161063f90612669565b6068805461ffff191661ffff84161790556040517f7ffa68e54076df69500ebc7d9f525705d16b0b94ee599bfb4a84671f05ed469a906107529084906127f4565b60008082610e2c856127106128a2565b610e3691906128f4565b60685490915062010000900460ff166001600160401b0382161115610e5f576000915050610e65565b60019150505b92915050565b6066546001600160a01b0316338114610e965760405162461bcd60e51b815260040161063f90612669565b6068805462ff000019166201000060ff8516021790556040517fe966ef613df3398310b903faa1cda91b74c995736186944a358f9a28192638e890610752908490611f78565b6000610ee66110b2565b905090565b60685460009061ffff6301000000909104811690831610610f0e57506001610a6b565b8361ffff168261ffff16101580610f2d57508361ffff168361ffff1610155b15610f3a57506000610a6b565b6068546301000000900461ffff1682610f53858761291e565b610f5d919061293c565b61ffff1610610f6e57506001610a6b565b5060009392505050565b6066546001600160a01b0316338114610fa35760405162461bcd60e51b815260040161063f90612669565b6066805461ffff60a01b1916600160a01b61ffff8516021790556040517fade71b85c95015240c5fe8cb16620452565116b622a9f86e1bbd7cff817d0078906107529084906127f4565b6066546001600160a01b03163381146110185760405162461bcd60e51b815260040161063f90612669565b6068805464ffff0000001916630100000061ffff8516021790556040517f7d1d04ce8d3c095f3441cdafa66195f2468f0d1cd868bf891ac9c1b1e623607d906107529084906127f4565b61ffff8082166000908152606760205260408120549091168103611093575050606654600160b01b900461ffff1690565b5061ffff9081166000908152606760205260409020541690565b919050565b600080516020612d4e833981519152546001600160a01b031690565b606554604051632474521560e21b81526001600160a01b039091169060009082906391d1485490611105908490339060040161295a565b602060405180830381865afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612988565b6109675760405162461bcd60e51b815260040161063f906129da565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611195576109678361161a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156111ef575060408051601f3d908101601f191682019092526111ec918101906129fb565b60015b61120b5760405162461bcd60e51b815260040161063f90612a67565b600080516020612d4e83398151915281146112385760405162461bcd60e51b815260040161063f90612abd565b5061096783838361166e565b6001600160a01b03163b151590565b600054610100900460ff1661127a5760405162461bcd60e51b815260040161063f90612b15565b565b60008061128883611699565b606654909150600160a01b900461ffff168110156112a95750600092915050565b50600192915050565b60008060006112c0856117cc565b9150915060005b82811015610cbb5760006112fd8383815181106112e6576112e6612b25565b6020026020010151886119a490919063ffffffff16565b905060018111156113b55760005b87518163ffffffff1610156113b357878163ffffffff168151811061133257611332612b25565b602002602001015161ffff1684848151811061135057611350612b25565b602002602001015161ffff16036113a1576000878263ffffffff168151811061137b5761137b612b25565b602002602001015151116113a15760405162461bcd60e51b815260040161063f90612b62565b806113ab81612b72565b91505061130b565b505b6113d78383815181106113ca576113ca612b25565b6020026020010151611062565b61ffff168111156113ef576000945050505050610e65565b50806113fa81612b95565b9150506112c7565b600080805b83518110156114895761143284828151811061142557611425612b25565b6020026020010151611a02565b1561144f5760405162461bcd60e51b815260040161063f90612bd5565b83818151811061146157611461612b25565b602002602001015151826114759190612be5565b91508061148181612b95565b915050611407565b506000816001600160401b038111156114a4576114a4611fc3565b6040519080825280602002602001820160405280156114cd578160200160208202803683370190505b5090506000805b855181101561158f5760005b8682815181106114f2576114f2612b25565b60200260200101515181101561157c5786828151811061151457611514612b25565b6020026020010151818151811061152d5761152d612b25565b602002602001015184848151811061154757611547612b25565b63ffffffff909216602092830291909101909101528261156681612b95565b935050808061157490612b95565b9150506114e0565b508061158781612b95565b9150506114d4565b5060008061159c84611aa5565b9150915060005b8281101561160c5760006115d98383815181106115c2576115c2612b25565b602002602001015187611c7890919063ffffffff16565b60685490915061ffff168111156115f95750600098975050505050505050565b508061160481612b95565b9150506115a3565b506001979650505050505050565b61162381611244565b61163f5760405162461bcd60e51b815260040161063f90612c42565b600080516020612d4e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61167783611cd2565b6000825111806116845750805b15610967576116938383611d12565b50505050565b60008060009050600083516001600160401b038111156116bb576116bb611fc3565b6040519080825280602002602001820160405280156116e4578160200160208202803683370190505b50905060005b84518110156117c357600160005b8481101561175c5783818151811061171257611712612b25565b602002602001015161ffff1687848151811061173057611730612b25565b602002602001015161ffff160361174a576000915061175c565b8061175481612b95565b9150506116f8565b5080156117b05785828151811061177557611775612b25565b602002602001015183858151811061178f5761178f612b25565b61ffff90921660209283029190910190910152836117ac81612b95565b9450505b50806117bb81612b95565b9150506116ea565b50909392505050565b6000606060008084516001600160401b038111156117ec576117ec611fc3565b604051908082528060200260200182016040528015611815578160200160208202803683370190505b50905060005b85518110156118f457600160005b8481101561188d5783818151811061184357611843612b25565b602002602001015161ffff1688848151811061186157611861612b25565b602002602001015161ffff160361187b576000915061188d565b8061188581612b95565b915050611829565b5080156118e1578682815181106118a6576118a6612b25565b60200260200101518385815181106118c0576118c0612b25565b61ffff90921660209283029190910190910152836118dd81612b95565b9450505b50806118ec81612b95565b91505061181b565b506000826001600160401b0381111561190f5761190f611fc3565b604051908082528060200260200182016040528015611938578160200160208202803683370190505b50905060005b838110156119975782818151811061195857611958612b25565b602002602001015182828151811061197257611972612b25565b61ffff909216602092830291909101909101528061198f81612b95565b91505061193e565b5091959194509092505050565b600080805b84518110156119fa578361ffff168582815181106119c9576119c9612b25565b602002602001015161ffff16036119e857816119e481612b95565b9250505b806119f281612b95565b9150506119a9565b509392505050565b6000805b8251811015611a9c576000611a1c826001612be5565b90505b8351811015611a8957838181518110611a3a57611a3a612b25565b602002602001015163ffffffff16848381518110611a5a57611a5a612b25565b602002602001015163ffffffff1603611a77575060019392505050565b80611a8181612b95565b915050611a1f565b5080611a9481612b95565b915050611a06565b50600092915050565b6000606060008084516001600160401b03811115611ac557611ac5611fc3565b604051908082528060200260200182016040528015611aee578160200160208202803683370190505b50905060005b8551811015611bd357600160005b84811015611b6a57838181518110611b1c57611b1c612b25565b602002602001015163ffffffff16888481518110611b3c57611b3c612b25565b602002602001015163ffffffff1603611b585760009150611b6a565b80611b6281612b95565b915050611b02565b508015611bc057868281518110611b8357611b83612b25565b6020026020010151838581518110611b9d57611b9d612b25565b63ffffffff9092166020928302919091019091015283611bbc81612b95565b9450505b5080611bcb81612b95565b915050611af4565b506000826001600160401b03811115611bee57611bee611fc3565b604051908082528060200260200182016040528015611c17578160200160208202803683370190505b50905060005b8381101561199757828181518110611c3757611c37612b25565b6020026020010151828281518110611c5157611c51612b25565b63ffffffff9092166020928302919091019091015280611c7081612b95565b915050611c1d565b600080805b84518110156119fa578363ffffffff16858281518110611c9f57611c9f612b25565b602002602001015163ffffffff1603611cc05781611cbc81612b95565b9250505b80611cca81612b95565b915050611c7d565b611cdb8161161a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610a6b8383604051806060016040528060278152602001612d6e602791396060600080856001600160a01b031685604051611d4f9190612c98565b600060405180830381855af49150503d8060008114611d8a576040519150601f19603f3d011682016040523d82523d6000602084013e611d8f565b606091505b5091509150611da086838387611daa565b9695505050505050565b60608315611de7578251600003611de057611dc485611244565b611de05760405162461bcd60e51b815260040161063f90612cd8565b5081611df1565b611df18383611df9565b949350505050565b815115611e095781518083602001fd5b8060405162461bcd60e51b815260040161063f9190612d1c565b60006001600160a01b038216610e65565b611e3d81611e23565b82525050565b60208101610e658284611e34565b61ffff81165b811461082357600080fd5b8035610e6581611e51565b600060208284031215611e8257611e82600080fd5b6000611df18484611e62565b801515611e3d565b60208101610e658284611e8e565b61ffff8116611e3d565b60208101610e658284611ea4565b60008060408385031215611ed257611ed2600080fd5b6000611ede8585611e62565b9250506020611eef85828601611e62565b9150509250929050565b6001600160401b031690565b611e5781611ef9565b8035610e6581611f05565b600060208284031215611f2e57611f2e600080fd5b6000611df18484611f0e565b611e5781611e23565b8035610e6581611f3a565b600060208284031215611f6357611f63600080fd5b6000611df18484611f43565b60ff8116611e3d565b60208101610e658284611f6f565b60008060408385031215611f9c57611f9c600080fd5b6000611fa88585611f43565b9250506020611eef85828601611f43565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611fe282611fb9565b81018181106001600160401b0382111715611fff57611fff611fc3565b6040525050565b600061201160405190565b90506110ad8282611fd9565b60006001600160401b0382111561203657612036611fc3565b61203f82611fb9565b60200192915050565b82818337506000910152565b60006120676120628461201d565b612006565b90508281526020810184848401111561208257612082600080fd5b6119fa848285612048565b600082601f8301126120a1576120a1600080fd5b8135611df1848260208601612054565b600080604083850312156120c7576120c7600080fd5b60006120d38585611f43565b92505060208301356001600160401b038111156120f2576120f2600080fd5b611eef8582860161208d565b60006001600160401b0382111561211757612117611fc3565b5060209081020190565b600061212f612062846120fe565b8381529050602080820190840283018581111561214e5761214e600080fd5b835b8181101561217257806121638882611e62565b84525060209283019201612150565b5050509392505050565b600082601f83011261219057612190600080fd5b8135611df1848260208601612121565b63ffffffff8116611e57565b8035610e65816121a0565b60006121c5612062846120fe565b838152905060208082019084028301858111156121e4576121e4600080fd5b835b8181101561217257806121f988826121ac565b845250602092830192016121e6565b600082601f83011261221c5761221c600080fd5b8135611df18482602086016121b7565b600061223a612062846120fe565b8381529050602080820190840283018581111561225957612259600080fd5b835b818110156121725780356001600160401b0381111561227c5761227c600080fd5b8086016122898982612208565b855250506020928301920161225b565b600082601f8301126122ad576122ad600080fd5b8135611df184826020860161222c565b6000806000606084860312156122d5576122d5600080fd5b83356001600160401b038111156122ee576122ee600080fd5b6122fa8682870161217c565b93505060208401356001600160401b0381111561231957612319600080fd5b6123258682870161217c565b92505060408401356001600160401b0381111561234457612344600080fd5b61235086828701612299565b9150509250925092565b80611e3d565b60208101610e65828461235a565b600061237c612062846120fe565b8381529050602080820190840283018581111561239b5761239b600080fd5b835b8181101561217257806123b08882611f43565b8452506020928301920161239d565b600082601f8301126123d3576123d3600080fd5b8135611df184826020860161236e565b60006123f1612062846120fe565b8381529050602080820190840283018581111561241057612410600080fd5b835b818110156121725780356001600160401b0381111561243357612433600080fd5b80860161244089826123bf565b8552505060209283019201612412565b600082601f83011261246457612464600080fd5b8135611df18482602086016123e3565b600080600080600060a0868803121561248f5761248f600080fd5b85356001600160401b038111156124a8576124a8600080fd5b6124b488828901612450565b95505060208601356001600160401b038111156124d3576124d3600080fd5b6124df88828901612450565b94505060408601356001600160401b038111156124fe576124fe600080fd5b61250a8882890161217c565b93505060608601356001600160401b0381111561252957612529600080fd5b6125358882890161217c565b92505060808601356001600160401b0381111561255457612554600080fd5b61256088828901612299565b9150509295509295909350565b60ff8116611e57565b8035610e658161256d565b60006020828403121561259657612596600080fd5b6000611df18484612576565b600080604083850312156125b8576125b8600080fd5b60006125c48585611f0e565b9250506020611eef85828601611f0e565b6000806000606084860312156125ed576125ed600080fd5b60006125f98686611e62565b935050602061260a86828701611e62565b925050604061235086828701611e62565b611e3d81611ef9565b60208101610e65828461261b565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c000000815291505b5060200190565b60208082528101610e6581612632565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b81529150612662565b60208082528101610e6581612679565b604081016126c48285611ea4565b610a6b6020830184611ea4565b602c8152600060208201600080516020612d2e83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610e65816126d1565b602c8152600060208201600080516020612d2e83398151915281526b6163746976652070726f787960a01b60208201529150612704565b60208082528101610e658161271b565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612704565b60208082528101610e6581612762565b600060ff8216610e65565b611e3d816127bd565b60208101610e6582846127c8565b600061ffff8216610e65565b611e3d816127df565b60208101610e6582846127eb565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612704565b60208082528101610e6581612802565b6000610e6560ff8316611ef9565b611e3d81612867565b60208101610e658284612875565b634e487b7160e01b600052601160045260246000fd5b60006128ad82611ef9565b91506128b883611ef9565b92508282026128c681611ef9565b91508082146128d7576128d761288c565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60006128ff82611ef9565b915061290a83611ef9565b925082612919576129196128de565b500490565b61ffff918216919081169082820390811115610e6557610e6561288c565b61ffff918216919081169082820190811115610e6557610e6561288c565b60408101612968828561235a565b610a6b6020830184611e34565b801515611e57565b8051610e6581612975565b60006020828403121561299d5761299d600080fd5b6000611df1848461297d565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612662565b60208082528101610e65816129a9565b80611e57565b8051610e65816129ea565b600060208284031215612a1057612a10600080fd5b6000611df184846129f0565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612704565b60208082528101610e6581612a1c565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612704565b60208082528101610e6581612a77565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612704565b60208082528101610e6581612acd565b634e487b7160e01b600052603260045260246000fd5b601081526000602082016f10da5d1e481a5cc81c995c5d5a5c995960821b81529150612662565b60208082528101610e6581612b3b565b63ffffffff16600063fffffffe198201612b8e57612b8e61288c565b5060010190565b60006000198203612b8e57612b8e61288c565b6016815260006020820175496e76616c6964206475706c6963617465206369747960501b81529150612662565b60208082528101610e6581612ba8565b80820180821115610e6557610e6561288c565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612704565b60208082528101610e6581612bf8565b60005b83811015612c6d578181015183820152602001612c55565b50506000910152565b6000612c80825190565b612c8e818560208601612c52565b9290920192915050565b6000610a6b8284612c76565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612662565b60208082528101610e6581612ca4565b6000612cf2825190565b808452602084019350612d09818560208601612c52565b612d1281611fb9565b9093019392505050565b60208082528101610a6b8184612ce856fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cd517a6a91bad77ee1443ad49c6be97160d461ff30e503a94848f0feedc0344664736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061017e5760003560e01c80630143dd8614610183578063037864d2146101b95780630d73ce49146101e657806310f247591461021557806322ba9eb91461023757806322eede81146102595780632e6e21811461027b5780633659cfe61461029b578063388ee1e4146102bb578063441e5cda146102e9578063485cc955146103095780634f1ef2861461032957806350cc591f1461033c578063526cb8bf1461035c57806352d1902d1461037c57806353160a631461039e578063591abc51146103c05780635ac47b27146103e05780636f52df711461040057806384cbe2ee146104205780638e2f7e07146104425780639017e5da146104625780639ba6cf3d146104825780639eaa0818146104a2578063a155c939146104c2578063a54bfaf3146104dd578063a8bbce4a146104fd578063aaf10f421461051f578063b333af1414610534578063b363e1f514610554578063b77af5b914610574578063e502523c14610594578063f4e5f7bd146105b4575b600080fd5b34801561018f57600080fd5b506066546101a3906001600160a01b031681565b6040516101b09190611e43565b60405180910390f35b3480156101c557600080fd5b506101d96101d4366004611e6d565b6105e8565b6040516101b09190611e96565b3480156101f257600080fd5b5060665461020890600160b01b900461ffff1681565b6040516101b09190611eae565b34801561022157600080fd5b5060685461020890600160281b900461ffff1681565b34801561024357600080fd5b50610257610252366004611ebc565b610614565b005b34801561026557600080fd5b5060685461020890600160481b900461ffff1681565b34801561028757600080fd5b50610257610296366004611f19565b6106d3565b3480156102a757600080fd5b506102576102b6366004611f4e565b61075e565b3480156102c757600080fd5b506068546102dc90600160981b900460ff1681565b6040516101b09190611f78565b3480156102f557600080fd5b506068546102dc9062010000900460ff1681565b34801561031557600080fd5b50610257610324366004611f86565b610826565b6102576103373660046120b1565b61096c565b34801561034857600080fd5b506101d96103573660046122bd565b610a25565b34801561036857600080fd5b50610257610377366004611e6d565b610a72565b34801561038857600080fd5b50610391610ae7565b6040516101b09190612360565b3480156103aa57600080fd5b5060665461020890600160a01b900461ffff1681565b3480156103cc57600080fd5b506102576103db366004611e6d565b610b44565b3480156103ec57600080fd5b506102576103fb366004611e6d565b610bb9565b34801561040c57600080fd5b506101d961041b366004612474565b610c2e565b34801561042c57600080fd5b50606854610208906301000000900461ffff1681565b34801561044e57600080fd5b5061025761045d366004611e6d565b610cc8565b34801561046e57600080fd5b5061025761047d366004612581565b610d3d565b34801561048e57600080fd5b5061025761049d366004611e6d565b610db0565b3480156104ae57600080fd5b506101d96104bd3660046125a2565b610e1c565b3480156104ce57600080fd5b506068546102089061ffff1681565b3480156104e957600080fd5b506102576104f8366004612581565b610e6b565b34801561050957600080fd5b5060685461020890600160381b900461ffff1681565b34801561052b57600080fd5b506101a3610edc565b34801561054057600080fd5b506101d961054f3660046125d5565b610eeb565b34801561056057600080fd5b5061025761056f366004611e6d565b610f78565b34801561058057600080fd5b5061025761058f366004611e6d565b610fed565b3480156105a057600080fd5b506102086105af366004611e6d565b611062565b3480156105c057600080fd5b506068546105db90600160581b90046001600160401b031681565b6040516101b09190612624565b60685460009061ffff600160281b9091048116908316111561060c57506000919050565b506001919050565b6066546001600160a01b03163381146106485760405162461bcd60e51b815260040161063f90612669565b60405180910390fd5b61ffff8216600081900361066e5760405162461bcd60e51b815260040161063f906126a6565b61ffff84811660009081526067602052604090819020805461ffff191692861692909217909155517f8ab4eba2d4f9e3a97284cfd4fe6c8fa42683ddf246884a2a5dd80f71155b9b6a906106c590869086906126b6565b60405180910390a150505050565b6066546001600160a01b03163381146106fe5760405162461bcd60e51b815260040161063f90612669565b60688054600160581b600160981b031916600160581b6001600160401b038516021790556040517f1638393c4a55a697b67b203f5a98cad8e01692bcd3120d675a50db08cfb8bf8590610752908490612624565b60405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107a65760405162461bcd60e51b815260040161063f9061270b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107d86110b2565b6001600160a01b0316146107fe5760405162461bcd60e51b815260040161063f90612752565b610807816110ce565b6040805160008082526020820190925261082391839190611162565b50565b600054610100900460ff16158080156108465750600054600160ff909116105b80610867575061085530611244565b158015610867575060005460ff166001145b6108835760405162461bcd60e51b815260040161063f906127ad565b6000805460ff1916600117905580156108a6576000805461ff0019166101001790555b606580546001600160a01b03199081166001600160a01b038581169190911790925560668054600160b01b9387166001600160b01b031990911617600360a01b1761ffff60b01b19169290921790915560688054909116690a000500010005280001630a00001960811b0117905561091c611253565b8015610967576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061095e906001906127d1565b60405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b45760405162461bcd60e51b815260040161063f9061270b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109e66110b2565b6001600160a01b031614610a0c5760405162461bcd60e51b815260040161063f90612752565b610a15826110ce565b610a2182826001611162565b5050565b6000610a308461127c565b610a3c57506000610a6b565b610a4683836112b2565b610a5257506000610a6b565b610a5b82611402565b610a6757506000610a6b565b5060015b9392505050565b6066546001600160a01b0316338114610a9d5760405162461bcd60e51b815260040161063f90612669565b6068805461ffff60481b1916600160481b61ffff8516021790556040517ff3e1e0209d38dd56f8504bdc185d9ce72a34fa9d5b6e808065560ec6084c7c6e906107529084906127f4565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b315760405162461bcd60e51b815260040161063f90612857565b50600080516020612d4e83398151915290565b6066546001600160a01b0316338114610b6f5760405162461bcd60e51b815260040161063f90612669565b6068805461ffff60381b1916600160381b61ffff8516021790556040517f989560ddf0d69e0698028d5a7c597da8f58582a5313f17ddef330466673014e5906107529084906127f4565b6066546001600160a01b0316338114610be45760405162461bcd60e51b815260040161063f90612669565b6068805461ffff60281b1916600160281b61ffff8516021790556040517f7cd9f9c39b6ef5f9be70105d3d19deae176dba103dd39f60aa9618191b254c7e906107529084906127f4565b600085518451141580610c4357508451845114155b80610c5057508251845114155b80610c5d57508151845114155b15610c6a57506000610cbf565b6068548451600160481b90910461ffff161080610c9557506068548451600160381b90910461ffff16115b80610cae57506068548451630100000090910461ffff16115b15610cbb57506000610cbf565b5060015b95945050505050565b6066546001600160a01b0316338114610cf35760405162461bcd60e51b815260040161063f90612669565b6066805461ffff60b01b1916600160b01b61ffff8516021790556040517f3dbf7a2575028a05ffc2141b7b21a5ff5bf242f97ffc79f0691636b590c40b5b906107529084906127f4565b6066546001600160a01b0316338114610d685760405162461bcd60e51b815260040161063f90612669565b6068805460ff60981b1916600160981b60ff8516021790556040517f0aa0c61a91b651e8b70878d66dacee7f4f914728325a7f3a60320bfc8c4ac14b9061075290849061287e565b6066546001600160a01b0316338114610ddb5760405162461bcd60e51b815260040161063f90612669565b6068805461ffff191661ffff84161790556040517f7ffa68e54076df69500ebc7d9f525705d16b0b94ee599bfb4a84671f05ed469a906107529084906127f4565b60008082610e2c856127106128a2565b610e3691906128f4565b60685490915062010000900460ff166001600160401b0382161115610e5f576000915050610e65565b60019150505b92915050565b6066546001600160a01b0316338114610e965760405162461bcd60e51b815260040161063f90612669565b6068805462ff000019166201000060ff8516021790556040517fe966ef613df3398310b903faa1cda91b74c995736186944a358f9a28192638e890610752908490611f78565b6000610ee66110b2565b905090565b60685460009061ffff6301000000909104811690831610610f0e57506001610a6b565b8361ffff168261ffff16101580610f2d57508361ffff168361ffff1610155b15610f3a57506000610a6b565b6068546301000000900461ffff1682610f53858761291e565b610f5d919061293c565b61ffff1610610f6e57506001610a6b565b5060009392505050565b6066546001600160a01b0316338114610fa35760405162461bcd60e51b815260040161063f90612669565b6066805461ffff60a01b1916600160a01b61ffff8516021790556040517fade71b85c95015240c5fe8cb16620452565116b622a9f86e1bbd7cff817d0078906107529084906127f4565b6066546001600160a01b03163381146110185760405162461bcd60e51b815260040161063f90612669565b6068805464ffff0000001916630100000061ffff8516021790556040517f7d1d04ce8d3c095f3441cdafa66195f2468f0d1cd868bf891ac9c1b1e623607d906107529084906127f4565b61ffff8082166000908152606760205260408120549091168103611093575050606654600160b01b900461ffff1690565b5061ffff9081166000908152606760205260409020541690565b919050565b600080516020612d4e833981519152546001600160a01b031690565b606554604051632474521560e21b81526001600160a01b039091169060009082906391d1485490611105908490339060040161295a565b602060405180830381865afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612988565b6109675760405162461bcd60e51b815260040161063f906129da565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611195576109678361161a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156111ef575060408051601f3d908101601f191682019092526111ec918101906129fb565b60015b61120b5760405162461bcd60e51b815260040161063f90612a67565b600080516020612d4e83398151915281146112385760405162461bcd60e51b815260040161063f90612abd565b5061096783838361166e565b6001600160a01b03163b151590565b600054610100900460ff1661127a5760405162461bcd60e51b815260040161063f90612b15565b565b60008061128883611699565b606654909150600160a01b900461ffff168110156112a95750600092915050565b50600192915050565b60008060006112c0856117cc565b9150915060005b82811015610cbb5760006112fd8383815181106112e6576112e6612b25565b6020026020010151886119a490919063ffffffff16565b905060018111156113b55760005b87518163ffffffff1610156113b357878163ffffffff168151811061133257611332612b25565b602002602001015161ffff1684848151811061135057611350612b25565b602002602001015161ffff16036113a1576000878263ffffffff168151811061137b5761137b612b25565b602002602001015151116113a15760405162461bcd60e51b815260040161063f90612b62565b806113ab81612b72565b91505061130b565b505b6113d78383815181106113ca576113ca612b25565b6020026020010151611062565b61ffff168111156113ef576000945050505050610e65565b50806113fa81612b95565b9150506112c7565b600080805b83518110156114895761143284828151811061142557611425612b25565b6020026020010151611a02565b1561144f5760405162461bcd60e51b815260040161063f90612bd5565b83818151811061146157611461612b25565b602002602001015151826114759190612be5565b91508061148181612b95565b915050611407565b506000816001600160401b038111156114a4576114a4611fc3565b6040519080825280602002602001820160405280156114cd578160200160208202803683370190505b5090506000805b855181101561158f5760005b8682815181106114f2576114f2612b25565b60200260200101515181101561157c5786828151811061151457611514612b25565b6020026020010151818151811061152d5761152d612b25565b602002602001015184848151811061154757611547612b25565b63ffffffff909216602092830291909101909101528261156681612b95565b935050808061157490612b95565b9150506114e0565b508061158781612b95565b9150506114d4565b5060008061159c84611aa5565b9150915060005b8281101561160c5760006115d98383815181106115c2576115c2612b25565b602002602001015187611c7890919063ffffffff16565b60685490915061ffff168111156115f95750600098975050505050505050565b508061160481612b95565b9150506115a3565b506001979650505050505050565b61162381611244565b61163f5760405162461bcd60e51b815260040161063f90612c42565b600080516020612d4e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61167783611cd2565b6000825111806116845750805b15610967576116938383611d12565b50505050565b60008060009050600083516001600160401b038111156116bb576116bb611fc3565b6040519080825280602002602001820160405280156116e4578160200160208202803683370190505b50905060005b84518110156117c357600160005b8481101561175c5783818151811061171257611712612b25565b602002602001015161ffff1687848151811061173057611730612b25565b602002602001015161ffff160361174a576000915061175c565b8061175481612b95565b9150506116f8565b5080156117b05785828151811061177557611775612b25565b602002602001015183858151811061178f5761178f612b25565b61ffff90921660209283029190910190910152836117ac81612b95565b9450505b50806117bb81612b95565b9150506116ea565b50909392505050565b6000606060008084516001600160401b038111156117ec576117ec611fc3565b604051908082528060200260200182016040528015611815578160200160208202803683370190505b50905060005b85518110156118f457600160005b8481101561188d5783818151811061184357611843612b25565b602002602001015161ffff1688848151811061186157611861612b25565b602002602001015161ffff160361187b576000915061188d565b8061188581612b95565b915050611829565b5080156118e1578682815181106118a6576118a6612b25565b60200260200101518385815181106118c0576118c0612b25565b61ffff90921660209283029190910190910152836118dd81612b95565b9450505b50806118ec81612b95565b91505061181b565b506000826001600160401b0381111561190f5761190f611fc3565b604051908082528060200260200182016040528015611938578160200160208202803683370190505b50905060005b838110156119975782818151811061195857611958612b25565b602002602001015182828151811061197257611972612b25565b61ffff909216602092830291909101909101528061198f81612b95565b91505061193e565b5091959194509092505050565b600080805b84518110156119fa578361ffff168582815181106119c9576119c9612b25565b602002602001015161ffff16036119e857816119e481612b95565b9250505b806119f281612b95565b9150506119a9565b509392505050565b6000805b8251811015611a9c576000611a1c826001612be5565b90505b8351811015611a8957838181518110611a3a57611a3a612b25565b602002602001015163ffffffff16848381518110611a5a57611a5a612b25565b602002602001015163ffffffff1603611a77575060019392505050565b80611a8181612b95565b915050611a1f565b5080611a9481612b95565b915050611a06565b50600092915050565b6000606060008084516001600160401b03811115611ac557611ac5611fc3565b604051908082528060200260200182016040528015611aee578160200160208202803683370190505b50905060005b8551811015611bd357600160005b84811015611b6a57838181518110611b1c57611b1c612b25565b602002602001015163ffffffff16888481518110611b3c57611b3c612b25565b602002602001015163ffffffff1603611b585760009150611b6a565b80611b6281612b95565b915050611b02565b508015611bc057868281518110611b8357611b83612b25565b6020026020010151838581518110611b9d57611b9d612b25565b63ffffffff9092166020928302919091019091015283611bbc81612b95565b9450505b5080611bcb81612b95565b915050611af4565b506000826001600160401b03811115611bee57611bee611fc3565b604051908082528060200260200182016040528015611c17578160200160208202803683370190505b50905060005b8381101561199757828181518110611c3757611c37612b25565b6020026020010151828281518110611c5157611c51612b25565b63ffffffff9092166020928302919091019091015280611c7081612b95565b915050611c1d565b600080805b84518110156119fa578363ffffffff16858281518110611c9f57611c9f612b25565b602002602001015163ffffffff1603611cc05781611cbc81612b95565b9250505b80611cca81612b95565b915050611c7d565b611cdb8161161a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610a6b8383604051806060016040528060278152602001612d6e602791396060600080856001600160a01b031685604051611d4f9190612c98565b600060405180830381855af49150503d8060008114611d8a576040519150601f19603f3d011682016040523d82523d6000602084013e611d8f565b606091505b5091509150611da086838387611daa565b9695505050505050565b60608315611de7578251600003611de057611dc485611244565b611de05760405162461bcd60e51b815260040161063f90612cd8565b5081611df1565b611df18383611df9565b949350505050565b815115611e095781518083602001fd5b8060405162461bcd60e51b815260040161063f9190612d1c565b60006001600160a01b038216610e65565b611e3d81611e23565b82525050565b60208101610e658284611e34565b61ffff81165b811461082357600080fd5b8035610e6581611e51565b600060208284031215611e8257611e82600080fd5b6000611df18484611e62565b801515611e3d565b60208101610e658284611e8e565b61ffff8116611e3d565b60208101610e658284611ea4565b60008060408385031215611ed257611ed2600080fd5b6000611ede8585611e62565b9250506020611eef85828601611e62565b9150509250929050565b6001600160401b031690565b611e5781611ef9565b8035610e6581611f05565b600060208284031215611f2e57611f2e600080fd5b6000611df18484611f0e565b611e5781611e23565b8035610e6581611f3a565b600060208284031215611f6357611f63600080fd5b6000611df18484611f43565b60ff8116611e3d565b60208101610e658284611f6f565b60008060408385031215611f9c57611f9c600080fd5b6000611fa88585611f43565b9250506020611eef85828601611f43565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611fe282611fb9565b81018181106001600160401b0382111715611fff57611fff611fc3565b6040525050565b600061201160405190565b90506110ad8282611fd9565b60006001600160401b0382111561203657612036611fc3565b61203f82611fb9565b60200192915050565b82818337506000910152565b60006120676120628461201d565b612006565b90508281526020810184848401111561208257612082600080fd5b6119fa848285612048565b600082601f8301126120a1576120a1600080fd5b8135611df1848260208601612054565b600080604083850312156120c7576120c7600080fd5b60006120d38585611f43565b92505060208301356001600160401b038111156120f2576120f2600080fd5b611eef8582860161208d565b60006001600160401b0382111561211757612117611fc3565b5060209081020190565b600061212f612062846120fe565b8381529050602080820190840283018581111561214e5761214e600080fd5b835b8181101561217257806121638882611e62565b84525060209283019201612150565b5050509392505050565b600082601f83011261219057612190600080fd5b8135611df1848260208601612121565b63ffffffff8116611e57565b8035610e65816121a0565b60006121c5612062846120fe565b838152905060208082019084028301858111156121e4576121e4600080fd5b835b8181101561217257806121f988826121ac565b845250602092830192016121e6565b600082601f83011261221c5761221c600080fd5b8135611df18482602086016121b7565b600061223a612062846120fe565b8381529050602080820190840283018581111561225957612259600080fd5b835b818110156121725780356001600160401b0381111561227c5761227c600080fd5b8086016122898982612208565b855250506020928301920161225b565b600082601f8301126122ad576122ad600080fd5b8135611df184826020860161222c565b6000806000606084860312156122d5576122d5600080fd5b83356001600160401b038111156122ee576122ee600080fd5b6122fa8682870161217c565b93505060208401356001600160401b0381111561231957612319600080fd5b6123258682870161217c565b92505060408401356001600160401b0381111561234457612344600080fd5b61235086828701612299565b9150509250925092565b80611e3d565b60208101610e65828461235a565b600061237c612062846120fe565b8381529050602080820190840283018581111561239b5761239b600080fd5b835b8181101561217257806123b08882611f43565b8452506020928301920161239d565b600082601f8301126123d3576123d3600080fd5b8135611df184826020860161236e565b60006123f1612062846120fe565b8381529050602080820190840283018581111561241057612410600080fd5b835b818110156121725780356001600160401b0381111561243357612433600080fd5b80860161244089826123bf565b8552505060209283019201612412565b600082601f83011261246457612464600080fd5b8135611df18482602086016123e3565b600080600080600060a0868803121561248f5761248f600080fd5b85356001600160401b038111156124a8576124a8600080fd5b6124b488828901612450565b95505060208601356001600160401b038111156124d3576124d3600080fd5b6124df88828901612450565b94505060408601356001600160401b038111156124fe576124fe600080fd5b61250a8882890161217c565b93505060608601356001600160401b0381111561252957612529600080fd5b6125358882890161217c565b92505060808601356001600160401b0381111561255457612554600080fd5b61256088828901612299565b9150509295509295909350565b60ff8116611e57565b8035610e658161256d565b60006020828403121561259657612596600080fd5b6000611df18484612576565b600080604083850312156125b8576125b8600080fd5b60006125c48585611f0e565b9250506020611eef85828601611f0e565b6000806000606084860312156125ed576125ed600080fd5b60006125f98686611e62565b935050602061260a86828701611e62565b925050604061235086828701611e62565b611e3d81611ef9565b60208101610e65828461261b565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c000000815291505b5060200190565b60208082528101610e6581612632565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b81529150612662565b60208082528101610e6581612679565b604081016126c48285611ea4565b610a6b6020830184611ea4565b602c8152600060208201600080516020612d2e83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610e65816126d1565b602c8152600060208201600080516020612d2e83398151915281526b6163746976652070726f787960a01b60208201529150612704565b60208082528101610e658161271b565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612704565b60208082528101610e6581612762565b600060ff8216610e65565b611e3d816127bd565b60208101610e6582846127c8565b600061ffff8216610e65565b611e3d816127df565b60208101610e6582846127eb565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612704565b60208082528101610e6581612802565b6000610e6560ff8316611ef9565b611e3d81612867565b60208101610e658284612875565b634e487b7160e01b600052601160045260246000fd5b60006128ad82611ef9565b91506128b883611ef9565b92508282026128c681611ef9565b91508082146128d7576128d761288c565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60006128ff82611ef9565b915061290a83611ef9565b925082612919576129196128de565b500490565b61ffff918216919081169082820390811115610e6557610e6561288c565b61ffff918216919081169082820190811115610e6557610e6561288c565b60408101612968828561235a565b610a6b6020830184611e34565b801515611e57565b8051610e6581612975565b60006020828403121561299d5761299d600080fd5b6000611df1848461297d565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612662565b60208082528101610e65816129a9565b80611e57565b8051610e65816129ea565b600060208284031215612a1057612a10600080fd5b6000611df184846129f0565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612704565b60208082528101610e6581612a1c565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612704565b60208082528101610e6581612a77565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612704565b60208082528101610e6581612acd565b634e487b7160e01b600052603260045260246000fd5b601081526000602082016f10da5d1e481a5cc81c995c5d5a5c995960821b81529150612662565b60208082528101610e6581612b3b565b63ffffffff16600063fffffffe198201612b8e57612b8e61288c565b5060010190565b60006000198203612b8e57612b8e61288c565b6016815260006020820175496e76616c6964206475706c6963617465206369747960501b81529150612662565b60208082528101610e6581612ba8565b80820180821115610e6557610e6561288c565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612704565b60208082528101610e6581612bf8565b60005b83811015612c6d578181015183820152602001612c55565b50506000910152565b6000612c80825190565b612c8e818560208601612c52565b9290920192915050565b6000610a6b8284612c76565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612662565b60208082528101610e6581612ca4565b6000612cf2825190565b808452602084019350612d09818560208601612c52565b612d1281611fb9565b9093019392505050565b60208082528101610a6b8184612ce856fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cd517a6a91bad77ee1443ad49c6be97160d461ff30e503a94848f0feedc0344664736f6c63430008150033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Filplus",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "datacapRulesMaxAllocatedSizePerTime()": {
        "notice": "datacap rules"
      },
      "datasetRuleMinRegionsPerDataset()": {
        "notice": "dataset region rules"
      },
      "datasetRuleMinSPsPerDataset()": {
        "notice": "dataset sp rules"
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "initialize(address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "isCompliantRuleGeolocation(uint16[],uint16[],uint32[][])": {
        "notice": "Check if the storage geolocation complies with filplus rules."
      },
      "isCompliantRuleMaxProportionOfMappingFilesToDataset(uint64,uint64)": {
        "notice": "Check if the mappingFiles percentage in the dataset complies with filplus rules."
      },
      "isCompliantRuleMaxReplicasPerSP(uint16)": {
        "notice": "Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`."
      },
      "isCompliantRuleMinSPsPerDataset(uint16,uint16,uint16)": {
        "notice": "Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`."
      },
      "isCompliantRuleTotalReplicasPerDataset(address[][],address[][],uint16[],uint16[],uint32[][])": {
        "notice": "Check if the total number of storage replicas complies with filplus rules."
      },
      "setDatasetRuleMaxProportionOfMappingFilesToDataset(uint8)": {
        "notice": "set maximum proportion of dataset mapping files"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24869,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "roles",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRoles)29558"
      },
      {
        "astId": 24871,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "GOVERNANCE_ADDRESS",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 24874,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMinRegionsPerDataset",
        "offset": 20,
        "slot": "102",
        "type": "t_uint16"
      },
      {
        "astId": 24876,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleDefaultMaxReplicasPerCountry",
        "offset": 22,
        "slot": "102",
        "type": "t_uint16"
      },
      {
        "astId": 24880,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMaxReplicasInCountries",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 24882,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMaxReplicasPerCity",
        "offset": 0,
        "slot": "104",
        "type": "t_uint16"
      },
      {
        "astId": 24884,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMaxProportionOfMappingFilesToDataset",
        "offset": 2,
        "slot": "104",
        "type": "t_uint8"
      },
      {
        "astId": 24887,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMinSPsPerDataset",
        "offset": 3,
        "slot": "104",
        "type": "t_uint16"
      },
      {
        "astId": 24889,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMaxReplicasPerSP",
        "offset": 5,
        "slot": "104",
        "type": "t_uint16"
      },
      {
        "astId": 24891,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMinTotalReplicasPerDataset",
        "offset": 7,
        "slot": "104",
        "type": "t_uint16"
      },
      {
        "astId": 24893,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datasetRuleMaxTotalReplicasPerDataset",
        "offset": 9,
        "slot": "104",
        "type": "t_uint16"
      },
      {
        "astId": 24896,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datacapRulesMaxAllocatedSizePerTime",
        "offset": 11,
        "slot": "104",
        "type": "t_uint64"
      },
      {
        "astId": 24898,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "datacapRulesMaxRemainingPercentageForNext",
        "offset": 19,
        "slot": "104",
        "type": "t_uint8"
      },
      {
        "astId": 24903,
        "contract": "src/v0.8/core/filplus/Filplus.sol:Filplus",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoles)29558": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}