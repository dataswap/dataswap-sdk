{
  "address": "0xa29A6D6b2cC0b57106312B74B05dF5De3D89ba8d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "expectedInitiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualInitiator",
          "type": "address"
        }
      ],
      "name": "NotMatchingInitiator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "actualAddress",
          "type": "address"
        }
      ],
      "name": "NotMatchingsTarget",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "MatchingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "MatchingClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        }
      ],
      "name": "MatchingHasWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "MatchingNoWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "MatchingPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "MatchingResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "enum MatchingType.BidSelectionRule",
          "name": "_bidSelectionRule",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "_biddingDelayBlockCount",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_biddingPeriodBlockCount",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_storageCompletionPeriodBlocks",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_biddingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_replicaIndex",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_additionalInfo",
          "type": "string"
        }
      ],
      "name": "createMatching",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetsRequirement",
      "outputs": [
        {
          "internalType": "contract IDatasetsRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getBidSelectionRule",
      "outputs": [
        {
          "internalType": "enum MatchingType.BidSelectionRule",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getBiddingAfterPauseHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getBiddingEndHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getBiddingStartHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getBiddingThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingCreatedHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingInitiator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingState",
      "outputs": [
        {
          "internalType": "enum MatchingType.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingStorageCompletionHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_matchingsTarget",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsBids",
          "type": "address"
        }
      ],
      "name": "initDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsRequirement",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsBids",
      "outputs": [
        {
          "internalType": "contract IMatchingsBids",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsTarget",
      "outputs": [
        {
          "internalType": "contract IMatchingsTarget",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "pauseMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "reportCancelMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "reportCloseMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        }
      ],
      "name": "reportMatchingHasWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "reportMatchingNoWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "reportPublishMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "resumeMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9021cb8d818084f87f27b3e6df282435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"expectedInitiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualInitiator\",\"type\":\"address\"}],\"name\":\"NotMatchingInitiator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"actualAddress\",\"type\":\"address\"}],\"name\":\"NotMatchingsTarget\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"MatchingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"MatchingClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"MatchingHasWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"MatchingNoWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"MatchingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"MatchingResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"enum MatchingType.BidSelectionRule\",\"name\":\"_bidSelectionRule\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_biddingDelayBlockCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_biddingPeriodBlockCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_storageCompletionPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_biddingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_replicaIndex\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_additionalInfo\",\"type\":\"string\"}],\"name\":\"createMatching\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetsRequirement\",\"outputs\":[{\"internalType\":\"contract IDatasetsRequirement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getBidSelectionRule\",\"outputs\":[{\"internalType\":\"enum MatchingType.BidSelectionRule\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getBiddingAfterPauseHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getBiddingEndHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getBiddingStartHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getBiddingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingCreatedHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingState\",\"outputs\":[{\"internalType\":\"enum MatchingType.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingStorageCompletionHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_matchingsTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsBids\",\"type\":\"address\"}],\"name\":\"initDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsRequirement\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsBids\",\"outputs\":[{\"internalType\":\"contract IMatchingsBids\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsTarget\",\"outputs\":[{\"internalType\":\"contract IMatchingsTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"pauseMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"reportCancelMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"reportCloseMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"reportMatchingHasWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"reportMatchingNoWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"reportPublishMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"resumeMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is intended to be inherited by specific matching-related contracts.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"createMatching(uint64,uint8,uint64,uint64,uint64,uint256,uint16,string)\":{\"params\":{\"_additionalInfo\":\"The additional information about the matching.\",\"_bidSelectionRule\":\"The rules for determining the winning bid.\",\"_biddingDelayBlockCount\":\"The number of blocks to delay bidding.\",\"_biddingPeriodBlockCount\":\"The number of blocks for bidding period.\",\"_biddingThreshold\":\"The threshold for bidding.\",\"_datasetId\":\"The dataset id to create matching.\",\"_replicaIndex\":\"The index of the replica in dataset.\",\"_storageCompletionPeriodBlocks\":\"The number of blocks for storage period.\"},\"returns\":{\"_0\":\"The matchingId.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"reportPublishMatching(uint64)\":{\"params\":{\"_matchingId\":\"The matching id to publish cars.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Matchings Base Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMatching(uint64,uint8,uint64,uint64,uint64,uint256,uint16,string)\":{\"notice\":\"Function for create a new matching.\"},\"getBidSelectionRule(uint64)\":{\"notice\":\"Function for getting the selection rule of a matching\"},\"getBiddingAfterPauseHeight(uint64)\":{\"notice\":\"Function for getting the after pause height of a matching\"},\"getBiddingEndHeight(uint64)\":{\"notice\":\"Function for getting the end height of a matching\"},\"getBiddingStartHeight(uint64)\":{\"notice\":\"Function for getting the start height of a matching\"},\"getBiddingThreshold(uint64)\":{\"notice\":\"Function for getting the threshold of a matching\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getMatchingCreatedHeight(uint64)\":{\"notice\":\"Function for getting the matching creation block number\"},\"getMatchingInitiator(uint64)\":{\"notice\":\"Function for getting the initiator of a matching\"},\"getMatchingState(uint64)\":{\"notice\":\"Function for getting the state of a matching\"},\"getMatchingStorageCompletionHeight(uint64)\":{\"notice\":\"Function for getting the storage completion period blocks in a matching\"},\"initDependencies(address,address)\":{\"notice\":\"Function for init matchings instance.\"},\"initialize(address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"matchingsCount()\":{\"notice\":\"Declare private variables\"},\"pauseMatching(uint64)\":{\"notice\":\"Function for pausing a matching\"},\"reportCancelMatching(uint64)\":{\"notice\":\"Function for report canceling a matching\"},\"reportCloseMatching(uint64)\":{\"notice\":\"Function for closing a matching\"},\"reportMatchingHasWinner(uint64,address)\":{\"notice\":\"Function for report complete a matching with a winner\"},\"reportMatchingNoWinner(uint64)\":{\"notice\":\"Function for report complete a matching without winner.\"},\"reportPublishMatching(uint64)\":{\"notice\":\"Function for publishing a matching\"},\"resumeMatching(uint64)\":{\"notice\":\"Function for resuming a paused matching\"}},\"notice\":\"This contract serves as the base for managing matchings, their states, and associated actions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/matching/Matchings.sol\":\"Matchings\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373031363738333234383532\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb09fbb4ff74243480bfbf55be3a56a020220a915aebe48faca532462df096a06\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsRequirement\\ninterface IDatasetsRequirement {\\n    ///@notice Submit replica requirement for a dataset\\n    ///        Note: submmiter of dataset can submit dataset replica requirement\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    /// @param _dataPreparers The client specified data preparer, which the client can either specify or not, but the parameter cannot be empty.\\n    /// @param _storageProviders The client specified storage provider, which the client can either specify or not, but the parameter cannot be empty.\\n    /// @param _regions The region specified by the client, and the client must specify a region for the replicas.\\n    /// @param _countrys The country specified by the client, and the client must specify a country for the replicas.\\n    /// @param _citys The citys specified by the client, when the country of a replica is duplicated, citys must be specified and cannot be empty.\\n    /// @param _amount The data preparer calculate fees.\\n    function submitDatasetReplicaRequirements(\\n        uint64 _datasetId,\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys,\\n        uint256 _amount\\n    ) external payable;\\n\\n    ///@notice Get dataset replicas count\\n    function getDatasetReplicasCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Get dataset replica requirement\\n    function getDatasetReplicaRequirement(\\n        uint64 _datasetId,\\n        uint64 _index\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            address[] memory,\\n            uint16,\\n            uint16,\\n            uint32[] memory\\n        );\\n\\n    ///@notice Get dataset pre conditional\\n    function getDatasetPreCollateralRequirements(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab86ce9c4ba0dd388c5329edc28380f265310f32ba94e1d45132ac159e66458a\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchings.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchings\\ninterface IMatchings {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _bidSelectionRule The rules for determining the winning bid.\\n    /// @param _biddingDelayBlockCount The number of blocks to delay bidding.\\n    /// @param _biddingPeriodBlockCount The number of blocks for bidding period.\\n    /// @param _storageCompletionPeriodBlocks The number of blocks for storage period.\\n    /// @param _biddingThreshold The threshold for bidding.\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    /// @param _additionalInfo The additional information about the matching.\\n    /// @return The matchingId.\\n    function createMatching(\\n        uint64 _datasetId,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint64 _biddingDelayBlockCount,\\n        uint64 _biddingPeriodBlockCount,\\n        uint64 _storageCompletionPeriodBlocks,\\n        uint256 _biddingThreshold,\\n        uint16 _replicaIndex,\\n        string memory _additionalInfo\\n    ) external returns (uint64);\\n\\n    /// @notice Function for pausing a matching\\n    /// @param _matchingId The matching id.\\n    function pauseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for resuming a paused matching\\n    /// @param _matchingId The matching id.\\n    function resumeMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    function reportPublishMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report canceling a matching\\n    /// @param _matchingId The matching id.\\n    function reportCancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report closing a matching\\n    /// @param _matchingId The matching id.\\n    function reportCloseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report complete with a winner\\n    /// @param _matchingId The matching id.\\n    /// @param _winner The winner of bids of matching.\\n    function reportMatchingHasWinner(\\n        uint64 _matchingId,\\n        address _winner\\n    ) external;\\n\\n    /// @notice Function for report complete a matching without winner\\n    /// @param _matchingId The matching id.\\n    function reportMatchingNoWinner(uint64 _matchingId) external;\\n\\n    /// @notice Function for getting matchings initiator\\n    function getMatchingInitiator(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting the state of a matching\\n    function getMatchingState(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.State);\\n\\n    /// @notice  Function for getting the bid selection rule of a matching\\n    function getBidSelectionRule(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.BidSelectionRule);\\n\\n    /// @notice  Function for getting the bid threshold of a matching\\n    function getBiddingThreshold(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the start height of a matching\\n    function getBiddingStartHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the after pause height of a matching\\n    function getBiddingAfterPauseHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the end height of a matching\\n    function getBiddingEndHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the storage completion period blocks in a matching\\n    function getMatchingStorageCompletionHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the matching creation block number\\n    function getMatchingCreatedHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    // Default getter functions for public variables\\n    function matchingsCount() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x8909f5e067a7c4713ad3c766cef947c91714b205e75e4f251578794946c1473b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsBids.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsBid\\ninterface IMatchingsBids {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsTarget\\n    ) external;\\n\\n    /// @notice  Function for bidding on a matching\\n    function bidding(uint64 _matchingId, uint256 _amount) external payable;\\n\\n    /// @notice  Function for canceling a matching\\n    function cancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for closing a matching and choosing a winner\\n    function closeMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for getting bids in a matching\\n    function getMatchingBids(\\n        uint64 _matchingId\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice  Function for getting bid amount of a bidder in a matching\\n    function getMatchingBidAmount(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingBidsCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting winner of a matching\\n    function getMatchingWinner(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting winners of a matchings\\n    function getMatchingWinners(\\n        uint64[] memory _matchingIds\\n    ) external view returns (address[] memory);\\n\\n    /// @notice  Function for checking if a bidder has a bid in a matching\\n    function hasMatchingBid(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7585d631e867ca5c6538c5d630b364ad984f9d0615d012dce8214f4988433cfa\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsTarget.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsTarget\\ninterface IMatchingsTarget {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching target.\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _dataType Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\\n    /// @param _associatedMappingFilesMatchingID The matching ID that associated with mapping files of dataset of _datasetId\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    function createTarget(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice  Function for parse cars from indexes.\\n    /// @param _starts The starts of cars to publish.\\n    /// @param _ends The ends of cars to publish.\\n    /// @return The cars of the indexes.\\n    function parseCars(\\n        uint64[] memory _starts,\\n        uint64[] memory _ends\\n    ) external pure returns (uint64[] memory);\\n\\n    /// @notice  Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id of matching.\\n    /// @param _carsStarts The cars to publish.\\n    /// @param _carsEnds The cars to publish.\\n    /// @param complete If the publish is complete.\\n    function publishMatching(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        uint64[] memory _carsStarts,\\n        uint64[] memory _carsEnds,\\n        bool complete\\n    ) external;\\n\\n    /// @notice Function for getting subsidy amount in a matching\\n    function getMatchingSubsidy(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice  Function for getting the dataset id in a matching\\n    function getMatchingDatasetId(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the index of matching's replica.\\n    function getMatchingReplicaIndex(\\n        uint64 _matchingId\\n    ) external view returns (uint16);\\n\\n    /// @notice get matchings size\\n    function getMatchingSize(uint64 _matchingId) external view returns (uint64);\\n\\n    /// @notice Get the target information of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return datasetID The ID of the associated dataset.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    /// @return size The size of the matching.\\n    /// @return dataType The data type of the matching.\\n    /// @return associatedMappingFilesMatchingID The ID of the associated mapping files matching.\\n    function getMatchingTarget(\\n        uint64 _matchingId\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 datasetID,\\n            uint64[] memory cars,\\n            uint64 size,\\n            DatasetType.DataType dataType,\\n            uint64 associatedMappingFilesMatchingID\\n        );\\n\\n    /// @notice Check if a matching with the given matching ID contains a specific CID.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cid The CID (Content Identifier) to check for.\\n    /// @return True if the matching contains the specified CID, otherwise false.\\n    function isMatchingContainsCar(\\n        uint64 _matchingId,\\n        uint64 _cid\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching with the given matching ID contains multiple CIDs.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cids An array of CIDs (Content Identifiers) to check for.\\n    /// @return True if the matching contains all the specified CIDs, otherwise false.\\n    function isMatchingContainsCars(\\n        uint64 _matchingId,\\n        uint64[] memory _cids\\n    ) external view returns (bool);\\n\\n    /// @notice check is matching targe valid\\n    function isMatchingTargetValid(\\n        uint64 _datasetId,\\n        uint64[] memory _cars,\\n        uint64 _size,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching meets the requirements of Fil+.\\n    function isMatchingTargetMeetsFilPlusRequirements(\\n        uint64 _matchingId,\\n        address candidate\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54e756188dd5529f4d270050e57a20a5b21a6a922a486beb8f35c34b394dc3cd\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/Matchings.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\n\\n/// shared\\nimport {MatchingsEvents} from \\\"src/v0.8/shared/events/MatchingsEvents.sol\\\";\\nimport {MatchingsModifiers} from \\\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n\\n/// library\\nimport {MatchingLIB} from \\\"src/v0.8/module/matching/library/MatchingLIB.sol\\\";\\nimport {MatchingStateMachineLIB} from \\\"src/v0.8/module/matching/library/MatchingStateMachineLIB.sol\\\";\\nimport \\\"src/v0.8/shared/utils/array/ArrayLIB.sol\\\";\\n\\n/// type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Matchings Base Contract\\n/// @notice This contract serves as the base for managing matchings, their states, and associated actions.\\n/// @dev This contract is intended to be inherited by specific matching-related contracts.\\ncontract Matchings is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IMatchings,\\n    MatchingsModifiers\\n{\\n    /// @notice  Use libraries for different matching functionalities\\n    using MatchingLIB for MatchingType.Matching;\\n    using MatchingStateMachineLIB for MatchingType.Matching;\\n    using ArrayAddressLIB for address[];\\n\\n    /// @notice  Declare private variables\\n    uint64 public matchingsCount;\\n    mapping(uint64 => MatchingType.Matching) private matchings;\\n\\n    address private governanceAddress;\\n    IRoles private roles;\\n    IDatasetsRequirement public datasetsRequirement;\\n    IMatchingsTarget public matchingsTarget;\\n    IMatchingsBids public matchingsBids;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    // solhint-disable-next-line\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _datasetsRequirement\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        datasetsRequirement = IDatasetsRequirement(_datasetsRequirement);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    function initDependencies(\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) external onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) {\\n        matchingsTarget = IMatchingsTarget(_matchingsTarget);\\n        matchingsBids = IMatchingsBids(_matchingsBids);\\n    }\\n\\n    /// @notice Function for create a new matching.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _bidSelectionRule The rules for determining the winning bid.\\n    /// @param _biddingDelayBlockCount The number of blocks to delay bidding.\\n    /// @param _biddingPeriodBlockCount The number of blocks for bidding period.\\n    /// @param _storageCompletionPeriodBlocks The number of blocks for storage period.\\n    /// @param _biddingThreshold The threshold for bidding.\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    /// @param _additionalInfo The additional information about the matching.\\n    /// @return The matchingId.\\n    function createMatching(\\n        uint64 _datasetId,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint64 _biddingDelayBlockCount,\\n        uint64 _biddingPeriodBlockCount,\\n        uint64 _storageCompletionPeriodBlocks,\\n        uint256 _biddingThreshold,\\n        uint16 _replicaIndex,\\n        string memory _additionalInfo\\n    ) external onlyRole(roles, RolesType.DATASET_PROVIDER) returns (uint64) {\\n        matchingsCount++;\\n        MatchingType.Matching storage matching = matchings[matchingsCount];\\n        require(\\n            _replicaIndex <\\n                datasetsRequirement.getDatasetReplicasCount(_datasetId),\\n            \\\"Invalid matching replica\\\"\\n        );\\n\\n        ///TODO: the dp must by client or submit proof\\n        (address[] memory dp, , , , ) = datasetsRequirement\\n            .getDatasetReplicaRequirement(_datasetId, _replicaIndex);\\n\\n        if (dp.length > 0) {\\n            require(dp.isContains(msg.sender), \\\"Invalid DP submitter\\\");\\n        }\\n\\n        matching.bidSelectionRule = _bidSelectionRule;\\n        matching.biddingDelayBlockCount = _biddingDelayBlockCount;\\n        matching.biddingPeriodBlockCount = _biddingPeriodBlockCount;\\n        matching.storageCompletionPeriodBlocks = _storageCompletionPeriodBlocks;\\n        matching.biddingThreshold = _biddingThreshold;\\n        matching.additionalInfo = _additionalInfo;\\n        matching.initiator = msg.sender;\\n        matching.createdBlockNumber = uint64(block.number);\\n        return matchingsCount;\\n    }\\n\\n    /// @notice Function for pausing a matching\\n    function pauseMatching(\\n        uint64 _matchingId\\n    ) external onlyMatchingInitiator(this, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._pauseMatching();\\n        emit MatchingsEvents.MatchingPaused(_matchingId);\\n    }\\n\\n    /// @notice Function for resuming a paused matching\\n    function resumeMatching(\\n        uint64 _matchingId\\n    ) external onlyMatchingInitiator(this, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._resumeMatching();\\n        emit MatchingsEvents.MatchingResumed(_matchingId);\\n    }\\n\\n    /// @notice Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    function reportPublishMatching(\\n        uint64 _matchingId\\n    ) external onlyMatchingsTarget(matchingsTarget, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._publishMatching();\\n    }\\n\\n    /// @notice Function for report canceling a matching\\n    function reportCancelMatching(\\n        uint64 _matchingId\\n    ) external onlyMatchingsBids(matchingsBids, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._cancelMatching();\\n        emit MatchingsEvents.MatchingCancelled(_matchingId);\\n    }\\n\\n    /// @notice Function for closing a matching\\n    function reportCloseMatching(\\n        uint64 _matchingId\\n    ) external onlyMatchingsBids(matchingsBids, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._closeMatching();\\n        emit MatchingsEvents.MatchingClosed(_matchingId);\\n    }\\n\\n    /// @notice Function for report complete a matching with a winner\\n    function reportMatchingHasWinner(\\n        uint64 _matchingId,\\n        address _winner\\n    ) external onlyMatchingsBids(matchingsBids, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._reportMatchingHasWinner();\\n        emit MatchingsEvents.MatchingHasWinner(_matchingId, _winner);\\n    }\\n\\n    /// @notice Function for report complete a matching without winner.\\n    function reportMatchingNoWinner(\\n        uint64 _matchingId\\n    ) external onlyMatchingsBids(matchingsBids, _matchingId) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        matching._reportMatchingNoWinner();\\n        emit MatchingsEvents.MatchingNoWinner(_matchingId);\\n    }\\n\\n    /// @notice Function for getting the initiator of a matching\\n    function getMatchingInitiator(\\n        uint64 _matchingId\\n    ) public view returns (address) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching.initiator;\\n    }\\n\\n    /// @notice Function for getting the state of a matching\\n    function getMatchingState(\\n        uint64 _matchingId\\n    ) public view returns (MatchingType.State) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching._getMatchingState();\\n    }\\n\\n    /// @notice Function for getting the selection rule of a matching\\n    function getBidSelectionRule(\\n        uint64 _matchingId\\n    ) public view returns (MatchingType.BidSelectionRule) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching.bidSelectionRule;\\n    }\\n\\n    /// @notice Function for getting the threshold of a matching\\n    function getBiddingThreshold(\\n        uint64 _matchingId\\n    ) public view returns (uint256) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching.biddingThreshold;\\n    }\\n\\n    /// @notice Function for getting the start height of a matching\\n    function getBiddingStartHeight(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching.createdBlockNumber + matching.biddingDelayBlockCount;\\n    }\\n\\n    /// @notice Function for getting the after pause height of a matching\\n    function getBiddingAfterPauseHeight(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return\\n            matching.createdBlockNumber +\\n            matching.biddingDelayBlockCount +\\n            matching.pausedBlockCount;\\n    }\\n\\n    /// @notice Function for getting the end height of a matching\\n    function getBiddingEndHeight(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return\\n            matching.createdBlockNumber +\\n            matching.biddingDelayBlockCount +\\n            matching.biddingPeriodBlockCount +\\n            matching.pausedBlockCount;\\n    }\\n\\n    /// @notice  Function for getting the storage completion period blocks in a matching\\n    function getMatchingStorageCompletionHeight(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching.storageCompletionPeriodBlocks;\\n    }\\n\\n    /// @notice  Function for getting the matching creation block number\\n    function getMatchingCreatedHeight(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.Matching storage matching = matchings[_matchingId];\\n        return matching.createdBlockNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x1e5ae3daee70c8adb1b3606b0963de2e03f71f6038aba842a76fd1db7f3347dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/library/MatchingLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\nimport {MatchingStateMachineLIB} from \\\"src/v0.8/module/matching/library/MatchingStateMachineLIB.sol\\\";\\n\\n/// @title Matching Library\\n/// @notice This library provides functions for managing matchings and their states.\\n/// @dev This library is used to manage the lifecycle and states of matchings.\\nlibrary MatchingLIB {\\n    using MatchingStateMachineLIB for MatchingType.Matching;\\n\\n    /// @notice Publish a matching.\\n    /// @dev This function is used to publish a matching and initiate the matching process.\\n    function _publishMatching(MatchingType.Matching storage self) internal {\\n        require(self.state == MatchingType.State.None, \\\"Invalid state\\\");\\n        self._emitMatchingEvent(MatchingType.Event.Publish);\\n        //NOTE:consider that if need audit,so keep the FilPlusCheckSuccessed here.\\n        self._emitMatchingEvent(MatchingType.Event.FilPlusCheckSuccessed);\\n    }\\n\\n    /// @notice Pause a matching.\\n    /// @dev This function is used to pause a matching that is in progress.\\n    function _pauseMatching(MatchingType.Matching storage self) internal {\\n        require(self.state == MatchingType.State.InProgress, \\\"Invalid state\\\");\\n        require(self.pausedBlockCount == 0, \\\"only can paused one time\\\");\\n        //@dev:NOTE: here set pausedBlockNumber as pausedBlockCount,will correct in resume\\n        require(\\n            uint64(block.number) <\\n                self.createdBlockNumber + self.biddingDelayBlockCount,\\n            \\\"alreay bidding,can't pause.\\\"\\n        );\\n\\n        self.pausedBlockCount = uint64(block.number);\\n        self._emitMatchingEvent(MatchingType.Event.Pause);\\n    }\\n\\n    /// @notice Report that a pause has expired.\\n    /// @dev This function is used to report that a pause has expired for a paused matching.\\n    function _reportMatchingPauseExpired(\\n        MatchingType.Matching storage self\\n    ) internal {\\n        require(self.state == MatchingType.State.Paused, \\\"Invalid state\\\");\\n        self._emitMatchingEvent(MatchingType.Event.PauseExpired);\\n    }\\n\\n    /// @notice Resume a paused matching.\\n    /// @dev This function is used to resume a paused matching.\\n    function _resumeMatching(MatchingType.Matching storage self) internal {\\n        require(self.state == MatchingType.State.Paused, \\\"Invalid state\\\");\\n        require(self.pausedBlockCount != 0, \\\"only can paused one time\\\");\\n        //@dev:NOTE: set pausedBlockCount  as the dealy block count because paused\\n        self.pausedBlockCount = uint64(block.number) - self.pausedBlockCount;\\n\\n        self._emitMatchingEvent(MatchingType.Event.Resume);\\n    }\\n\\n    /// @notice Cancel a matching.\\n    /// @dev This function is used to cancel a matching that is published, in progress, or paused.\\n    function _cancelMatching(MatchingType.Matching storage self) internal {\\n        require(\\n            self.state == MatchingType.State.Published ||\\n                self.state == MatchingType.State.InProgress ||\\n                self.state == MatchingType.State.Paused,\\n            \\\"Invalid state\\\"\\n        );\\n        require(\\n            uint64(block.number) <\\n                self.createdBlockNumber + self.biddingDelayBlockCount,\\n            \\\"bid alreay start,can't cancel\\\"\\n        );\\n        self._emitMatchingEvent(MatchingType.Event.Cancel);\\n    }\\n\\n    /// @notice Close a matching and choose a winner.\\n    /// @dev This function is used to close a matching and choose a winner based on the specified rule.\\n    function _closeMatching(MatchingType.Matching storage self) internal {\\n        require(self.state == MatchingType.State.InProgress, \\\"Invalid state\\\");\\n        if (\\n            self.bidSelectionRule ==\\n            MatchingType.BidSelectionRule.ImmediateAtLeast ||\\n            self.bidSelectionRule ==\\n            MatchingType.BidSelectionRule.ImmediateAtMost\\n        ) {\\n            require(\\n                block.number >=\\n                    self.createdBlockNumber +\\n                        self.biddingDelayBlockCount +\\n                        self.pausedBlockCount,\\n                \\\"Bidding too early\\\"\\n            );\\n        } else {\\n            require(\\n                block.number >=\\n                    self.createdBlockNumber +\\n                        self.biddingDelayBlockCount +\\n                        self.biddingPeriodBlockCount +\\n                        self.pausedBlockCount,\\n                \\\"Bidding period not expired\\\"\\n            );\\n        }\\n        self._emitMatchingEvent(MatchingType.Event.Close);\\n    }\\n\\n    /// @notice Report a matching is completed with winner.\\n    /// @dev This function is used to complete a matching.\\n    function _reportMatchingHasWinner(\\n        MatchingType.Matching storage self\\n    ) internal {\\n        require(self.state == MatchingType.State.Closed, \\\"Invalid state\\\");\\n        self._emitMatchingEvent(MatchingType.Event.HasWinner);\\n    }\\n\\n    /// @notice Report a matching is completed without winner.\\n    /// @dev This function is used to complete a matching.\\n    function _reportMatchingNoWinner(\\n        MatchingType.Matching storage self\\n    ) internal {\\n        require(self.state == MatchingType.State.Closed, \\\"Invalid state\\\");\\n        self._emitMatchingEvent(MatchingType.Event.NoWinner);\\n    }\\n}\\n\",\"keccak256\":\"0x9156d06c2efbdf16f0f86680d46cca2a400bdf7fe4b64bf562055dbb61ea8bdf\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/library/MatchingStateMachineLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title Matching Library\\n/// @notice This library provides functions for managing matchings and their states.\\n/// @dev This library is used to manage the lifecycle and states of matchings.\\nlibrary MatchingStateMachineLIB {\\n    /// @notice Post an event to update the matching's state.\\n    /// @dev This internal function is used to update the matching's state based on the event.\\n    /// @param _event The event that triggers the state update.\\n    function _emitMatchingEvent(\\n        MatchingType.Matching storage self,\\n        MatchingType.Event _event\\n    ) internal {\\n        MatchingType.State currentState = self.state;\\n        MatchingType.State newState;\\n\\n        // Apply the state transition based on the event\\n        if (_event == MatchingType.Event.Publish) {\\n            if (currentState == MatchingType.State.None) {\\n                newState = MatchingType.State.Published;\\n            }\\n        } else if (_event == MatchingType.Event.FilPlusCheckSuccessed) {\\n            if (currentState == MatchingType.State.Published) {\\n                newState = MatchingType.State.InProgress;\\n            }\\n        } else if (_event == MatchingType.Event.FilPlusCheckFailed) {\\n            if (currentState == MatchingType.State.Published) {\\n                newState = MatchingType.State.Failed;\\n            }\\n        } else if (_event == MatchingType.Event.Pause) {\\n            if (currentState == MatchingType.State.InProgress) {\\n                newState = MatchingType.State.Paused;\\n            }\\n        } else if (_event == MatchingType.Event.Resume) {\\n            if (currentState == MatchingType.State.Paused) {\\n                newState = MatchingType.State.InProgress;\\n            }\\n        } else if (_event == MatchingType.Event.PauseExpired) {\\n            if (currentState == MatchingType.State.Paused) {\\n                newState = MatchingType.State.Failed;\\n            }\\n        } else if (_event == MatchingType.Event.Cancel) {\\n            if (\\n                currentState == MatchingType.State.Published ||\\n                currentState == MatchingType.State.Paused ||\\n                currentState == MatchingType.State.InProgress\\n            ) {\\n                newState = MatchingType.State.Cancelled;\\n            }\\n        } else if (_event == MatchingType.Event.Close) {\\n            if (currentState == MatchingType.State.InProgress) {\\n                newState = MatchingType.State.Closed;\\n            }\\n        } else if (_event == MatchingType.Event.HasWinner) {\\n            if (currentState == MatchingType.State.Closed) {\\n                newState = MatchingType.State.Completed;\\n            }\\n        } else if (_event == MatchingType.Event.NoWinner) {\\n            if (currentState == MatchingType.State.Closed) {\\n                newState = MatchingType.State.Failed;\\n            }\\n        }\\n\\n        // Update the state if newState is not None (i.e., a valid transition)\\n        if (newState != MatchingType.State.None) {\\n            self.state = newState;\\n        }\\n    }\\n\\n    /// @notice Get the current state of a matching.\\n    /// @dev This internal function is used to retrieve the current state of a matching.\\n    function _getMatchingState(\\n        MatchingType.Matching storage self\\n    ) internal view returns (MatchingType.State) {\\n        return self.state;\\n    }\\n}\\n\",\"keccak256\":\"0xdd19ca4883b6d16c184aef4f1c304b1f75d8de3ac46ba8bf05c929e63d3a7294\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n\\n    /// @notice escrow errors\\n    error ExceedValidPaymentAmount(uint256 total, uint256 payment);\\n    error ExceedValidTransferAmount(uint256 total, uint256 transfer);\\n    error ExceedValidRefundAmount(uint256 total, uint256 refund);\\n    error ExceedValidBurnAmount(uint256 total, uint256 burn);\\n    error ExceedValidCollateralAmount(uint256 total, uint256 collateral);\\n    error BeneficiaryAlreadyExist(address);\\n    error BeneficiaryIsInvalid(address);\\n    error OnlySpecifyTypeAllowedTransfer();\\n    error SubAccountAlreadyExist(address);\\n    error NotRefundableAmount();\\n}\\n\",\"keccak256\":\"0x97305fe742822eef7e1dba0b8146f91dae07189f14bbdb8c73a5fcb115eff302\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/MatchingsEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary MatchingsEvents {\\n    /// @notice Declare events for external monitoring\\n\\n    // Event emitted when a matching is published\\n    event MatchingPublished(\\n        uint64 indexed matchingId,\\n        address indexed initiator\\n    );\\n\\n    // Event emitted when a matching is paused\\n    event MatchingPaused(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching's pause expires\\n    event MatchingPauseExpired(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching is resumed\\n    event MatchingResumed(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching is cancelled\\n    event MatchingCancelled(uint64 indexed _matchingId);\\n\\n    event MatchingClosed(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching has a winner\\n    event MatchingHasWinner(\\n        uint64 indexed _matchingId,\\n        address indexed _winner\\n    );\\n\\n    // Event emitted when a matching has no winner\\n    event MatchingNoWinner(uint64 indexed _matchingId);\\n\\n    // Event emitted when a bid is placed in a matching\\n    event MatchingBidPlaced(\\n        uint64 indexed _matchingId,\\n        address _bidder,\\n        uint256 _amount\\n    );\\n}\\n\",\"keccak256\":\"0xcbdfdd78049f4b0fefd1f0f64c3b83fa44b17036c6f357617bad8aa1c9942875\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract MatchingsModifiers is CarstoreModifiers {\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingInitiator(IMatchings _matchings, uint64 _matchingId) {\\n        address initiator = _matchings.getMatchingInitiator(_matchingId);\\n        if (initiator != msg.sender) {\\n            revert Errors.NotMatchingInitiator(\\n                _matchingId,\\n                initiator,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access based on matching state\\n    modifier onlyMatchingState(\\n        IMatchings _matchings,\\n        uint64 _matchingId,\\n        MatchingType.State _state\\n    ) {\\n        MatchingType.State matchingState = _matchings.getMatchingState(\\n            _matchingId\\n        );\\n        if (matchingState != _state) {\\n            revert Errors.InvalidMatchingState(\\n                _matchingId,\\n                _state,\\n                matchingState\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsTarget(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsTarget) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsBids(\\n        IMatchingsBids _matchingsBids,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsBids) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingContainsCar(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) {\\n        if (!_matchingsTarget.isMatchingContainsCar(_matchingId, _id)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2aaf11a9100face83692e5b9d6ab8b0440d05e4baa5a795ba6ac4a3c1f09d387\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/utils/array/ArrayLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary ArrayUint16LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint16[] memory result = new uint16[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint16[] memory _elements,\\n        uint16 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint16[] memory updatedArray = new uint16[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint16[] memory result = new uint16[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint16[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint16[] memory _elements,\\n        uint16 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint32LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint32[] memory result = new uint32[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint32[] memory _elements,\\n        uint32 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint32[] memory updatedArray = new uint32[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint32[] memory result = new uint32[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint32[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint32[] memory _elements,\\n        uint32 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint64LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint64[] memory result = new uint64[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint64[] memory _elements,\\n        uint64 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint64[] memory updatedArray = new uint64[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint64[] memory result = new uint64[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint64[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint64[] memory _elements,\\n        uint64 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayAddressLIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256, address[] memory) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        address[] memory result = new address[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        address[] memory _elements,\\n        address _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256, address[] memory) {\\n        address[] memory updatedArray = new address[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        address[] memory result = new address[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        address[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        address[] memory _elements,\\n        address target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xa7e0795c087c5270c3af404ed45be0762fed1a09eea5ee547bd10fb76708d98b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        FundsNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        uint64 usedSizeInBytes; // Already matching size.\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x37374caed842596d4f4fad36b66805caa76c4cb2659170c7bd42f202f2ff9376\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n        uint256 subsidy; // subsidy amount\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0xaada4a7a4f23284bffe0ca9cf885002d6a7589d3751e44dde5b20e439b7535dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051612ec661004c60003960008181610a9801528181610ad801528181610b9701528181610bd70152610c530152612ec66000f3fe60806040526004361061013c5760003560e01c806308916197146101415780630e635d7e146101775780631ed25163146101995780632620333e146101b95780632b34cbc5146101e65780632de966b01461020657806330e3dd251461024c57806334ad3b4a1461028c5780633659cfe6146102b957806338d51ea7146102d957806341f0ebb8146102f95780634f1ef2861461033557806352d1902d1461034857806352ffae6b1461035d57806392191e6c1461037d5780639247e80f1461039d5780639aa023d1146103bd5780639e5a53e5146103dd5780639f6c8a47146103fd578063aaf10f421461041d578063b1fa766c1461043f578063b6c917831461045f578063bbf83674146104a5578063c0c53b8b146104c5578063d7606cf6146104e5578063dd8fff9714610505578063e19edda114610525575b600080fd5b34801561014d57600080fd5b50606554610161906001600160401b031681565b60405161016e9190611de1565b60405180910390f35b34801561018357600080fd5b50610197610192366004611e39565b610567565b005b3480156101a557600080fd5b506101976101b4366004611e76565b610608565b3480156101c557600080fd5b50606a546101d9906001600160a01b031681565b60405161016e9190611ecf565b3480156101f257600080fd5b50610161610201366004612020565b610700565b34801561021257600080fd5b5061023f610221366004611e76565b6001600160401b031660009081526066602052604090206001015490565b60405161016e91906120f3565b34801561025857600080fd5b50610161610267366004611e76565b6001600160401b03908116600090815260666020526040902054600160881b90041690565b34801561029857600080fd5b506102ac6102a7366004611e76565b610a5f565b60405161016e9190612145565b3480156102c557600080fd5b506101976102d4366004612153565b610a8e565b3480156102e557600080fd5b506101616102f4366004611e76565b610b56565b34801561030557600080fd5b50610161610314366004611e76565b6001600160401b039081166000908152606660205260409020600201541690565b610197610343366004612174565b610b8d565b34801561035457600080fd5b5061023f610c46565b34801561036957600080fd5b50610197610378366004611e76565b610ca3565b34801561038957600080fd5b50610197610398366004611e76565b610cfb565b3480156103a957600080fd5b506101976103b8366004611e76565b610df3565b3480156103c957600080fd5b506069546101d9906001600160a01b031681565b3480156103e957600080fd5b506101616103f8366004611e76565b610e7f565b34801561040957600080fd5b50610161610418366004611e76565b610ed0565b34801561042957600080fd5b50610432610f2a565b60405161016e91906121ca565b34801561044b57600080fd5b5061019761045a366004611e76565b610f39565b34801561046b57600080fd5b5061049861047a366004611e76565b6001600160401b031660009081526066602052604090205460ff1690565b60405161016e9190612206565b3480156104b157600080fd5b506101976104c0366004612214565b610fc5565b3480156104d157600080fd5b506101976104e0366004612236565b611089565b3480156104f157600080fd5b50610197610500366004611e76565b61119e565b34801561051157600080fd5b50606b546101d9906001600160a01b031681565b34801561053157600080fd5b50610432610540366004611e76565b6001600160401b03166000908152606660205260409020600401546001600160a01b031690565b606b546001600160a01b0316823382146105a1578033604051636355073560e01b8152600401610598929190612286565b60405180910390fd5b6001600160401b03841660009081526066602052604090206105c28161122a565b6040516001600160a01b038516906001600160401b038716907f821b2f08eee92e612e3d5f8a0f9249514abb4bcb60d2c9a815c55ec2288e36c990600090a35050505050565b60405163e19edda160e01b815230908290600090839063e19edda190610632908590600401611de1565b602060405180830381865afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906122ac565b90506001600160a01b03811633146106a45781813360405163bb5a686560e01b8152600401610598939291906122cd565b6001600160401b03841660009081526066602052604090206106c581611273565b6040516001600160401b038616907fdcc3f18bbb54786ec327b109e3597e1adc0e10856ba975001e5ec6f2922aee4090600090a25050505050565b606854604051632474521560e21b81526000916001600160a01b0316907f2e7a99dcc48463ba57667732f1d19d96afa51e11db099e5c9c708076a0a080409082906391d148549061075790849033906004016122f5565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612316565b6107b45760405162461bcd60e51b81526004016105989061236b565b606580546001600160401b03169060006107cd83612391565b82546101009290920a6001600160401b03818102199093169183160217909155606554166000908152606660205260409081902060695491516314a41d8560e01b81529092506001600160a01b03909116906314a41d8590610833908f90600401611de1565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087491906123c6565b61ffff168661ffff161061089a5760405162461bcd60e51b815260040161059890612416565b6000606960009054906101000a90046001600160a01b03166001600160a01b031663146846a88e896040518363ffffffff1660e01b81526004016108df92919061243e565b600060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109249190810190612587565b50505050905060008151111561095a5761093e813361133d565b61095a5760405162461bcd60e51b815260040161059890612677565b81548c90839060ff1916600183600381111561097857610978612101565b02179055508a8260000160016101000a8154816001600160401b0302191690836001600160401b03160217905550898260000160096101000a8154816001600160401b0302191690836001600160401b03160217905550888260000160116101000a8154816001600160401b0302191690836001600160401b0316021790555087826001018190555085826003019081610a12919061278d565b50506004810180546001600160a01b0319163317905560020180546001600160401b034381166001600160401b031990921691909117909155606554169250505098975050505050505050565b6001600160401b03811660009081526066602052604081206004810154600160e01b900460ff165b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ad65760405162461bcd60e51b815260040161059890612885565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b086113a4565b6001600160a01b031614610b2e5760405162461bcd60e51b8152600401610598906128cc565b610b37816113c0565b60408051600080825260208201909252610b5391839190611459565b50565b6001600160401b0380821660009081526066602052604081208054600282015492939192610a8792610100909204821691166128dc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bd55760405162461bcd60e51b815260040161059890612885565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c076113a4565b6001600160a01b031614610c2d5760405162461bcd60e51b8152600401610598906128cc565b610c36826113c0565b610c4282826001611459565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c905760405162461bcd60e51b815260040161059890612964565b50600080516020612e4a83398151915290565b606a546001600160a01b031681338214610cd4578033604051636355073560e01b8152600401610598929190612286565b6001600160401b0383166000908152606660205260409020610cf58161153b565b50505050565b60405163e19edda160e01b815230908290600090839063e19edda190610d25908590600401611de1565b602060405180830381865afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906122ac565b90506001600160a01b0381163314610d975781813360405163bb5a686560e01b8152600401610598939291906122cd565b6001600160401b0384166000908152606660205260409020610db881611590565b6040516001600160401b038616907f626d41b3e003b5c1801aaa2831a8ba5e6f1b5d68d30196e9bf22fc928792d89890600090a25050505050565b606b546001600160a01b031681338214610e24578033604051636355073560e01b8152600401610598929190612286565b6001600160401b0383166000908152606660205260409020610e4581611684565b6040516001600160401b038516907fe76447b03fa89f6733afb0da8c385e7ffae3a3a92a26544a29f1de4e5982b97090600090a250505050565b6001600160401b03808216600090815260666020526040812060048101548154600283015493949293600160a01b909204831692610ec692610100909204811691166128dc565b610a8791906128dc565b6001600160401b03808216600090815260666020526040812060048101548154600283015493949293600160a01b909204831692600160481b8204811692610f20926101009004821691166128dc565b610ec691906128dc565b6000610f346113a4565b905090565b606b546001600160a01b031681338214610f6a578033604051636355073560e01b8152600401610598929190612286565b6001600160401b0383166000908152606660205260409020610f8b816116cd565b6040516001600160401b038516907f225fdadf186a0d9a44c06a05f50a5bdede5791bab4fdb67c98246934eb67ccea90600090a250505050565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610ffc90849033906004016122f5565b602060405180830381865afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190612316565b6110595760405162461bcd60e51b81526004016105989061236b565b5050606a80546001600160a01b039384166001600160a01b031991821617909155606b8054929093169116179055565b600054610100900460ff16158080156110a95750600054600160ff909116105b806110ca57506110b8306117bd565b1580156110ca575060005460ff166001145b6110e65760405162461bcd60e51b8152600401610598906129bf565b6000805460ff191660011790558015611109576000805461ff0019166101001790555b606780546001600160a01b038087166001600160a01b03199283161790925560688054868416908316179055606980549285169290911691909117905561114e6117cc565b8015610cf5576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890611190906001906129e3565b60405180910390a150505050565b606b546001600160a01b0316813382146111cf578033604051636355073560e01b8152600401610598929190612286565b6001600160401b03831660009081526066602052604090206111f0816117f5565b6040516001600160401b038516907f913823578c5ee3be58d2695ff6571ebfb455231c3d35eb1660cff0faacadd83790600090a250505050565b600480820154600160e01b900460ff16600781111561124b5761124b612101565b146112685760405162461bcd60e51b815260040161059890612a15565b610b53816008611959565b60036004820154600160e01b900460ff16600781111561129557611295612101565b146112b25760405162461bcd60e51b815260040161059890612a15565b6004810154600160a01b90046001600160401b03166000036112e65760405162461bcd60e51b815260040161059890612a54565b600481015461130590600160a01b90046001600160401b031643612a64565b6004820180546001600160401b0392909216600160a01b02600160a01b600160e01b0319909216919091179055610b53816005611959565b6000805b835181101561139857826001600160a01b031684828151811061136657611366612a97565b60200260200101516001600160a01b03160361138657600191505061139e565b8061139081612aad565b915050611341565b50600090505b92915050565b600080516020612e4a833981519152546001600160a01b031690565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d14854906113f790849033906004016122f5565b602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190612316565b6114545760405162461bcd60e51b81526004016105989061236b565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561148c5761145483611bfc565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156114e6575060408051601f3d908101601f191682019092526114e391810190612acb565b60015b6115025760405162461bcd60e51b815260040161059890612b37565b600080516020612e4a833981519152811461152f5760405162461bcd60e51b815260040161059890612b8d565b50611454838383611c50565b60006004820154600160e01b900460ff16600781111561155d5761155d612101565b1461157a5760405162461bcd60e51b815260040161059890612a15565b611585816000611959565b610b53816001611959565b60026004820154600160e01b900460ff1660078111156115b2576115b2612101565b146115cf5760405162461bcd60e51b815260040161059890612a15565b6004810154600160a01b90046001600160401b0316156116015760405162461bcd60e51b815260040161059890612a54565b80546002820154611623916001600160401b03610100909104811691166128dc565b6001600160401b0316436001600160401b0316106116535760405162461bcd60e51b815260040161059890612bcf565b600481018054600160a01b600160e01b031916600160a01b436001600160401b031602179055610b53816003611959565b600480820154600160e01b900460ff1660078111156116a5576116a5612101565b146116c25760405162461bcd60e51b815260040161059890612a15565b610b53816009611959565b60016004820154600160e01b900460ff1660078111156116ef576116ef612101565b148061171a575060026004820154600160e01b900460ff16600781111561171857611718612101565b145b80611744575060036004820154600160e01b900460ff16600781111561174257611742612101565b145b6117605760405162461bcd60e51b815260040161059890612a15565b80546002820154611782916001600160401b03610100909104811691166128dc565b6001600160401b0316436001600160401b0316106117b25760405162461bcd60e51b815260040161059890612c13565b610b53816006611959565b6001600160a01b03163b151590565b600054610100900460ff166117f35760405162461bcd60e51b815260040161059890612c6b565b565b60026004820154600160e01b900460ff16600781111561181757611817612101565b146118345760405162461bcd60e51b815260040161059890612a15565b6002815460ff16600381111561184c5761184c612101565b148061186d57506003815460ff16600381111561186b5761186b612101565b145b156118da576004810154815460028301546001600160401b03600160a01b9093048316926118a3926101009004811691166128dc565b6118ad91906128dc565b6001600160401b03164310156118d55760405162461bcd60e51b815260040161059890612ca3565b611952565b6004810154815460028301546001600160401b03600160a01b909304831692600160481b830481169261191692610100909104821691166128dc565b61192091906128dc565b61192a91906128dc565b6001600160401b03164310156119525760405162461bcd60e51b815260040161059890612ce4565b610b538160075b6004820154600160e01b900460ff1660008083600981111561197d5761197d612101565b036119a457600082600781111561199657611996612101565b0361199f575060015b611bb1565b60018360098111156119b8576119b8612101565b036119df5760015b8260078111156119d2576119d2612101565b0361199f57506002611bb1565b60028360098111156119f3576119f3612101565b03611a1a5760015b826007811115611a0d57611a0d612101565b0361199f57506007611bb1565b6003836009811115611a2e57611a2e612101565b03611a54576002826007811115611a4757611a47612101565b0361199f57506003611bb1565b6005836009811115611a6857611a68612101565b03611a745760036119c0565b6004836009811115611a8857611a88612101565b03611a945760036119fb565b6006836009811115611aa857611aa8612101565b03611b07576001826007811115611ac157611ac1612101565b1480611ade57506003826007811115611adc57611adc612101565b145b80611afa57506002826007811115611af857611af8612101565b145b1561199f57506006611bb1565b6007836009811115611b1b57611b1b612101565b03611b41576002826007811115611b3457611b34612101565b0361199f57506004611bb1565b6008836009811115611b5557611b55612101565b03611b7b576004826007811115611b6e57611b6e612101565b0361199f57506005611bb1565b6009836009811115611b8f57611b8f612101565b03611bb1576004826007811115611ba857611ba8612101565b03611bb1575060075b6000816007811115611bc557611bc5612101565b14610cf55760048401805482919060ff60e01b1916600160e01b836007811115611bf157611bf1612101565b021790555050505050565b611c05816117bd565b611c215760405162461bcd60e51b815260040161059890612d3e565b600080516020612e4a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611c5983611c75565b600082511180611c665750805b1561145457610cf58383611cb5565b611c7e81611bfc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610a878383604051806060016040528060278152602001612e6a602791396060600080856001600160a01b031685604051611cf29190612d94565b600060405180830381855af49150503d8060008114611d2d576040519150601f19603f3d011682016040523d82523d6000602084013e611d32565b606091505b5091509150611d4386838387611d4d565b9695505050505050565b60608315611d8a578251600003611d8357611d67856117bd565b611d835760405162461bcd60e51b815260040161059890612dd4565b5081611d94565b611d948383611d9c565b949350505050565b815115611dac5781518083602001fd5b8060405162461bcd60e51b81526004016105989190612e18565b6001600160401b031690565b611ddb81611dc6565b82525050565b6020810161139e8284611dd2565b611df881611dc6565b8114610b5357600080fd5b803561139e81611def565b6001600160a01b031690565b600061139e82611e0e565b611df881611e1a565b803561139e81611e25565b60008060408385031215611e4f57611e4f600080fd5b6000611e5b8585611e03565b9250506020611e6c85828601611e2e565b9150509250929050565b600060208284031215611e8b57611e8b600080fd5b6000611d948484611e03565b600061139e611eab611ea884611e0e565b90565b611e0e565b600061139e82611e97565b600061139e82611eb0565b611ddb81611ebb565b6020810161139e8284611ec6565b60048110610b5357600080fd5b803561139e81611edd565b80611df8565b803561139e81611ef5565b61ffff8116611df8565b803561139e81611f06565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611f4482611f1b565b81018181106001600160401b0382111715611f6157611f61611f25565b6040525050565b6000611f7360405190565b9050611f7f8282611f3b565b919050565b60006001600160401b03821115611f9d57611f9d611f25565b611fa682611f1b565b60200192915050565b82818337506000910152565b6000611fce611fc984611f84565b611f68565b905082815260208101848484011115611fe957611fe9600080fd5b611ff4848285611faf565b509392505050565b600082601f83011261201057612010600080fd5b8135611d94848260208601611fbb565b600080600080600080600080610100898b03121561204057612040600080fd5b600061204c8b8b611e03565b985050602061205d8b828c01611eea565b975050604061206e8b828c01611e03565b965050606061207f8b828c01611e03565b95505060806120908b828c01611e03565b94505060a06120a18b828c01611efb565b93505060c06120b28b828c01611f10565b92505060e08901356001600160401b038111156120d1576120d1600080fd5b6120dd8b828c01611ffc565b9150509295985092959890939650565b80611ddb565b6020810161139e82846120ed565b634e487b7160e01b600052602160045260246000fd5b60088110610b5357610b53612101565b80611f7f81612117565b600061139e82612127565b611ddb81612131565b6020810161139e828461213c565b60006020828403121561216857612168600080fd5b6000611d948484611e2e565b6000806040838503121561218a5761218a600080fd5b60006121968585611e2e565b92505060208301356001600160401b038111156121b5576121b5600080fd5b611e6c85828601611ffc565b611ddb81611e1a565b6020810161139e82846121c1565b60048110610b5357610b53612101565b80611f7f816121d8565b600061139e826121e8565b611ddb816121f2565b6020810161139e82846121fd565b6000806040838503121561222a5761222a600080fd5b6000611e5b8585611e2e565b60008060006060848603121561224e5761224e600080fd5b600061225a8686611e2e565b935050602061226b86828701611e2e565b925050604061227c86828701611e2e565b9150509250925092565b604081016122948285611dd2565b610a8760208301846121c1565b805161139e81611e25565b6000602082840312156122c1576122c1600080fd5b6000611d9484846122a1565b606081016122db8286611dd2565b6122e860208301856121c1565b611d9460408301846121c1565b6040810161229482856120ed565b801515611df8565b805161139e81612303565b60006020828403121561232b5761232b600080fd5b6000611d94848461230b565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b815291505b5060200190565b6020808252810161139e81612337565b634e487b7160e01b600052601160045260246000fd5b600061239c82611dc6565b91506001600160401b0382036123b4576123b461237b565b5060010190565b805161139e81611f06565b6000602082840312156123db576123db600080fd5b6000611d9484846123bb565b6018815260006020820177496e76616c6964206d61746368696e67207265706c69636160401b81529150612364565b6020808252810161139e816123e7565b600061139e61ffff8316611dc6565b611ddb81612426565b6040810161244c8285611dd2565b610a876020830184612435565b60006001600160401b0382111561247257612472611f25565b5060209081020190565b600061248a611fc984612459565b838152905060208082019084028301858111156124a9576124a9600080fd5b835b818110156124cd57806124be88826122a1565b845250602092830192016124ab565b5050509392505050565b600082601f8301126124eb576124eb600080fd5b8151611d9484826020860161247c565b63ffffffff8116611df8565b805161139e816124fb565b6000612520611fc984612459565b8381529050602080820190840283018581111561253f5761253f600080fd5b835b818110156124cd57806125548882612507565b84525060209283019201612541565b600082601f83011261257757612577600080fd5b8151611d94848260208601612512565b600080600080600060a086880312156125a2576125a2600080fd5b85516001600160401b038111156125bb576125bb600080fd5b6125c7888289016124d7565b95505060208601516001600160401b038111156125e6576125e6600080fd5b6125f2888289016124d7565b9450506040612603888289016123bb565b9350506060612614888289016123bb565b92505060808601516001600160401b0381111561263357612633600080fd5b61263f88828901612563565b9150509295509295909350565b601481526000602082017324b73b30b634b21022281039bab136b4ba3a32b960611b81529150612364565b6020808252810161139e8161264c565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806126b157607f821691505b6020821081036126c3576126c3612687565b50919050565b600061139e611ea88381565b6126de836126c9565b815460001960089490940293841b1916921b91909117905550565b60006114548184846126d5565b81811015610c42576127196000826126f9565b600101612706565b601f821115611454576000818152602090206020601f850104810160208510156127485750805b61275a6020601f860104830182612706565b5050505050565b6000196008929092029190911c191690565b600061277f8383612761565b600290930290921792915050565b81516001600160401b038111156127a6576127a6611f25565b6127b0825461269d565b6127bb828285612721565b6020601f8311600181146127e957600084156127d75750858201515b6127e18582612773565b865550612843565b600085815260208120601f198616915b8281101561281957888501518255602094850194600190920191016127f9565b868310156128365784890151612832601f891682612761565b8355505b6001600288020188555050505b505050505050565b602c8152600060208201600080516020612e2a83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b6020808252810161139e8161284b565b602c8152600060208201600080516020612e2a83398151915281526b6163746976652070726f787960a01b6020820152915061287e565b6020808252810161139e81612895565b60006128e782611dc6565b91506128f283611dc6565b9250508082016001600160401b0381111561139e5761139e61237b565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6020820152915061287e565b6020808252810161139e8161290f565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b6020820152915061287e565b6020808252810161139e81612974565b600060ff821661139e565b611ddb816129cf565b6020810161139e82846129da565b600d81526000602082016c496e76616c696420737461746560981b81529150612364565b6020808252810161139e816129f1565b60188152600060208201776f6e6c792063616e20706175736564206f6e652074696d6560401b81529150612364565b6020808252810161139e81612a25565b6000612a6f82611dc6565b9150612a7a83611dc6565b9250508181036001600160401b0381111561139e5761139e61237b565b634e487b7160e01b600052603260045260246000fd5b600060001982036123b4576123b461237b565b805161139e81611ef5565b600060208284031215612ae057612ae0600080fd5b6000611d948484612ac0565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b6020820152915061287e565b6020808252810161139e81612aec565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b6020820152915061287e565b6020808252810161139e81612b47565b601b81526000602082017a30b63932b0bc903134b23234b7339631b0b713ba103830bab9b29760291b81529150612364565b6020808252810161139e81612b9d565b601d81526000602082017f62696420616c726561792073746172742c63616e27742063616e63656c00000081529150612364565b6020808252810161139e81612bdf565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061287e565b6020808252810161139e81612c23565b601181526000602082017042696464696e6720746f6f206561726c7960781b81529150612364565b6020808252810161139e81612c7b565b601a815260006020820179109a59191a5b99c81c195c9a5bd9081b9bdd08195e1c1a5c995960321b81529150612364565b6020808252810161139e81612cb3565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b6020820152915061287e565b6020808252810161139e81612cf4565b60005b83811015612d69578181015183820152602001612d51565b50506000910152565b6000612d7c825190565b612d8a818560208601612d4e565b9290920192915050565b6000610a878284612d72565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612364565b6020808252810161139e81612da0565b6000612dee825190565b808452602084019350612e05818560208601612d4e565b612e0e81611f1b565b9093019392505050565b60208082528101610a878184612de456fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d61de650ec166c6e4f215bdd820fdc29e271d817a65900b7b5f8e22ff0ce2d8f64736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061013c5760003560e01c806308916197146101415780630e635d7e146101775780631ed25163146101995780632620333e146101b95780632b34cbc5146101e65780632de966b01461020657806330e3dd251461024c57806334ad3b4a1461028c5780633659cfe6146102b957806338d51ea7146102d957806341f0ebb8146102f95780634f1ef2861461033557806352d1902d1461034857806352ffae6b1461035d57806392191e6c1461037d5780639247e80f1461039d5780639aa023d1146103bd5780639e5a53e5146103dd5780639f6c8a47146103fd578063aaf10f421461041d578063b1fa766c1461043f578063b6c917831461045f578063bbf83674146104a5578063c0c53b8b146104c5578063d7606cf6146104e5578063dd8fff9714610505578063e19edda114610525575b600080fd5b34801561014d57600080fd5b50606554610161906001600160401b031681565b60405161016e9190611de1565b60405180910390f35b34801561018357600080fd5b50610197610192366004611e39565b610567565b005b3480156101a557600080fd5b506101976101b4366004611e76565b610608565b3480156101c557600080fd5b50606a546101d9906001600160a01b031681565b60405161016e9190611ecf565b3480156101f257600080fd5b50610161610201366004612020565b610700565b34801561021257600080fd5b5061023f610221366004611e76565b6001600160401b031660009081526066602052604090206001015490565b60405161016e91906120f3565b34801561025857600080fd5b50610161610267366004611e76565b6001600160401b03908116600090815260666020526040902054600160881b90041690565b34801561029857600080fd5b506102ac6102a7366004611e76565b610a5f565b60405161016e9190612145565b3480156102c557600080fd5b506101976102d4366004612153565b610a8e565b3480156102e557600080fd5b506101616102f4366004611e76565b610b56565b34801561030557600080fd5b50610161610314366004611e76565b6001600160401b039081166000908152606660205260409020600201541690565b610197610343366004612174565b610b8d565b34801561035457600080fd5b5061023f610c46565b34801561036957600080fd5b50610197610378366004611e76565b610ca3565b34801561038957600080fd5b50610197610398366004611e76565b610cfb565b3480156103a957600080fd5b506101976103b8366004611e76565b610df3565b3480156103c957600080fd5b506069546101d9906001600160a01b031681565b3480156103e957600080fd5b506101616103f8366004611e76565b610e7f565b34801561040957600080fd5b50610161610418366004611e76565b610ed0565b34801561042957600080fd5b50610432610f2a565b60405161016e91906121ca565b34801561044b57600080fd5b5061019761045a366004611e76565b610f39565b34801561046b57600080fd5b5061049861047a366004611e76565b6001600160401b031660009081526066602052604090205460ff1690565b60405161016e9190612206565b3480156104b157600080fd5b506101976104c0366004612214565b610fc5565b3480156104d157600080fd5b506101976104e0366004612236565b611089565b3480156104f157600080fd5b50610197610500366004611e76565b61119e565b34801561051157600080fd5b50606b546101d9906001600160a01b031681565b34801561053157600080fd5b50610432610540366004611e76565b6001600160401b03166000908152606660205260409020600401546001600160a01b031690565b606b546001600160a01b0316823382146105a1578033604051636355073560e01b8152600401610598929190612286565b60405180910390fd5b6001600160401b03841660009081526066602052604090206105c28161122a565b6040516001600160a01b038516906001600160401b038716907f821b2f08eee92e612e3d5f8a0f9249514abb4bcb60d2c9a815c55ec2288e36c990600090a35050505050565b60405163e19edda160e01b815230908290600090839063e19edda190610632908590600401611de1565b602060405180830381865afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906122ac565b90506001600160a01b03811633146106a45781813360405163bb5a686560e01b8152600401610598939291906122cd565b6001600160401b03841660009081526066602052604090206106c581611273565b6040516001600160401b038616907fdcc3f18bbb54786ec327b109e3597e1adc0e10856ba975001e5ec6f2922aee4090600090a25050505050565b606854604051632474521560e21b81526000916001600160a01b0316907f2e7a99dcc48463ba57667732f1d19d96afa51e11db099e5c9c708076a0a080409082906391d148549061075790849033906004016122f5565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612316565b6107b45760405162461bcd60e51b81526004016105989061236b565b606580546001600160401b03169060006107cd83612391565b82546101009290920a6001600160401b03818102199093169183160217909155606554166000908152606660205260409081902060695491516314a41d8560e01b81529092506001600160a01b03909116906314a41d8590610833908f90600401611de1565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087491906123c6565b61ffff168661ffff161061089a5760405162461bcd60e51b815260040161059890612416565b6000606960009054906101000a90046001600160a01b03166001600160a01b031663146846a88e896040518363ffffffff1660e01b81526004016108df92919061243e565b600060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109249190810190612587565b50505050905060008151111561095a5761093e813361133d565b61095a5760405162461bcd60e51b815260040161059890612677565b81548c90839060ff1916600183600381111561097857610978612101565b02179055508a8260000160016101000a8154816001600160401b0302191690836001600160401b03160217905550898260000160096101000a8154816001600160401b0302191690836001600160401b03160217905550888260000160116101000a8154816001600160401b0302191690836001600160401b0316021790555087826001018190555085826003019081610a12919061278d565b50506004810180546001600160a01b0319163317905560020180546001600160401b034381166001600160401b031990921691909117909155606554169250505098975050505050505050565b6001600160401b03811660009081526066602052604081206004810154600160e01b900460ff165b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ad65760405162461bcd60e51b815260040161059890612885565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b086113a4565b6001600160a01b031614610b2e5760405162461bcd60e51b8152600401610598906128cc565b610b37816113c0565b60408051600080825260208201909252610b5391839190611459565b50565b6001600160401b0380821660009081526066602052604081208054600282015492939192610a8792610100909204821691166128dc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bd55760405162461bcd60e51b815260040161059890612885565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c076113a4565b6001600160a01b031614610c2d5760405162461bcd60e51b8152600401610598906128cc565b610c36826113c0565b610c4282826001611459565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c905760405162461bcd60e51b815260040161059890612964565b50600080516020612e4a83398151915290565b606a546001600160a01b031681338214610cd4578033604051636355073560e01b8152600401610598929190612286565b6001600160401b0383166000908152606660205260409020610cf58161153b565b50505050565b60405163e19edda160e01b815230908290600090839063e19edda190610d25908590600401611de1565b602060405180830381865afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906122ac565b90506001600160a01b0381163314610d975781813360405163bb5a686560e01b8152600401610598939291906122cd565b6001600160401b0384166000908152606660205260409020610db881611590565b6040516001600160401b038616907f626d41b3e003b5c1801aaa2831a8ba5e6f1b5d68d30196e9bf22fc928792d89890600090a25050505050565b606b546001600160a01b031681338214610e24578033604051636355073560e01b8152600401610598929190612286565b6001600160401b0383166000908152606660205260409020610e4581611684565b6040516001600160401b038516907fe76447b03fa89f6733afb0da8c385e7ffae3a3a92a26544a29f1de4e5982b97090600090a250505050565b6001600160401b03808216600090815260666020526040812060048101548154600283015493949293600160a01b909204831692610ec692610100909204811691166128dc565b610a8791906128dc565b6001600160401b03808216600090815260666020526040812060048101548154600283015493949293600160a01b909204831692600160481b8204811692610f20926101009004821691166128dc565b610ec691906128dc565b6000610f346113a4565b905090565b606b546001600160a01b031681338214610f6a578033604051636355073560e01b8152600401610598929190612286565b6001600160401b0383166000908152606660205260409020610f8b816116cd565b6040516001600160401b038516907f225fdadf186a0d9a44c06a05f50a5bdede5791bab4fdb67c98246934eb67ccea90600090a250505050565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610ffc90849033906004016122f5565b602060405180830381865afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190612316565b6110595760405162461bcd60e51b81526004016105989061236b565b5050606a80546001600160a01b039384166001600160a01b031991821617909155606b8054929093169116179055565b600054610100900460ff16158080156110a95750600054600160ff909116105b806110ca57506110b8306117bd565b1580156110ca575060005460ff166001145b6110e65760405162461bcd60e51b8152600401610598906129bf565b6000805460ff191660011790558015611109576000805461ff0019166101001790555b606780546001600160a01b038087166001600160a01b03199283161790925560688054868416908316179055606980549285169290911691909117905561114e6117cc565b8015610cf5576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890611190906001906129e3565b60405180910390a150505050565b606b546001600160a01b0316813382146111cf578033604051636355073560e01b8152600401610598929190612286565b6001600160401b03831660009081526066602052604090206111f0816117f5565b6040516001600160401b038516907f913823578c5ee3be58d2695ff6571ebfb455231c3d35eb1660cff0faacadd83790600090a250505050565b600480820154600160e01b900460ff16600781111561124b5761124b612101565b146112685760405162461bcd60e51b815260040161059890612a15565b610b53816008611959565b60036004820154600160e01b900460ff16600781111561129557611295612101565b146112b25760405162461bcd60e51b815260040161059890612a15565b6004810154600160a01b90046001600160401b03166000036112e65760405162461bcd60e51b815260040161059890612a54565b600481015461130590600160a01b90046001600160401b031643612a64565b6004820180546001600160401b0392909216600160a01b02600160a01b600160e01b0319909216919091179055610b53816005611959565b6000805b835181101561139857826001600160a01b031684828151811061136657611366612a97565b60200260200101516001600160a01b03160361138657600191505061139e565b8061139081612aad565b915050611341565b50600090505b92915050565b600080516020612e4a833981519152546001600160a01b031690565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d14854906113f790849033906004016122f5565b602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190612316565b6114545760405162461bcd60e51b81526004016105989061236b565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561148c5761145483611bfc565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156114e6575060408051601f3d908101601f191682019092526114e391810190612acb565b60015b6115025760405162461bcd60e51b815260040161059890612b37565b600080516020612e4a833981519152811461152f5760405162461bcd60e51b815260040161059890612b8d565b50611454838383611c50565b60006004820154600160e01b900460ff16600781111561155d5761155d612101565b1461157a5760405162461bcd60e51b815260040161059890612a15565b611585816000611959565b610b53816001611959565b60026004820154600160e01b900460ff1660078111156115b2576115b2612101565b146115cf5760405162461bcd60e51b815260040161059890612a15565b6004810154600160a01b90046001600160401b0316156116015760405162461bcd60e51b815260040161059890612a54565b80546002820154611623916001600160401b03610100909104811691166128dc565b6001600160401b0316436001600160401b0316106116535760405162461bcd60e51b815260040161059890612bcf565b600481018054600160a01b600160e01b031916600160a01b436001600160401b031602179055610b53816003611959565b600480820154600160e01b900460ff1660078111156116a5576116a5612101565b146116c25760405162461bcd60e51b815260040161059890612a15565b610b53816009611959565b60016004820154600160e01b900460ff1660078111156116ef576116ef612101565b148061171a575060026004820154600160e01b900460ff16600781111561171857611718612101565b145b80611744575060036004820154600160e01b900460ff16600781111561174257611742612101565b145b6117605760405162461bcd60e51b815260040161059890612a15565b80546002820154611782916001600160401b03610100909104811691166128dc565b6001600160401b0316436001600160401b0316106117b25760405162461bcd60e51b815260040161059890612c13565b610b53816006611959565b6001600160a01b03163b151590565b600054610100900460ff166117f35760405162461bcd60e51b815260040161059890612c6b565b565b60026004820154600160e01b900460ff16600781111561181757611817612101565b146118345760405162461bcd60e51b815260040161059890612a15565b6002815460ff16600381111561184c5761184c612101565b148061186d57506003815460ff16600381111561186b5761186b612101565b145b156118da576004810154815460028301546001600160401b03600160a01b9093048316926118a3926101009004811691166128dc565b6118ad91906128dc565b6001600160401b03164310156118d55760405162461bcd60e51b815260040161059890612ca3565b611952565b6004810154815460028301546001600160401b03600160a01b909304831692600160481b830481169261191692610100909104821691166128dc565b61192091906128dc565b61192a91906128dc565b6001600160401b03164310156119525760405162461bcd60e51b815260040161059890612ce4565b610b538160075b6004820154600160e01b900460ff1660008083600981111561197d5761197d612101565b036119a457600082600781111561199657611996612101565b0361199f575060015b611bb1565b60018360098111156119b8576119b8612101565b036119df5760015b8260078111156119d2576119d2612101565b0361199f57506002611bb1565b60028360098111156119f3576119f3612101565b03611a1a5760015b826007811115611a0d57611a0d612101565b0361199f57506007611bb1565b6003836009811115611a2e57611a2e612101565b03611a54576002826007811115611a4757611a47612101565b0361199f57506003611bb1565b6005836009811115611a6857611a68612101565b03611a745760036119c0565b6004836009811115611a8857611a88612101565b03611a945760036119fb565b6006836009811115611aa857611aa8612101565b03611b07576001826007811115611ac157611ac1612101565b1480611ade57506003826007811115611adc57611adc612101565b145b80611afa57506002826007811115611af857611af8612101565b145b1561199f57506006611bb1565b6007836009811115611b1b57611b1b612101565b03611b41576002826007811115611b3457611b34612101565b0361199f57506004611bb1565b6008836009811115611b5557611b55612101565b03611b7b576004826007811115611b6e57611b6e612101565b0361199f57506005611bb1565b6009836009811115611b8f57611b8f612101565b03611bb1576004826007811115611ba857611ba8612101565b03611bb1575060075b6000816007811115611bc557611bc5612101565b14610cf55760048401805482919060ff60e01b1916600160e01b836007811115611bf157611bf1612101565b021790555050505050565b611c05816117bd565b611c215760405162461bcd60e51b815260040161059890612d3e565b600080516020612e4a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611c5983611c75565b600082511180611c665750805b1561145457610cf58383611cb5565b611c7e81611bfc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610a878383604051806060016040528060278152602001612e6a602791396060600080856001600160a01b031685604051611cf29190612d94565b600060405180830381855af49150503d8060008114611d2d576040519150601f19603f3d011682016040523d82523d6000602084013e611d32565b606091505b5091509150611d4386838387611d4d565b9695505050505050565b60608315611d8a578251600003611d8357611d67856117bd565b611d835760405162461bcd60e51b815260040161059890612dd4565b5081611d94565b611d948383611d9c565b949350505050565b815115611dac5781518083602001fd5b8060405162461bcd60e51b81526004016105989190612e18565b6001600160401b031690565b611ddb81611dc6565b82525050565b6020810161139e8284611dd2565b611df881611dc6565b8114610b5357600080fd5b803561139e81611def565b6001600160a01b031690565b600061139e82611e0e565b611df881611e1a565b803561139e81611e25565b60008060408385031215611e4f57611e4f600080fd5b6000611e5b8585611e03565b9250506020611e6c85828601611e2e565b9150509250929050565b600060208284031215611e8b57611e8b600080fd5b6000611d948484611e03565b600061139e611eab611ea884611e0e565b90565b611e0e565b600061139e82611e97565b600061139e82611eb0565b611ddb81611ebb565b6020810161139e8284611ec6565b60048110610b5357600080fd5b803561139e81611edd565b80611df8565b803561139e81611ef5565b61ffff8116611df8565b803561139e81611f06565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611f4482611f1b565b81018181106001600160401b0382111715611f6157611f61611f25565b6040525050565b6000611f7360405190565b9050611f7f8282611f3b565b919050565b60006001600160401b03821115611f9d57611f9d611f25565b611fa682611f1b565b60200192915050565b82818337506000910152565b6000611fce611fc984611f84565b611f68565b905082815260208101848484011115611fe957611fe9600080fd5b611ff4848285611faf565b509392505050565b600082601f83011261201057612010600080fd5b8135611d94848260208601611fbb565b600080600080600080600080610100898b03121561204057612040600080fd5b600061204c8b8b611e03565b985050602061205d8b828c01611eea565b975050604061206e8b828c01611e03565b965050606061207f8b828c01611e03565b95505060806120908b828c01611e03565b94505060a06120a18b828c01611efb565b93505060c06120b28b828c01611f10565b92505060e08901356001600160401b038111156120d1576120d1600080fd5b6120dd8b828c01611ffc565b9150509295985092959890939650565b80611ddb565b6020810161139e82846120ed565b634e487b7160e01b600052602160045260246000fd5b60088110610b5357610b53612101565b80611f7f81612117565b600061139e82612127565b611ddb81612131565b6020810161139e828461213c565b60006020828403121561216857612168600080fd5b6000611d948484611e2e565b6000806040838503121561218a5761218a600080fd5b60006121968585611e2e565b92505060208301356001600160401b038111156121b5576121b5600080fd5b611e6c85828601611ffc565b611ddb81611e1a565b6020810161139e82846121c1565b60048110610b5357610b53612101565b80611f7f816121d8565b600061139e826121e8565b611ddb816121f2565b6020810161139e82846121fd565b6000806040838503121561222a5761222a600080fd5b6000611e5b8585611e2e565b60008060006060848603121561224e5761224e600080fd5b600061225a8686611e2e565b935050602061226b86828701611e2e565b925050604061227c86828701611e2e565b9150509250925092565b604081016122948285611dd2565b610a8760208301846121c1565b805161139e81611e25565b6000602082840312156122c1576122c1600080fd5b6000611d9484846122a1565b606081016122db8286611dd2565b6122e860208301856121c1565b611d9460408301846121c1565b6040810161229482856120ed565b801515611df8565b805161139e81612303565b60006020828403121561232b5761232b600080fd5b6000611d94848461230b565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b815291505b5060200190565b6020808252810161139e81612337565b634e487b7160e01b600052601160045260246000fd5b600061239c82611dc6565b91506001600160401b0382036123b4576123b461237b565b5060010190565b805161139e81611f06565b6000602082840312156123db576123db600080fd5b6000611d9484846123bb565b6018815260006020820177496e76616c6964206d61746368696e67207265706c69636160401b81529150612364565b6020808252810161139e816123e7565b600061139e61ffff8316611dc6565b611ddb81612426565b6040810161244c8285611dd2565b610a876020830184612435565b60006001600160401b0382111561247257612472611f25565b5060209081020190565b600061248a611fc984612459565b838152905060208082019084028301858111156124a9576124a9600080fd5b835b818110156124cd57806124be88826122a1565b845250602092830192016124ab565b5050509392505050565b600082601f8301126124eb576124eb600080fd5b8151611d9484826020860161247c565b63ffffffff8116611df8565b805161139e816124fb565b6000612520611fc984612459565b8381529050602080820190840283018581111561253f5761253f600080fd5b835b818110156124cd57806125548882612507565b84525060209283019201612541565b600082601f83011261257757612577600080fd5b8151611d94848260208601612512565b600080600080600060a086880312156125a2576125a2600080fd5b85516001600160401b038111156125bb576125bb600080fd5b6125c7888289016124d7565b95505060208601516001600160401b038111156125e6576125e6600080fd5b6125f2888289016124d7565b9450506040612603888289016123bb565b9350506060612614888289016123bb565b92505060808601516001600160401b0381111561263357612633600080fd5b61263f88828901612563565b9150509295509295909350565b601481526000602082017324b73b30b634b21022281039bab136b4ba3a32b960611b81529150612364565b6020808252810161139e8161264c565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806126b157607f821691505b6020821081036126c3576126c3612687565b50919050565b600061139e611ea88381565b6126de836126c9565b815460001960089490940293841b1916921b91909117905550565b60006114548184846126d5565b81811015610c42576127196000826126f9565b600101612706565b601f821115611454576000818152602090206020601f850104810160208510156127485750805b61275a6020601f860104830182612706565b5050505050565b6000196008929092029190911c191690565b600061277f8383612761565b600290930290921792915050565b81516001600160401b038111156127a6576127a6611f25565b6127b0825461269d565b6127bb828285612721565b6020601f8311600181146127e957600084156127d75750858201515b6127e18582612773565b865550612843565b600085815260208120601f198616915b8281101561281957888501518255602094850194600190920191016127f9565b868310156128365784890151612832601f891682612761565b8355505b6001600288020188555050505b505050505050565b602c8152600060208201600080516020612e2a83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b6020808252810161139e8161284b565b602c8152600060208201600080516020612e2a83398151915281526b6163746976652070726f787960a01b6020820152915061287e565b6020808252810161139e81612895565b60006128e782611dc6565b91506128f283611dc6565b9250508082016001600160401b0381111561139e5761139e61237b565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6020820152915061287e565b6020808252810161139e8161290f565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b6020820152915061287e565b6020808252810161139e81612974565b600060ff821661139e565b611ddb816129cf565b6020810161139e82846129da565b600d81526000602082016c496e76616c696420737461746560981b81529150612364565b6020808252810161139e816129f1565b60188152600060208201776f6e6c792063616e20706175736564206f6e652074696d6560401b81529150612364565b6020808252810161139e81612a25565b6000612a6f82611dc6565b9150612a7a83611dc6565b9250508181036001600160401b0381111561139e5761139e61237b565b634e487b7160e01b600052603260045260246000fd5b600060001982036123b4576123b461237b565b805161139e81611ef5565b600060208284031215612ae057612ae0600080fd5b6000611d948484612ac0565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b6020820152915061287e565b6020808252810161139e81612aec565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b6020820152915061287e565b6020808252810161139e81612b47565b601b81526000602082017a30b63932b0bc903134b23234b7339631b0b713ba103830bab9b29760291b81529150612364565b6020808252810161139e81612b9d565b601d81526000602082017f62696420616c726561792073746172742c63616e27742063616e63656c00000081529150612364565b6020808252810161139e81612bdf565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061287e565b6020808252810161139e81612c23565b601181526000602082017042696464696e6720746f6f206561726c7960781b81529150612364565b6020808252810161139e81612c7b565b601a815260006020820179109a59191a5b99c81c195c9a5bd9081b9bdd08195e1c1a5c995960321b81529150612364565b6020808252810161139e81612cb3565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b6020820152915061287e565b6020808252810161139e81612cf4565b60005b83811015612d69578181015183820152602001612d51565b50506000910152565b6000612d7c825190565b612d8a818560208601612d4e565b9290920192915050565b6000610a878284612d72565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612364565b6020808252810161139e81612da0565b6000612dee825190565b808452602084019350612e05818560208601612d4e565b612e0e81611f1b565b9093019392505050565b60208082528101610a878184612de456fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d61de650ec166c6e4f215bdd820fdc29e271d817a65900b7b5f8e22ff0ce2d8f64736f6c63430008150033",
  "devdoc": {
    "details": "This contract is intended to be inherited by specific matching-related contracts.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "createMatching(uint64,uint8,uint64,uint64,uint64,uint256,uint16,string)": {
        "params": {
          "_additionalInfo": "The additional information about the matching.",
          "_bidSelectionRule": "The rules for determining the winning bid.",
          "_biddingDelayBlockCount": "The number of blocks to delay bidding.",
          "_biddingPeriodBlockCount": "The number of blocks for bidding period.",
          "_biddingThreshold": "The threshold for bidding.",
          "_datasetId": "The dataset id to create matching.",
          "_replicaIndex": "The index of the replica in dataset.",
          "_storageCompletionPeriodBlocks": "The number of blocks for storage period."
        },
        "returns": {
          "_0": "The matchingId."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "reportPublishMatching(uint64)": {
        "params": {
          "_matchingId": "The matching id to publish cars."
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Matchings Base Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMatching(uint64,uint8,uint64,uint64,uint64,uint256,uint16,string)": {
        "notice": "Function for create a new matching."
      },
      "getBidSelectionRule(uint64)": {
        "notice": "Function for getting the selection rule of a matching"
      },
      "getBiddingAfterPauseHeight(uint64)": {
        "notice": "Function for getting the after pause height of a matching"
      },
      "getBiddingEndHeight(uint64)": {
        "notice": "Function for getting the end height of a matching"
      },
      "getBiddingStartHeight(uint64)": {
        "notice": "Function for getting the start height of a matching"
      },
      "getBiddingThreshold(uint64)": {
        "notice": "Function for getting the threshold of a matching"
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getMatchingCreatedHeight(uint64)": {
        "notice": "Function for getting the matching creation block number"
      },
      "getMatchingInitiator(uint64)": {
        "notice": "Function for getting the initiator of a matching"
      },
      "getMatchingState(uint64)": {
        "notice": "Function for getting the state of a matching"
      },
      "getMatchingStorageCompletionHeight(uint64)": {
        "notice": "Function for getting the storage completion period blocks in a matching"
      },
      "initDependencies(address,address)": {
        "notice": "Function for init matchings instance."
      },
      "initialize(address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "matchingsCount()": {
        "notice": "Declare private variables"
      },
      "pauseMatching(uint64)": {
        "notice": "Function for pausing a matching"
      },
      "reportCancelMatching(uint64)": {
        "notice": "Function for report canceling a matching"
      },
      "reportCloseMatching(uint64)": {
        "notice": "Function for closing a matching"
      },
      "reportMatchingHasWinner(uint64,address)": {
        "notice": "Function for report complete a matching with a winner"
      },
      "reportMatchingNoWinner(uint64)": {
        "notice": "Function for report complete a matching without winner."
      },
      "reportPublishMatching(uint64)": {
        "notice": "Function for publishing a matching"
      },
      "resumeMatching(uint64)": {
        "notice": "Function for resuming a paused matching"
      }
    },
    "notice": "This contract serves as the base for managing matchings, their states, and associated actions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 36575,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "matchingsCount",
        "offset": 0,
        "slot": "101",
        "type": "t_uint64"
      },
      {
        "astId": 36580,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "matchings",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint64,t_struct(Matching)45160_storage)"
      },
      {
        "astId": 36582,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 36585,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "roles",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IRoles)29558"
      },
      {
        "astId": 36588,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "datasetsRequirement",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IDatasetsRequirement)30208"
      },
      {
        "astId": 36591,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "matchingsTarget",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IMatchingsTarget)30632"
      },
      {
        "astId": 36594,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "matchingsBids",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IMatchingsBids)30464"
      },
      {
        "astId": 36599,
        "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
        "label": "__gap",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDatasetsRequirement)30208": {
        "encoding": "inplace",
        "label": "contract IDatasetsRequirement",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsBids)30464": {
        "encoding": "inplace",
        "label": "contract IMatchingsBids",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsTarget)30632": {
        "encoding": "inplace",
        "label": "contract IMatchingsTarget",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)29558": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_enum(BidSelectionRule)45136": {
        "encoding": "inplace",
        "label": "enum MatchingType.BidSelectionRule",
        "numberOfBytes": "1"
      },
      "t_enum(State)45118": {
        "encoding": "inplace",
        "label": "enum MatchingType.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint64,t_struct(Matching)45160_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct MatchingType.Matching)",
        "numberOfBytes": "32",
        "value": "t_struct(Matching)45160_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Matching)45160_storage": {
        "encoding": "inplace",
        "label": "struct MatchingType.Matching",
        "members": [
          {
            "astId": 45140,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "bidSelectionRule",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BidSelectionRule)45136"
          },
          {
            "astId": 45142,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "biddingDelayBlockCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 45144,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "biddingPeriodBlockCount",
            "offset": 9,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 45146,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "storageCompletionPeriodBlocks",
            "offset": 17,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 45148,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "biddingThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 45150,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "createdBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 45152,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "additionalInfo",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 45154,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "initiator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 45156,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "pausedBlockCount",
            "offset": 20,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 45159,
            "contract": "src/v0.8/module/matching/Matchings.sol:Matchings",
            "label": "state",
            "offset": 28,
            "slot": "4",
            "type": "t_enum(State)45118"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}