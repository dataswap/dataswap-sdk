{
  "address": "0x0f206E654ccF4Fedbd62bcB6cc8F2ebD55DF0D77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "internalType": "enum MatchingType.State",
          "name": "expectedState",
          "type": "uint8"
        },
        {
          "internalType": "enum MatchingType.State",
          "name": "actualState",
          "type": "uint8"
        }
      ],
      "name": "InvalidMatchingState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "NotCompliantRuleMatchingTargetMeetsFilPlusRequirements",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "expectedInitiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualInitiator",
          "type": "address"
        }
      ],
      "name": "NotMatchingInitiator",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "MatchingBidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bidding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "cancelMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "closeMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasets",
      "outputs": [
        {
          "internalType": "contract IDatasets",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetsProof",
      "outputs": [
        {
          "internalType": "contract IDatasetsProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetsRequirement",
      "outputs": [
        {
          "internalType": "contract IDatasetsRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getMatchingBidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingBids",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingBidsCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_matchingIds",
          "type": "uint64[]"
        }
      ],
      "name": "getMatchingWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "hasMatchingBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_matchings",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsTarget",
          "type": "address"
        }
      ],
      "name": "initDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filplus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_carstore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasets",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsRequirement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsProof",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchings",
      "outputs": [
        {
          "internalType": "contract IMatchings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsTarget",
      "outputs": [
        {
          "internalType": "contract IMatchingsTarget",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9021cb8d818084f87f27b3e6df282435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"internalType\":\"enum MatchingType.State\",\"name\":\"expectedState\",\"type\":\"uint8\"},{\"internalType\":\"enum MatchingType.State\",\"name\":\"actualState\",\"type\":\"uint8\"}],\"name\":\"InvalidMatchingState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"NotCompliantRuleMatchingTargetMeetsFilPlusRequirements\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"expectedInitiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualInitiator\",\"type\":\"address\"}],\"name\":\"NotMatchingInitiator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MatchingBidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bidding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"cancelMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"closeMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasets\",\"outputs\":[{\"internalType\":\"contract IDatasets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetsProof\",\"outputs\":[{\"internalType\":\"contract IDatasetsProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetsRequirement\",\"outputs\":[{\"internalType\":\"contract IDatasetsRequirement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getMatchingBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingBids\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingBidsCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_matchingIds\",\"type\":\"uint64[]\"}],\"name\":\"getMatchingWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"hasMatchingBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_matchings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsTarget\",\"type\":\"address\"}],\"name\":\"initDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filplus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_carstore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasets\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsRequirement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsProof\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchings\",\"outputs\":[{\"internalType\":\"contract IMatchings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsTarget\",\"outputs\":[{\"internalType\":\"contract IMatchingsTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is intended to be inherited by specific matching-related contracts.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"cancelMatching(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Matchings Base Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidMatchingState(uint64,uint8,uint8)\":[{\"notice\":\"matching errors\"}]},\"kind\":\"user\",\"methods\":{\"bidding(uint64,uint256)\":{\"notice\":\"Function for bidding on a matching\"},\"cancelMatching(uint64)\":{\"notice\":\"Function for canceling a matching\"},\"closeMatching(uint64)\":{\"notice\":\"Function for closing a matching and choosing a winner\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getMatchingBidAmount(uint64,address)\":{\"notice\":\"Function for getting bid amount of a bidder in a matching\"},\"getMatchingBids(uint64)\":{\"notice\":\"Function for getting bids in a matching\"},\"getMatchingBidsCount(uint64)\":{\"notice\":\"Function for getting the count of bids in a matching\"},\"getMatchingWinner(uint64)\":{\"notice\":\"Function for getting winner of a matching\"},\"getMatchingWinners(uint64[])\":{\"notice\":\"Function for getting winners of a matchings\"},\"hasMatchingBid(uint64,address)\":{\"notice\":\"Function for checking if a bidder has a bid in a matching\"},\"initDependencies(address,address)\":{\"notice\":\"Function for init matchings instance.\"},\"initialize(address,address,address,address,address,address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"}},\"notice\":\"This contract serves as the base for managing matchings, their states, and associated actions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/matching/MatchingsBids.sol\":\"MatchingsBids\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373031363738333234383532\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@zondax/filecoin-solidity/contracts/v0.8/SendAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\n\\n/// @title This library is helper method to send funds to some specific address. Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary SendAPI {\\n    /// @notice send token to a specific actor\\n    /// @param target The id address (uint64) you want to send funds to\\n    /// @param value tokens to be transferred to the receiver\\n    function send(CommonTypes.FilActorId target, uint256 value) internal {\\n        bytes memory result = Actor.callByID(target, 0, Misc.NONE_CODEC, new bytes(0), value, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @notice send token to a specific actor\\n    /// @param target The address you want to send funds to\\n    /// @param value tokens to be transferred to the receiver\\n    function send(CommonTypes.FilAddress memory target, uint256 value) internal {\\n        bytes memory result = Actor.callByAddress(target.data, 0, Misc.NONE_CODEC, new bytes(0), value, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69b80c657fa612d0d71464f1ce0d539826c00da27c54018490f440678910d484\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        if (exit != 0) {\\n            revert ActorError(exit);\\n        }\\n\\n        return return_value;\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"040a\\\", addr));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"00\\\", result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == 0x00) {\\n            return addr.data.length <= 10;\\n        } else if (addr.data[0] == 0x01 || addr.data[0] == 0x02) {\\n            return addr.data.length == 21;\\n        } else if (addr.data[0] == 0x03) {\\n            return addr.data.length == 49;\\n        } else if (addr.data[0] == 0x04) {\\n            return addr.data.length <= 64;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\",\"keccak256\":\"0x3ca8652660af7a3ff1b894b7c8a875645999b561499e960198dfe330d39ce387\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Leb128.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4\",\"license\":\"Apache-2.0\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IEscrow.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// @title IEscrow Interface\\n/// @notice This interface defines the escrow-related functions within the system.\\ninterface IEscrow {\\n    /// @dev Records the sent amount as credit for future withdrawals.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Collateral} event upon successful credit recording.\\n    function collateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Redeem funds authorized for an address.\\n    /// Redeem the collateral funds after the collateral expires.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {UpdateCollateral} event upon successful credit recording.\\n    function collateralRedeem(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @notice Withdraw funds authorized for an address.\\n    /// @dev This function allows anyone to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {Withdrawn} event upon successful withdrawal.\\n    function withdraw(\\n        EscrowType.Type _type,\\n        address payable _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Payment} event upon successful credit recording.\\n    function payment(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentSingleBeneficiary} event upon successful credit recording.\\n    function paymentSingleBeneficiary(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Payment withdraw funds authorized for an address.\\n    /// @dev This function allows anyone to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @notice Emits a {PaymentWithdrawn} event upon successful credit recording.\\n    function paymentWithdraw(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    ) external;\\n\\n    /// @notice Payment transfer funds from locked to unlocked.Only total data prepare fee allowed.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The payment transfer credited funds.\\n    /// @notice Emits a {PaymentTransfer} event upon successful credit recording.\\n    function paymentTransfer(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Refund funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {PaymentRefund} event upon successful credit recording.\\n    function paymentRefund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @notice Post an update event for collateral type. Called by internal contract.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function emitCollateralUpdate(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        EscrowType.CollateralEvent _event\\n    ) external;\\n\\n    /// @notice Post an event for payment type. Called by internal contract\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function emitPaymentUpdate(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        EscrowType.PaymentEvent _event\\n    ) external;\\n\\n    /// @notice Get owner created block number.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCreatedBlockNumber(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint64);\\n\\n    /// @notice Get owner collateral funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner total funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerTotal(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner lock funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerLock(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner burned funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerBurned(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get beneficiariesList.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getBeneficiariesList(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get beneficiary fund.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function getBeneficiaryFund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total, // Total amount in fund account\\n            uint256 lock, // Lock amount in fund account for payment beneficiaries\\n            uint256 collateral, // Collateral amount in fund account for withdraw and punishment\\n            uint256 burned, // burned amount in fund account\\n            uint64 createdBlockNumber // Fund account created block number\\n        );\\n}\\n\",\"keccak256\":\"0x5354205979a1497f84f450308a04636bedb5ff0d38f0ee1fe953ee8afdaafc16\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb09fbb4ff74243480bfbf55be3a56a020220a915aebe48faca532462df096a06\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasets.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasets\\ninterface IDatasets {\\n    ///@notice Approve a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    function approveDataset(uint64 _datasetId) external;\\n\\n    ///@notice Approve the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    function approveDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Reject a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\\n    function rejectDataset(uint64 _datasetId) external;\\n\\n    ///@notice Reject the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    function rejectDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Submit metadata for a dataset\\n    ///        Note:anyone can submit dataset metadata\\n    function submitDatasetMetadata(\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) external;\\n\\n    /// @notice Update dataset usedSizeInBytes. only called by matching contract. TODO: Need to add permission control\\n    function addDatasetUsedSize(uint64 _datasetId, uint64 _size) external;\\n\\n    /// @notice Get dataset usedSizeInBytes.\\n    function getDatasetUsedSize(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset metadata\\n    function getDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory title,\\n            string memory industry,\\n            string memory name,\\n            string memory description,\\n            string memory source,\\n            string memory accessMethod,\\n            address submitter,\\n            uint64 createdBlockNumber,\\n            uint64 sizeInBytes,\\n            bool isPublic,\\n            uint64 version\\n        );\\n\\n    /// @notice Get submitter of dataset's metadata\\n    function getDatasetMetadataSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset state\\n    function getDatasetState(\\n        uint64 _datasetId\\n    ) external view returns (DatasetType.State);\\n\\n    ///@notice Check if a dataset has metadata\\n    function hasDatasetMetadata(\\n        string memory _accessMethod\\n    ) external view returns (bool);\\n\\n    /// @notice Checks if metadata fields are valid.\\n    function requireValidDatasetMetadata(\\n        uint64 _datasetId\\n    ) external view returns (bool);\\n\\n    /// @notice Report the dataset has not enough collateral.\\n    function reportFundsNotEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset has enough collateral.\\n    function reportFundsEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset replica has already been submitted.\\n    function reportDatasetReplicaRequirementSubmitted(\\n        uint64 _datasetId\\n    ) external;\\n\\n    /// @notice Report the dataset proof has already been submitted.\\n    function reportDatasetProofSubmitted(uint64 _datasetId) external;\\n\\n    /// @notice Default getter functions for public variables\\n    function datasetsCount() external view returns (uint64);\\n\\n    /// @notice get  roles instance\\n    function roles() external view returns (IRoles);\\n\\n    /// @notice get  governance address\\n    function governanceAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xefbbd972bf238a8ad40d5c4ea06027965d8c0535276939d5ede17cedce19edc1\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsChallenge.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsChallenge\\ninterface IDatasetsChallenge {\\n    ///@notice Submit challenge proof for a dataset\\n    /// Based on merkle proof challenge.\\n    /// random challenge method is used to reduce the amount of data and calculation while ensuring algorithm security.\\n    function submitDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        uint64 _randomSeed,\\n        bytes32[] memory _leaves,\\n        bytes32[][] memory _siblings,\\n        uint32[] memory _paths\\n    ) external;\\n\\n    ///@notice Get dataset challenge proofs\\n    function getDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        address _auditor\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32[] memory,\\n            bytes32[][] memory _siblings,\\n            uint32[] memory _paths\\n        );\\n\\n    ///@notice Get count of dataset challenge proofs\\n    function getDatasetChallengeProofsCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Checking if duplicate verifications of the Dataset\\n    function isDatasetChallengeProofDuplicate(\\n        uint64 _datasetId,\\n        address _auditor,\\n        uint64 _randomSeed\\n    ) external view returns (bool);\\n\\n    /// @notice Get a dataset challenge count\\n    function getChallengeCount(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    /// @notice get  merkle utils\\n    function merkleUtils() external view returns (IMerkleUtils);\\n}\\n\",\"keccak256\":\"0x81be54ccad5287408baa52cf615414ee7649cd7acb78c0057dff37793a95c470\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsProof.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IDatasetsChallenge} from \\\"src/v0.8/interfaces/module/IDatasetsChallenge.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\n\\n/// @title IDatasetsProof\\ninterface IDatasetsProof {\\n    ///@notice Submit proof root for a dataset\\n    function submitDatasetProofRoot(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        string calldata _mappingFilesAccessMethod,\\n        bytes32 _rootHash\\n    ) external;\\n\\n    ///@notice Submit proof for a dataset\\n    function submitDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        bytes32[] memory _leafHashes,\\n        uint64 _leafIndex,\\n        uint64[] memory _leafSizes,\\n        bool _completed\\n    ) external;\\n\\n    ///@notice Submit proof completed for a dataset\\n    function submitDatasetProofCompleted(uint64 _datasetId) external;\\n\\n    /// @notice Append dataset escrow funds. include datacap collateral and dataset auditor calculate fees.\\n    function appendDatasetFunds(\\n        uint64 _datasetId,\\n        uint256 _datacapCollateral,\\n        uint256 _dataAuditorFees\\n    ) external payable;\\n\\n    /// @notice Get dataset need append collateral funds\\n    function getDatasetAppendCollateral(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the dataset requires funding for dataset auditor fees\\n    function getDatasetDataAuditorFeesRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    /// @notice Get an audit fee\\n    function getDatasetDataAuditorFees(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCars(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset proof count\\n    function getDatasetProofCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset proof's submitter\\n    function getDatasetProofSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCarsCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset size\\n    function getDatasetSize(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset minimum conditional\\n    function getDatasetCollateralRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Check if a dataset has a car id\\n    function isDatasetContainsCar(\\n        uint64 _datasetId,\\n        uint64 _id\\n    ) external returns (bool);\\n\\n    ///@notice Check if a dataset has car ids\\n    function isDatasetContainsCars(\\n        uint64 _datasetId,\\n        uint64[] memory _ids\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset has submitter\\n    function isDatasetProofSubmitter(\\n        uint64 _datasetId,\\n        address _submitter\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset proof all completed\\n    function isDatasetProofallCompleted(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (bool);\\n\\n    ///@notice get datasets instance\\n    function datasets() external view returns (IDatasets);\\n\\n    ///@notice get datasetsChallenge instance\\n    function datasetsChallenge() external view returns (IDatasetsChallenge);\\n\\n    ///@notice get datasetsRequirement instance\\n    function datasetsRequirement() external view returns (IDatasetsRequirement);\\n}\\n\",\"keccak256\":\"0xbd9f63bb5ffd68414620a3df8405438dc67e25599a18abcaa766b3c760c47b7a\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsRequirement\\ninterface IDatasetsRequirement {\\n    ///@notice Submit replica requirement for a dataset\\n    ///        Note: submmiter of dataset can submit dataset replica requirement\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    /// @param _dataPreparers The client specified data preparer, which the client can either specify or not, but the parameter cannot be empty.\\n    /// @param _storageProviders The client specified storage provider, which the client can either specify or not, but the parameter cannot be empty.\\n    /// @param _regions The region specified by the client, and the client must specify a region for the replicas.\\n    /// @param _countrys The country specified by the client, and the client must specify a country for the replicas.\\n    /// @param _citys The citys specified by the client, when the country of a replica is duplicated, citys must be specified and cannot be empty.\\n    /// @param _amount The data preparer calculate fees.\\n    function submitDatasetReplicaRequirements(\\n        uint64 _datasetId,\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys,\\n        uint256 _amount\\n    ) external payable;\\n\\n    ///@notice Get dataset replicas count\\n    function getDatasetReplicasCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Get dataset replica requirement\\n    function getDatasetReplicaRequirement(\\n        uint64 _datasetId,\\n        uint64 _index\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            address[] memory,\\n            uint16,\\n            uint16,\\n            uint32[] memory\\n        );\\n\\n    ///@notice Get dataset pre conditional\\n    function getDatasetPreCollateralRequirements(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab86ce9c4ba0dd388c5329edc28380f265310f32ba94e1d45132ac159e66458a\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchings.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchings\\ninterface IMatchings {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _bidSelectionRule The rules for determining the winning bid.\\n    /// @param _biddingDelayBlockCount The number of blocks to delay bidding.\\n    /// @param _biddingPeriodBlockCount The number of blocks for bidding period.\\n    /// @param _storageCompletionPeriodBlocks The number of blocks for storage period.\\n    /// @param _biddingThreshold The threshold for bidding.\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    /// @param _additionalInfo The additional information about the matching.\\n    /// @return The matchingId.\\n    function createMatching(\\n        uint64 _datasetId,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint64 _biddingDelayBlockCount,\\n        uint64 _biddingPeriodBlockCount,\\n        uint64 _storageCompletionPeriodBlocks,\\n        uint256 _biddingThreshold,\\n        uint16 _replicaIndex,\\n        string memory _additionalInfo\\n    ) external returns (uint64);\\n\\n    /// @notice Function for pausing a matching\\n    /// @param _matchingId The matching id.\\n    function pauseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for resuming a paused matching\\n    /// @param _matchingId The matching id.\\n    function resumeMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    function reportPublishMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report canceling a matching\\n    /// @param _matchingId The matching id.\\n    function reportCancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report closing a matching\\n    /// @param _matchingId The matching id.\\n    function reportCloseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report complete with a winner\\n    /// @param _matchingId The matching id.\\n    /// @param _winner The winner of bids of matching.\\n    function reportMatchingHasWinner(\\n        uint64 _matchingId,\\n        address _winner\\n    ) external;\\n\\n    /// @notice Function for report complete a matching without winner\\n    /// @param _matchingId The matching id.\\n    function reportMatchingNoWinner(uint64 _matchingId) external;\\n\\n    /// @notice Function for getting matchings initiator\\n    function getMatchingInitiator(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting the state of a matching\\n    function getMatchingState(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.State);\\n\\n    /// @notice  Function for getting the bid selection rule of a matching\\n    function getBidSelectionRule(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.BidSelectionRule);\\n\\n    /// @notice  Function for getting the bid threshold of a matching\\n    function getBiddingThreshold(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the start height of a matching\\n    function getBiddingStartHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the after pause height of a matching\\n    function getBiddingAfterPauseHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the end height of a matching\\n    function getBiddingEndHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the storage completion period blocks in a matching\\n    function getMatchingStorageCompletionHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the matching creation block number\\n    function getMatchingCreatedHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    // Default getter functions for public variables\\n    function matchingsCount() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x8909f5e067a7c4713ad3c766cef947c91714b205e75e4f251578794946c1473b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsBids.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsBid\\ninterface IMatchingsBids {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsTarget\\n    ) external;\\n\\n    /// @notice  Function for bidding on a matching\\n    function bidding(uint64 _matchingId, uint256 _amount) external payable;\\n\\n    /// @notice  Function for canceling a matching\\n    function cancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for closing a matching and choosing a winner\\n    function closeMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for getting bids in a matching\\n    function getMatchingBids(\\n        uint64 _matchingId\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice  Function for getting bid amount of a bidder in a matching\\n    function getMatchingBidAmount(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingBidsCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting winner of a matching\\n    function getMatchingWinner(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting winners of a matchings\\n    function getMatchingWinners(\\n        uint64[] memory _matchingIds\\n    ) external view returns (address[] memory);\\n\\n    /// @notice  Function for checking if a bidder has a bid in a matching\\n    function hasMatchingBid(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7585d631e867ca5c6538c5d630b364ad984f9d0615d012dce8214f4988433cfa\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsTarget.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsTarget\\ninterface IMatchingsTarget {\\n    /// @notice  Function for init matchings instance.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching target.\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _dataType Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\\n    /// @param _associatedMappingFilesMatchingID The matching ID that associated with mapping files of dataset of _datasetId\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    function createTarget(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice  Function for parse cars from indexes.\\n    /// @param _starts The starts of cars to publish.\\n    /// @param _ends The ends of cars to publish.\\n    /// @return The cars of the indexes.\\n    function parseCars(\\n        uint64[] memory _starts,\\n        uint64[] memory _ends\\n    ) external pure returns (uint64[] memory);\\n\\n    /// @notice  Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id of matching.\\n    /// @param _carsStarts The cars to publish.\\n    /// @param _carsEnds The cars to publish.\\n    /// @param complete If the publish is complete.\\n    function publishMatching(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        uint64[] memory _carsStarts,\\n        uint64[] memory _carsEnds,\\n        bool complete\\n    ) external;\\n\\n    /// @notice Function for getting subsidy amount in a matching\\n    function getMatchingSubsidy(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice  Function for getting the dataset id in a matching\\n    function getMatchingDatasetId(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the index of matching's replica.\\n    function getMatchingReplicaIndex(\\n        uint64 _matchingId\\n    ) external view returns (uint16);\\n\\n    /// @notice get matchings size\\n    function getMatchingSize(uint64 _matchingId) external view returns (uint64);\\n\\n    /// @notice Get the target information of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return datasetID The ID of the associated dataset.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    /// @return size The size of the matching.\\n    /// @return dataType The data type of the matching.\\n    /// @return associatedMappingFilesMatchingID The ID of the associated mapping files matching.\\n    function getMatchingTarget(\\n        uint64 _matchingId\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 datasetID,\\n            uint64[] memory cars,\\n            uint64 size,\\n            DatasetType.DataType dataType,\\n            uint64 associatedMappingFilesMatchingID\\n        );\\n\\n    /// @notice Check if a matching with the given matching ID contains a specific CID.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cid The CID (Content Identifier) to check for.\\n    /// @return True if the matching contains the specified CID, otherwise false.\\n    function isMatchingContainsCar(\\n        uint64 _matchingId,\\n        uint64 _cid\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching with the given matching ID contains multiple CIDs.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cids An array of CIDs (Content Identifiers) to check for.\\n    /// @return True if the matching contains all the specified CIDs, otherwise false.\\n    function isMatchingContainsCars(\\n        uint64 _matchingId,\\n        uint64[] memory _cids\\n    ) external view returns (bool);\\n\\n    /// @notice check is matching targe valid\\n    function isMatchingTargetValid(\\n        uint64 _datasetId,\\n        uint64[] memory _cars,\\n        uint64 _size,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching meets the requirements of Fil+.\\n    function isMatchingTargetMeetsFilPlusRequirements(\\n        uint64 _matchingId,\\n        address candidate\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54e756188dd5529f4d270050e57a20a5b21a6a922a486beb8f35c34b394dc3cd\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/MatchingsBids.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IEscrow} from \\\"src/v0.8/interfaces/core/IEscrow.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\nimport {IDatasetsProof} from \\\"src/v0.8/interfaces/module/IDatasetsProof.sol\\\";\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\n\\n/// shared\\nimport {MatchingsEvents} from \\\"src/v0.8/shared/events/MatchingsEvents.sol\\\";\\nimport {MatchingsModifiers} from \\\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n\\n/// library\\nimport {MatchingBidsLIB} from \\\"src/v0.8/module/matching/library/MatchingBidsLIB.sol\\\";\\nimport \\\"src/v0.8/shared/utils/array/ArrayLIB.sol\\\";\\n\\n/// type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Matchings Base Contract\\n/// @notice This contract serves as the base for managing matchings, their states, and associated actions.\\n/// @dev This contract is intended to be inherited by specific matching-related contracts.\\ncontract MatchingsBids is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IMatchingsBids,\\n    MatchingsModifiers\\n{\\n    /// @notice  Use libraries for different matching functionalities\\n    using MatchingBidsLIB for MatchingType.MatchingBids;\\n    using ArrayAddressLIB for address[];\\n    using ArrayUint64LIB for uint64[];\\n\\n    /// @notice  Declare private variables\\n    mapping(uint64 => MatchingType.MatchingBids) private matchingBids;\\n\\n    address private governanceAddress;\\n    IRoles private roles;\\n    IEscrow public escrow;\\n    IFilplus private filplus;\\n    ICarstore private carstore;\\n    IDatasets public datasets;\\n    IDatasetsRequirement public datasetsRequirement;\\n    IDatasetsProof public datasetsProof;\\n    IMatchings public matchings;\\n    IMatchingsTarget public matchingsTarget;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    // solhint-disable-next-line\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _filplus,\\n        address _carstore,\\n        address _datasets,\\n        address _datasetsRequirement,\\n        address _datasetsProof,\\n        address _escrow\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        escrow = IEscrow(_escrow);\\n        filplus = IFilplus(_filplus);\\n        carstore = ICarstore(_carstore);\\n        datasets = IDatasets(_datasets);\\n        datasetsRequirement = IDatasetsRequirement(_datasetsRequirement);\\n        datasetsProof = IDatasetsProof(_datasetsProof);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsTarget\\n    ) external onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) {\\n        matchings = IMatchings(_matchings);\\n        matchingsTarget = IMatchingsTarget(_matchingsTarget);\\n    }\\n\\n    /// @notice Function for bidding on a matching\\n    function bidding(\\n        uint64 _matchingId,\\n        uint256 _amount\\n    )\\n        external\\n        payable\\n        onlyRole(roles, RolesType.STORAGE_PROVIDER)\\n        onlyMatchingState(matchings, _matchingId, MatchingType.State.InProgress)\\n    {\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        MatchingType.BidSelectionRule bidSelectionRule = matchings\\n            .getBidSelectionRule(_matchingId);\\n\\n        _processPaymentEscrow(_matchingId, _amount, bidSelectionRule);\\n\\n        bids._matchingBidding(\\n            bidSelectionRule,\\n            matchings.getBiddingThreshold(_matchingId),\\n            matchings.getBiddingAfterPauseHeight(_matchingId),\\n            matchings.getBiddingEndHeight(_matchingId),\\n            _amount\\n        );\\n        (, address[] memory sp, , , ) = datasetsRequirement\\n            .getDatasetReplicaRequirement(\\n                matchingsTarget.getMatchingDatasetId(_matchingId),\\n                matchingsTarget.getMatchingReplicaIndex(_matchingId)\\n            );\\n\\n        if (sp.length > 0) {\\n            require(sp.isContains(msg.sender), \\\"Invalid SP submitter\\\");\\n        }\\n\\n        emit MatchingsEvents.MatchingBidPlaced(\\n            _matchingId,\\n            msg.sender,\\n            _amount\\n        );\\n        if (\\n            bidSelectionRule ==\\n            MatchingType.BidSelectionRule.ImmediateAtLeast ||\\n            bidSelectionRule == MatchingType.BidSelectionRule.ImmediateAtMost\\n        ) {\\n            closeMatching(_matchingId);\\n        }\\n    }\\n\\n    /// @dev Process payment fund escrow\\n    function _processPaymentEscrow(\\n        uint64 _matchingId,\\n        uint256 _amount,\\n        MatchingType.BidSelectionRule _bidSelectionRule\\n    ) internal {\\n        // Payment only when HighestBid\\n        if (_bidSelectionRule == MatchingType.BidSelectionRule.HighestBid) {\\n            uint256 hasBid = escrow.getOwnerLock(\\n                EscrowType.Type.DataPrepareFeeByProvider,\\n                msg.sender,\\n                _matchingId\\n            );\\n            require(_amount > hasBid, \\\"Invalid amount\\\");\\n\\n            // Payment amount to escrow contract\\n            escrow.payment{value: msg.value}(\\n                EscrowType.Type.DataPrepareFeeByProvider,\\n                msg.sender,\\n                _matchingId,\\n                _amount - hasBid\\n            );\\n        }\\n    }\\n\\n    ///@dev update cars info to carStore after matching failed\\n    function _afterMatchingFailed(uint64 _matchingId) internal {\\n        uint64[] memory cars = matchingsTarget.getMatchingCars(_matchingId);\\n        for (uint64 i; i < cars.length; i++) {\\n            carstore.reportCarReplicaMatchingState(cars[i], _matchingId, false);\\n        }\\n    }\\n\\n    ///@dev update cars info to carStore before matching complete\\n    function _beforeMatchingCompleted(uint64 _matchingId) internal {\\n        uint64[] memory cars = matchingsTarget.getMatchingCars(_matchingId);\\n        for (uint64 i; i < cars.length; i++) {\\n            carstore.reportCarReplicaMatchingState(cars[i], _matchingId, true);\\n        }\\n    }\\n\\n    /// @notice Function for canceling a matching\\n    /// @param _matchingId The ID of the matching.\\n    function cancelMatching(\\n        uint64 _matchingId\\n    ) external onlyMatchingInitiator(matchings, _matchingId) {\\n        _afterMatchingFailed(_matchingId);\\n        try matchings.reportCancelMatching(_matchingId) {} catch Error(\\n            string memory err\\n        ) {\\n            revert(err);\\n        } catch {\\n            revert(\\\"report cancel matching failed\\\");\\n        }\\n    }\\n\\n    /// @notice Function for closing a matching and choosing a winner\\n    function closeMatching(uint64 _matchingId) public {\\n        if (\\n            matchings.getMatchingState(_matchingId) ==\\n            MatchingType.State.InProgress\\n        ) {\\n            try matchings.reportCloseMatching(_matchingId) {} catch {\\n                revert(\\\"close matching failed\\\");\\n            }\\n        }\\n\\n        require(\\n            matchings.getMatchingState(_matchingId) ==\\n                MatchingType.State.Closed,\\n            \\\"Invalid state\\\"\\n        );\\n\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        address winner = bids._chooseMatchingWinner(\\n            matchings.getBidSelectionRule(_matchingId),\\n            matchings.getBiddingThreshold(_matchingId),\\n            matchings.getBiddingAfterPauseHeight(_matchingId),\\n            matchings.getBiddingEndHeight(_matchingId)\\n        );\\n\\n        if (winner != address(0)) {\\n            if (\\n                !matchingsTarget.isMatchingTargetMeetsFilPlusRequirements(\\n                    _matchingId,\\n                    winner\\n                )\\n            ) {\\n                bids._setMatchingBidderNotComplyFilplusRule(winner);\\n                revert Errors\\n                    .NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n                        _matchingId,\\n                        winner\\n                    );\\n            }\\n\\n            _beforeMatchingCompleted(_matchingId);\\n            bids.winner = winner;\\n\\n            escrow.emitPaymentUpdate(\\n                EscrowType.Type.DataPrepareFeeByProvider,\\n                winner,\\n                _matchingId,\\n                matchings.getMatchingInitiator(_matchingId),\\n                EscrowType.PaymentEvent.SyncPaymentBeneficiary\\n            );\\n\\n            matchings.reportMatchingHasWinner(_matchingId, winner);\\n        } else {\\n            _afterMatchingFailed(_matchingId);\\n            matchings.reportMatchingNoWinner(_matchingId);\\n        }\\n    }\\n\\n    /// @notice Function for getting bids in a matching\\n    function getMatchingBids(\\n        uint64 _matchingId\\n    ) public view returns (address[] memory, uint256[] memory) {\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        return bids._getMatchingBids();\\n    }\\n\\n    /// @notice Function for getting bid amount of a bidder in a matching\\n    function getMatchingBidAmount(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) public view returns (uint256) {\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        return bids._getMatchingBidAmount(_bidder);\\n    }\\n\\n    /// @notice Function for getting the count of bids in a matching\\n    function getMatchingBidsCount(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        return bids._getMatchingBidsCount();\\n    }\\n\\n    /// @notice Function for getting winner of a matching\\n    function getMatchingWinner(\\n        uint64 _matchingId\\n    ) public view returns (address) {\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        return bids.winner;\\n    }\\n\\n    /// @notice Function for getting winners of a matchings\\n    function getMatchingWinners(\\n        uint64[] memory _matchingIds\\n    ) public view returns (address[] memory) {\\n        (uint256 count, uint64[] memory matchingIds) = _matchingIds\\n            .removeElement(0);\\n        address[] memory winners = new address[](count);\\n        for (uint64 i = 0; i < count; i++) {\\n            winners[i] = getMatchingWinner(matchingIds[i]);\\n        }\\n        return winners;\\n    }\\n\\n    /// @notice Function for checking if a bidder has a bid in a matching\\n    function hasMatchingBid(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) public view returns (bool) {\\n        MatchingType.MatchingBids storage bids = matchingBids[_matchingId];\\n        return bids._hasMatchingBid(_bidder);\\n    }\\n}\\n\",\"keccak256\":\"0x3eac84d64c6f5b73983f567008f977d9cd7bcf86d73a762400804d7f9fb5ef90\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/library/MatchingBidsLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {SendAPI} from \\\"@zondax/filecoin-solidity/contracts/v0.8/SendAPI.sol\\\";\\nimport {FilAddresses} from \\\"@zondax/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\\\";\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\nimport {IEscrow} from \\\"src/v0.8/interfaces/core/IEscrow.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\nimport {MatchingStateMachineLIB} from \\\"src/v0.8/module/matching/library/MatchingStateMachineLIB.sol\\\";\\n\\n/// @title Matching Bids Library\\n/// @notice This library provides functions for managing bids in matchings.\\nlibrary MatchingBidsLIB {\\n    using MatchingStateMachineLIB for MatchingType.Matching;\\n\\n    /// @notice Add a bid to the matching.\\n    /// @dev This function adds a bid to the matching and updates the bids count.\\n    /// @param self The bids in the matching.\\n    /// @param _amount The bid amount.\\n    function _matchingBidding(\\n        MatchingType.MatchingBids storage self,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint256 _biddingThreshold,\\n        uint64 _biddingAfterPauseHeight,\\n        uint64 _biddingEndHeight,\\n        uint256 _amount\\n    ) internal {\\n        if (\\n            _bidSelectionRule == MatchingType.BidSelectionRule.HighestBid ||\\n            _bidSelectionRule == MatchingType.BidSelectionRule.ImmediateAtLeast\\n        ) {\\n            require(_amount >= _biddingThreshold, \\\"Invalid amount\\\");\\n        }\\n        if (\\n            _bidSelectionRule == MatchingType.BidSelectionRule.LowestBid ||\\n            _bidSelectionRule == MatchingType.BidSelectionRule.ImmediateAtMost\\n        ) {\\n            require(_amount <= _biddingThreshold, \\\"Invalid amount\\\");\\n        }\\n        require(\\n            block.number >= _biddingAfterPauseHeight,\\n            \\\"Matching: Bidding is not start\\\"\\n        );\\n        require(block.number < _biddingEndHeight, \\\"Matching: Bidding is end\\\");\\n        if (_hasMatchingBid(self, msg.sender)) {\\n            if (_bidSelectionRule == MatchingType.BidSelectionRule.HighestBid) {\\n                require(\\n                    _amount > _getMatchingBidAmount(self, msg.sender),\\n                    \\\"Invalid amount\\\"\\n                );\\n            }\\n            if (_bidSelectionRule == MatchingType.BidSelectionRule.LowestBid) {\\n                require(\\n                    _amount < _getMatchingBidAmount(self, msg.sender),\\n                    \\\"Invalid amount\\\"\\n                );\\n            }\\n\\n            _updateMatchingBidAmount(self, msg.sender, _amount);\\n        } else {\\n            MatchingType.Bid memory _bid = MatchingType.Bid(\\n                msg.sender,\\n                _amount,\\n                true\\n            );\\n            self.bids.push(_bid);\\n        }\\n    }\\n\\n    /// @notice justify is has a winner for a closed matching.\\n    /// @dev This internal function is used to choose a winner for a closed matching based on the specified rule.\\n    function _chooseMatchingWinner(\\n        MatchingType.MatchingBids storage self,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint256 _biddingThreshold,\\n        uint64 _biddingAfterPauseHeight,\\n        uint64 _biddingEndHeight\\n    ) internal view returns (address) {\\n        if (\\n            _bidSelectionRule ==\\n            MatchingType.BidSelectionRule.ImmediateAtLeast ||\\n            _bidSelectionRule == MatchingType.BidSelectionRule.ImmediateAtMost\\n        ) {\\n            require(\\n                block.number >= _biddingAfterPauseHeight,\\n                \\\"Bidding too early\\\"\\n            );\\n        } else {\\n            require(\\n                block.number >= _biddingEndHeight,\\n                \\\"Bidding period has not ended yet\\\"\\n            );\\n        }\\n\\n        uint256 winningBid = _biddingThreshold;\\n        address winner = address(0);\\n        for (uint64 i = 0; i < self.bids.length; i++) {\\n            if (\\n                _bidSelectionRule == MatchingType.BidSelectionRule.HighestBid ||\\n                _bidSelectionRule ==\\n                MatchingType.BidSelectionRule.ImmediateAtLeast\\n            ) {\\n                if (\\n                    self.bids[i].bid > winningBid &&\\n                    self.bids[i].complyFilplusRule\\n                ) {\\n                    winningBid = self.bids[i].bid;\\n                    winner = self.bids[i].bidder;\\n                }\\n            } else if (\\n                _bidSelectionRule == MatchingType.BidSelectionRule.LowestBid ||\\n                _bidSelectionRule ==\\n                MatchingType.BidSelectionRule.ImmediateAtMost\\n            ) {\\n                if (\\n                    self.bids[i].bid < winningBid &&\\n                    self.bids[i].complyFilplusRule\\n                ) {\\n                    winningBid = self.bids[i].bid;\\n                    winner = self.bids[i].bidder;\\n                }\\n            }\\n        }\\n\\n        return winner;\\n    }\\n\\n    /// @notice Set the bidder not comply fileplus in the matching.\\n    /// @dev This function set the comply fileplus to false of a bidder.\\n    /// @param self The bids in the matching.\\n    /// @param _bidder The address of the bidder.\\n    function _setMatchingBidderNotComplyFilplusRule(\\n        MatchingType.MatchingBids storage self,\\n        address _bidder\\n    ) internal {\\n        for (uint64 i = uint64(self.bids.length - 1); i >= 0; i--) {\\n            if (_bidder == self.bids[i].bidder) {\\n                self.bids[i].complyFilplusRule = false;\\n            }\\n        }\\n    }\\n\\n    /// @notice Update the bid amount of a bidder in the matching.\\n    /// @dev This function retrieves the bid amount of a bidder.\\n    /// @param self The bids in the matching.\\n    /// @param _bidder The address of the bidder.\\n    /// @param _amount The bid amount.\\n    function _updateMatchingBidAmount(\\n        MatchingType.MatchingBids storage self,\\n        address _bidder,\\n        uint256 _amount\\n    ) internal {\\n        for (uint64 i = uint64(self.bids.length - 1); i >= 0; i--) {\\n            if (_bidder == self.bids[i].bidder) {\\n                self.bids[i].bid = _amount;\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the bid amount of a bidder in the matching.\\n    /// @dev This function retrieves the bid amount of a bidder.\\n    /// @param self The bids in the matching.\\n    /// @param _bidder The address of the bidder.\\n    /// @return The bid amount.\\n    function _getMatchingBidAmount(\\n        MatchingType.MatchingBids storage self,\\n        address _bidder\\n    ) internal view returns (uint256) {\\n        for (uint64 i = uint64(self.bids.length - 1); i >= 0; i--) {\\n            if (_bidder == self.bids[i].bidder) {\\n                return self.bids[i].bid;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Get the bids.\\n    function _getMatchingBids(\\n        MatchingType.MatchingBids storage self\\n    ) internal view returns (address[] memory, uint256[] memory) {\\n        address[] memory bidders = new address[](self.bids.length);\\n        uint256[] memory amounts = new uint256[](self.bids.length);\\n        for (uint64 i = 0; i < self.bids.length; i++) {\\n            bidders[i] = self.bids[i].bidder;\\n            amounts[i] = self.bids[i].bid;\\n        }\\n        return (bidders, amounts);\\n    }\\n\\n    /// @notice Get the total number of bids in the matching.\\n    /// @dev This function retrieves the total number of bids in the matching.\\n    /// @param self The bids in the matching.\\n    /// @return The total number of bids.\\n    function _getMatchingBidsCount(\\n        MatchingType.MatchingBids storage self\\n    ) internal view returns (uint64) {\\n        return uint64(self.bids.length);\\n    }\\n\\n    /// @notice Check if a bidder has placed a bid in the matching.\\n    /// @dev This function checks if a bidder has placed a bid.\\n    /// @param self The bids in the matching.\\n    /// @param _bidder The address of the bidder.\\n    /// @return True if the bidder has placed a bid, otherwise false.\\n    function _hasMatchingBid(\\n        MatchingType.MatchingBids storage self,\\n        address _bidder\\n    ) internal view returns (bool) {\\n        for (uint64 i = 0; i < self.bids.length; i++) {\\n            if (_bidder == self.bids[i].bidder) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xaa0731d0a36bcb939aa83ebf590a3431e147810e8fab10cfbebb3f6d08714c21\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/library/MatchingStateMachineLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title Matching Library\\n/// @notice This library provides functions for managing matchings and their states.\\n/// @dev This library is used to manage the lifecycle and states of matchings.\\nlibrary MatchingStateMachineLIB {\\n    /// @notice Post an event to update the matching's state.\\n    /// @dev This internal function is used to update the matching's state based on the event.\\n    /// @param _event The event that triggers the state update.\\n    function _emitMatchingEvent(\\n        MatchingType.Matching storage self,\\n        MatchingType.Event _event\\n    ) internal {\\n        MatchingType.State currentState = self.state;\\n        MatchingType.State newState;\\n\\n        // Apply the state transition based on the event\\n        if (_event == MatchingType.Event.Publish) {\\n            if (currentState == MatchingType.State.None) {\\n                newState = MatchingType.State.Published;\\n            }\\n        } else if (_event == MatchingType.Event.FilPlusCheckSuccessed) {\\n            if (currentState == MatchingType.State.Published) {\\n                newState = MatchingType.State.InProgress;\\n            }\\n        } else if (_event == MatchingType.Event.FilPlusCheckFailed) {\\n            if (currentState == MatchingType.State.Published) {\\n                newState = MatchingType.State.Failed;\\n            }\\n        } else if (_event == MatchingType.Event.Pause) {\\n            if (currentState == MatchingType.State.InProgress) {\\n                newState = MatchingType.State.Paused;\\n            }\\n        } else if (_event == MatchingType.Event.Resume) {\\n            if (currentState == MatchingType.State.Paused) {\\n                newState = MatchingType.State.InProgress;\\n            }\\n        } else if (_event == MatchingType.Event.PauseExpired) {\\n            if (currentState == MatchingType.State.Paused) {\\n                newState = MatchingType.State.Failed;\\n            }\\n        } else if (_event == MatchingType.Event.Cancel) {\\n            if (\\n                currentState == MatchingType.State.Published ||\\n                currentState == MatchingType.State.Paused ||\\n                currentState == MatchingType.State.InProgress\\n            ) {\\n                newState = MatchingType.State.Cancelled;\\n            }\\n        } else if (_event == MatchingType.Event.Close) {\\n            if (currentState == MatchingType.State.InProgress) {\\n                newState = MatchingType.State.Closed;\\n            }\\n        } else if (_event == MatchingType.Event.HasWinner) {\\n            if (currentState == MatchingType.State.Closed) {\\n                newState = MatchingType.State.Completed;\\n            }\\n        } else if (_event == MatchingType.Event.NoWinner) {\\n            if (currentState == MatchingType.State.Closed) {\\n                newState = MatchingType.State.Failed;\\n            }\\n        }\\n\\n        // Update the state if newState is not None (i.e., a valid transition)\\n        if (newState != MatchingType.State.None) {\\n            self.state = newState;\\n        }\\n    }\\n\\n    /// @notice Get the current state of a matching.\\n    /// @dev This internal function is used to retrieve the current state of a matching.\\n    function _getMatchingState(\\n        MatchingType.Matching storage self\\n    ) internal view returns (MatchingType.State) {\\n        return self.state;\\n    }\\n}\\n\",\"keccak256\":\"0xdd19ca4883b6d16c184aef4f1c304b1f75d8de3ac46ba8bf05c929e63d3a7294\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n\\n    /// @notice escrow errors\\n    error ExceedValidPaymentAmount(uint256 total, uint256 payment);\\n    error ExceedValidTransferAmount(uint256 total, uint256 transfer);\\n    error ExceedValidRefundAmount(uint256 total, uint256 refund);\\n    error ExceedValidBurnAmount(uint256 total, uint256 burn);\\n    error ExceedValidCollateralAmount(uint256 total, uint256 collateral);\\n    error BeneficiaryAlreadyExist(address);\\n    error BeneficiaryIsInvalid(address);\\n    error OnlySpecifyTypeAllowedTransfer();\\n    error SubAccountAlreadyExist(address);\\n    error NotRefundableAmount();\\n}\\n\",\"keccak256\":\"0x97305fe742822eef7e1dba0b8146f91dae07189f14bbdb8c73a5fcb115eff302\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/MatchingsEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary MatchingsEvents {\\n    /// @notice Declare events for external monitoring\\n\\n    // Event emitted when a matching is published\\n    event MatchingPublished(\\n        uint64 indexed matchingId,\\n        address indexed initiator\\n    );\\n\\n    // Event emitted when a matching is paused\\n    event MatchingPaused(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching's pause expires\\n    event MatchingPauseExpired(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching is resumed\\n    event MatchingResumed(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching is cancelled\\n    event MatchingCancelled(uint64 indexed _matchingId);\\n\\n    event MatchingClosed(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching has a winner\\n    event MatchingHasWinner(\\n        uint64 indexed _matchingId,\\n        address indexed _winner\\n    );\\n\\n    // Event emitted when a matching has no winner\\n    event MatchingNoWinner(uint64 indexed _matchingId);\\n\\n    // Event emitted when a bid is placed in a matching\\n    event MatchingBidPlaced(\\n        uint64 indexed _matchingId,\\n        address _bidder,\\n        uint256 _amount\\n    );\\n}\\n\",\"keccak256\":\"0xcbdfdd78049f4b0fefd1f0f64c3b83fa44b17036c6f357617bad8aa1c9942875\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract MatchingsModifiers is CarstoreModifiers {\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingInitiator(IMatchings _matchings, uint64 _matchingId) {\\n        address initiator = _matchings.getMatchingInitiator(_matchingId);\\n        if (initiator != msg.sender) {\\n            revert Errors.NotMatchingInitiator(\\n                _matchingId,\\n                initiator,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access based on matching state\\n    modifier onlyMatchingState(\\n        IMatchings _matchings,\\n        uint64 _matchingId,\\n        MatchingType.State _state\\n    ) {\\n        MatchingType.State matchingState = _matchings.getMatchingState(\\n            _matchingId\\n        );\\n        if (matchingState != _state) {\\n            revert Errors.InvalidMatchingState(\\n                _matchingId,\\n                _state,\\n                matchingState\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsTarget(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsTarget) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsBids(\\n        IMatchingsBids _matchingsBids,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsBids) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingContainsCar(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) {\\n        if (!_matchingsTarget.isMatchingContainsCar(_matchingId, _id)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2aaf11a9100face83692e5b9d6ab8b0440d05e4baa5a795ba6ac4a3c1f09d387\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/utils/array/ArrayLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary ArrayUint16LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint16[] memory result = new uint16[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint16[] memory _elements,\\n        uint16 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint16[] memory updatedArray = new uint16[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint16[] memory result = new uint16[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint16[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint16[] memory _elements,\\n        uint16 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint32LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint32[] memory result = new uint32[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint32[] memory _elements,\\n        uint32 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint32[] memory updatedArray = new uint32[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint32[] memory result = new uint32[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint32[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint32[] memory _elements,\\n        uint32 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint64LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint64[] memory result = new uint64[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint64[] memory _elements,\\n        uint64 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint64[] memory updatedArray = new uint64[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint64[] memory result = new uint64[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint64[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint64[] memory _elements,\\n        uint64 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayAddressLIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256, address[] memory) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        address[] memory result = new address[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        address[] memory _elements,\\n        address _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256, address[] memory) {\\n        address[] memory updatedArray = new address[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        address[] memory result = new address[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        address[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        address[] memory _elements,\\n        address target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xa7e0795c087c5270c3af404ed45be0762fed1a09eea5ee547bd10fb76708d98b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        FundsNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        uint64 usedSizeInBytes; // Already matching size.\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x37374caed842596d4f4fad36b66805caa76c4cb2659170c7bd42f202f2ff9376\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/EscrowType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title EscrowType Library\\n/// @notice This library defines escrow type within the system.\\nlibrary EscrowType {\\n    /// @notice Enum escrow object types.\\n    enum Type {\\n        DatacapCollateral, // The storage client collateral.\\n        DatacapChunkCollateral, // The storage provider collateral.\\n        DataAuditCollateral, // The dataset auditor collateral, for dispute\\n        DataPrepareCollateral, // The data preparer collateral,for dispute\\n        DatasetAuditFee, // The dataset auditor calculate fees.\\n        TotalDataPrepareFeeByClient, // The data preparer calculate fees of dataset paid by storage client.\\n        DataPrepareFeeByClient, // The data preparer calculate fees of matching paid by storage client.\\n        DataPrepareFeeByProvider // The data preparer calculate fees paid by storage provider.\\n    }\\n\\n    /// @notice Enum representing the events related to collateral management.Triggered by business contract\\n    enum CollateralEvent {\\n        SyncBurn, // Escrow synchronize collateral burn amount.\\n        SyncCollateral // Escrow synchronize collateral amount.\\n    }\\n\\n    /// @notice Enum representing the events related to payment management.Triggered by business contract\\n    enum PaymentEvent {\\n        SyncPaymentLock, // Escrow synchronize allow payment amount.\\n        SyncPaymentBeneficiary, // Escrow synchronize payment beneficiaries list.\\n        AddPaymentSubAccount // Escrow synchronize sub payment account.\\n    }\\n\\n    /// @notice Struct the beneficiary of escrow\\n    struct Fund {\\n        uint256 total; // Total amount in fund account\\n        uint256 lock; // Lock amount in fund account for payment beneficiaries\\n        uint256 collateral; // Collateral amount in fund account for withdraw and punishment\\n        uint256 burned; // burned amount in fund account\\n        uint64 createdBlockNumber; // Fund account created block number\\n    }\\n\\n    /// @notice Struct the escrow\\n    struct Escrow {\\n        Fund owner; // fund owner\\n        address[] beneficiariesList; // Retrieves beneficiaries list\\n        mapping(address beneficiary => Fund) beneficiaries; // Beneficiaries information\\n    }\\n}\\n\",\"keccak256\":\"0x277d1c16e2b2da9ab128fb551c203359faf8817e57ea5192d142669c2029e6aa\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n        uint256 subsidy; // subsidy amount\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0xaada4a7a4f23284bffe0ca9cf885002d6a7589d3751e44dde5b20e439b7535dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051613c2461004c60003960008181610b6701528181610ba701528181610c2f01528181610c6f0152610dd10152613c246000f3fe6080604052600436106100fa5760003560e01c8063050507a9146100ff57806306e726c01461012157806312c9618c146101585780632620333e146101785780633659cfe6146101a55780634f1ef286146101c55780634fc780e8146101d857806352d1902d1461020557806363976407146102275780636ad81d6214610254578063840febd9146102745780638a29e2de1461029457806396fd77b0146102b45780639a917558146102c75780639aa023d1146102f45780639cfa7d5514610314578063a2cda22e14610334578063aaf10f4214610361578063ab2d10f714610376578063bbf8367414610396578063e2fdcc17146103b6575b600080fd5b34801561010b57600080fd5b5061011f61011a3660046128f3565b6103d6565b005b34801561012d57600080fd5b5061014161013c3660046128f3565b6109bb565b60405161014f9291906129e7565b60405180910390f35b34801561016457600080fd5b5061011f6101733660046128f3565b6109eb565b34801561018457600080fd5b50606f54610198906001600160a01b031681565b60405161014f9190612a41565b3480156101b157600080fd5b5061011f6101c0366004612a63565b610b5d565b61011f6101d3366004612b89565b610c25565b3480156101e457600080fd5b506101f86101f3366004612c82565b610cde565b60405161014f9190612cbc565b34801561021157600080fd5b5061021a610dc4565b60405161014f9190612ccd565b34801561023357600080fd5b506102476102423660046128f3565b610e22565b60405161014f9190612cdb565b34801561026057600080fd5b50606d54610198906001600160a01b031681565b34801561028057600080fd5b50606e54610198906001600160a01b031681565b3480156102a057600080fd5b5061011f6102af366004612ce9565b610e49565b61011f6102c2366004612dad565b610fa1565b3480156102d357600080fd5b506102e76102e2366004612de0565b611587565b60405161014f9190612e1b565b34801561030057600080fd5b50606c54610198906001600160a01b031681565b34801561032057600080fd5b5061021a61032f366004612de0565b6115b3565b34801561034057600080fd5b5061035461034f3660046128f3565b6115d5565b60405161014f9190612e32565b34801561036d57600080fd5b506102476115f7565b34801561038257600080fd5b50606b54610198906001600160a01b031681565b3480156103a257600080fd5b5061011f6103b1366004612e40565b611606565b3480156103c257600080fd5b50606854610198906001600160a01b031681565b606e54604051631a569da560e11b81526002916001600160a01b0316906334ad3b4a90610407908590600401612e32565b602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190612e90565b600781111561045957610459612e62565b036104de57606e54604051636bb0367b60e11b81526001600160a01b039091169063d7606cf69061048e908490600401612e32565b600060405180830381600087803b1580156104a857600080fd5b505af19250505080156104b9575060015b6104de5760405162461bcd60e51b81526004016104d590612ee0565b60405180910390fd5b606e54604051631a569da560e11b81526004916001600160a01b0316906334ad3b4a9061050e9085908501612e32565b602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f9190612e90565b600781111561056057610560612e62565b1461057d5760405162461bcd60e51b81526004016104d590612f14565b6001600160401b038116600090815260656020526040808220606e54915163b6c9178360e01b815290929161076a916001600160a01b039091169063b6c91783906105cc908790600401612e32565b602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190612f3c565b606e546040516302de966b60e41b81526001600160a01b0390911690632de966b09061063d908890600401612e32565b602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190612f68565b606e54604051639e5a53e560e01b81526001600160a01b0390911690639e5a53e5906106ae908990600401612e32565b602060405180830381865afa1580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef9190612f94565b606e54604051639f6c8a4760e01b81526001600160a01b0390911690639f6c8a479061071f908a90600401612e32565b602060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190612f94565b86939291906116ca565b90506001600160a01b0381161561097d57606f546040516383587b9d60e01b81526001600160a01b03909116906383587b9d906107ad9086908590600401612fb5565b602060405180830381865afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190612fe3565b610819576107fc82826119c3565b8281604051632fa0b95d60e01b81526004016104d5929190612fb5565b61082283611a6e565b6001820180546001600160a01b0319166001600160a01b0383811691909117909155606854606e5460405163e19edda160e01b81529183169263d8ea185e926007928692899291169063e19edda19061087f908490600401612e32565b602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c0919061300f565b60016040518663ffffffff1660e01b81526004016108e295949392919061308c565b600060405180830381600087803b1580156108fc57600080fd5b505af1158015610910573d6000803e3d6000fd5b5050606e54604051630731aebf60e11b81526001600160a01b039091169250630e635d7e91506109469086908590600401612fb5565b600060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b50505050505050565b61098683611b9b565b606e54604051639247e80f60e01b81526001600160a01b0390911690639247e80f90610946908690600401612e32565b505050565b6001600160401b038116600090815260656020526040902060609081906109e181611cc8565b9250925050915091565b606e5460405163e19edda160e01b81526001600160a01b03909116908290600090839063e19edda190610a22908590600401612e32565b602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a63919061300f565b90506001600160a01b0381163314610a945781813360405163bb5a686560e01b81526004016104d5939291906130ce565b610a9d84611b9b565b606e54604051632c7e9d9b60e21b81526001600160a01b039091169063b1fa766c90610acd908790600401612e32565b600060405180830381600087803b158015610ae757600080fd5b505af1925050508015610af8575060015b610b5757610b046130f6565b806308c379a003610b3d5750610b18613111565b80610b235750610b3f565b8060405162461bcd60e51b81526004016104d591906131ee565b505b60405162461bcd60e51b81526004016104d590613233565b50505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ba55760405162461bcd60e51b81526004016104d59061327d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bd7611e5e565b6001600160a01b031614610bfd5760405162461bcd60e51b81526004016104d5906132c4565b610c0681611e7a565b60408051600080825260208201909252610c2291839190611f0e565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c6d5760405162461bcd60e51b81526004016104d59061327d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c9f611e5e565b6001600160a01b031614610cc55760405162461bcd60e51b81526004016104d5906132c4565b610cce82611e7a565b610cda82826001611f0e565b5050565b6060600080610ced8482611ff0565b915091506000826001600160401b03811115610d0b57610d0b612a8e565b604051908082528060200260200182016040528015610d34578160200160208202803683370190505b50905060005b83816001600160401b03161015610dbb57610d7683826001600160401b031681518110610d6957610d696132d4565b6020026020010151610e22565b82826001600160401b031681518110610d9157610d916132d4565b6001600160a01b039092166020928302919091019091015280610db381613300565b915050610d3a565b50949350505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e0e5760405162461bcd60e51b81526004016104d59061337f565b50600080516020613ba88339815191525b90565b6001600160401b03166000908152606560205260409020600101546001600160a01b031690565b600054610100900460ff1615808015610e695750600054600160ff909116105b80610e8a5750610e7830612193565b158015610e8a575060005460ff166001145b610ea65760405162461bcd60e51b81526004016104d5906133da565b6000805460ff191660011790558015610ec9576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038c8116919091179092556067805482168b84161790556068805482168584161790556069805482168a8416179055606a80548216898416179055606b80548216888416179055606c80548216878416179055606d8054909116918516919091179055610f4b6121a2565b8015610f96576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610f8d906001906133ff565b60405180910390a15b505050505050505050565b606754604051632474521560e21b81526001600160a01b03909116907fbef3bd11e82b4054dbbbfa191ade24a0f7f56837be03eaafd87d83dd8673ed669082906391d1485490610ff7908490339060040161340d565b602060405180830381865afa158015611014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110389190612fe3565b6110545760405162461bcd60e51b81526004016104d59061344c565b606e54604051631a569da560e11b81526001600160a01b0390911690859060029060009084906334ad3b4a9061108e908690600401612e32565b602060405180830381865afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190612e90565b90508160078111156110e3576110e3612e62565b8160078111156110f5576110f5612e62565b14611119578282826040516399df707960e01b81526004016104d59392919061345c565b6001600160401b038816600090815260656020526040808220606e54915163b6c9178360e01b81529092916001600160a01b03169063b6c9178390611162908d90600401612e32565b602060405180830381865afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a39190612f3c565b90506111b08a8a836121cb565b606e546040516302de966b60e41b81526113369183916001600160a01b0390911690632de966b0906111e6908f90600401612e32565b602060405180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190612f68565b606e60009054906101000a90046001600160a01b03166001600160a01b0316639e5a53e58e6040518263ffffffff1660e01b81526004016112689190612e32565b602060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a99190612f94565b606e60009054906101000a90046001600160a01b03166001600160a01b0316639f6c8a478f6040518263ffffffff1660e01b81526004016112ea9190612e32565b602060405180830381865afa158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b9190612f94565b86939291908e6122e8565b6000606c60009054906101000a90046001600160a01b03166001600160a01b031663146846a8606f60009054906101000a90046001600160a01b03166001600160a01b03166340f7f10b8e6040518263ffffffff1660e01b815260040161139d9190612e32565b602060405180830381865afa1580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190612f94565b606f60009054906101000a90046001600160a01b03166001600160a01b031663075717218f6040518263ffffffff1660e01b815260040161141f9190612e32565b602060405180830381865afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114609190613499565b6040518363ffffffff1660e01b815260040161147d9291906134cd565b600060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114c291908101906135e9565b5050509150506000815111156114f8576114dc8133612500565b6114f85760405162461bcd60e51b81526004016104d5906136d9565b8a6001600160401b03167f2d59e8efadb0626949fe9770419e2db68557cae79e87826fea8478c843b2f066338c6040516115339291906136e9565b60405180910390a2600282600381111561154f5761154f612e62565b148061156c5750600382600381111561156a5761156a612e62565b145b1561157a5761157a8b6103d6565b5050505050505050505050565b6001600160401b03821660009081526065602052604081206115a98184612565565b9150505b92915050565b6001600160401b03821660009081526065602052604081206115a981846125d9565b6001600160401b038116600090815260656020526040812080545b9392505050565b6000611601611e5e565b905090565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d148549061163d908490339060040161340d565b602060405180830381865afa15801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e9190612fe3565b61169a5760405162461bcd60e51b81526004016104d59061344c565b5050606e80546001600160a01b039384166001600160a01b031991821617909155606f8054929093169116179055565b600060028560038111156116e0576116e0612e62565b14806116fd575060038560038111156116fb576116fb612e62565b145b1561173057826001600160401b031643101561172b5760405162461bcd60e51b81526004016104d59061372c565b611759565b816001600160401b03164310156117595760405162461bcd60e51b81526004016104d59061376e565b836000805b88546001600160401b03821610156119b557600088600381111561178457611784612e62565b14806117a15750600288600381111561179f5761179f612e62565b145b1561188c578289600001826001600160401b0316815481106117c5576117c56132d4565b906000526020600020906003020160010154118015611815575088600001816001600160401b0316815481106117fd576117fd6132d4565b600091825260209091206002600390920201015460ff165b156118875788600001816001600160401b031681548110611838576118386132d4565b906000526020600020906003020160010154925088600001816001600160401b03168154811061186a5761186a6132d4565b60009182526020909120600390910201546001600160a01b031691505b6119a3565b60018860038111156118a0576118a0612e62565b14806118bd575060038860038111156118bb576118bb612e62565b145b156119a3578289600001826001600160401b0316815481106118e1576118e16132d4565b906000526020600020906003020160010154108015611931575088600001816001600160401b031681548110611919576119196132d4565b600091825260209091206002600390920201015460ff165b156119a35788600001816001600160401b031681548110611954576119546132d4565b906000526020600020906003020160010154925088600001816001600160401b031681548110611986576119866132d4565b60009182526020909120600390910201546001600160a01b031691505b806119ad81613300565b91505061175e565b509150505b95945050505050565b81546000906119d49060019061377e565b90505b82600001816001600160401b0316815481106119f5576119f56132d4565b60009182526020909120600390910201546001600160a01b0390811690831603611a5c57600083600001826001600160401b031681548110611a3957611a396132d4565b60009182526020909120600390910201600201805460ff19169115159190911790555b80611a6681613791565b9150506119d7565b606f546040516314bcfacf60e31b81526000916001600160a01b03169063a5e7d67890611a9f908590600401612e32565b600060405180830381865afa158015611abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ae49190810190613828565b905060005b8151816001600160401b031610156109b657606a5482516001600160a01b0390911690639528f0629084906001600160401b038516908110611b2d57611b2d6132d4565b60200260200101518560016040518463ffffffff1660e01b8152600401611b5693929190613862565b600060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050508080611b9390613300565b915050611ae9565b606f546040516314bcfacf60e31b81526000916001600160a01b03169063a5e7d67890611bcc908590600401612e32565b600060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c119190810190613828565b905060005b8151816001600160401b031610156109b657606a5482516001600160a01b0390911690639528f0629084906001600160401b038516908110611c5a57611c5a6132d4565b60200260200101518560006040518463ffffffff1660e01b8152600401611c8393929190613862565b600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b505050508080611cc090613300565b915050611c16565b805460609081906000906001600160401b03811115611ce957611ce9612a8e565b604051908082528060200260200182016040528015611d12578160200160208202803683370190505b5084549091506000906001600160401b03811115611d3257611d32612a8e565b604051908082528060200260200182016040528015611d5b578160200160208202803683370190505b50905060005b85546001600160401b0382161015611e535785600001816001600160401b031681548110611d9157611d916132d4565b600091825260209091206003909102015483516001600160a01b039091169084906001600160401b038416908110611dcb57611dcb6132d4565b60200260200101906001600160a01b031690816001600160a01b03168152505085600001816001600160401b031681548110611e0957611e096132d4565b90600052602060002090600302016001015482826001600160401b031681518110611e3657611e366132d4565b602090810291909101015280611e4b81613300565b915050611d61565b509094909350915050565b600080516020613ba8833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490611eb1908490339060040161340d565b602060405180830381865afa158015611ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef29190612fe3565b6109b65760405162461bcd60e51b81526004016104d59061344c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f41576109b68361267b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611f9b575060408051601f3d908101601f19168201909252611f9891810190612f68565b60015b611fb75760405162461bcd60e51b81526004016104d5906138d5565b600080516020613ba88339815191528114611fe45760405162461bcd60e51b81526004016104d59061392b565b506109b68383836126cf565b60006060600084516001600160401b0381111561200f5761200f612a8e565b604051908082528060200260200182016040528015612038578160200160208202803683370190505b5090506000805b86518110156120de57856001600160401b0316878281518110612064576120646132d4565b60200260200101516001600160401b0316146120cc5786818151811061208c5761208c6132d4565b60200260200101518383815181106120a6576120a66132d4565b6001600160401b0390921660209283029190910190910152816120c88161393b565b9250505b806120d68161393b565b91505061203f565b506000816001600160401b038111156120f9576120f9612a8e565b604051908082528060200260200182016040528015612122578160200160208202803683370190505b50905060005b8281101561218657838181518110612142576121426132d4565b602002602001015182828151811061215c5761215c6132d4565b6001600160401b03909216602092830291909101909101528061217e8161393b565b915050612128565b5090969095509350505050565b6001600160a01b03163b151590565b600054610100900460ff166121c95760405162461bcd60e51b81526004016104d590613996565b565b60008160038111156121df576121df612e62565b036109b65760685460405163938a6b0d60e01b81526000916001600160a01b03169063938a6b0d9061221a90600790339089906004016139a6565b602060405180830381865afa158015612237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225b9190612f68565b905080831161227c5760405162461bcd60e51b81526004016104d5906139f3565b6068546001600160a01b031663ea12c742346007338861229c878a61377e565b6040518663ffffffff1660e01b81526004016122bb9493929190613a03565b6000604051808303818588803b1580156122d457600080fd5b505af1158015610f96573d6000803e3d6000fd5b60008560038111156122fc576122fc612e62565b14806123195750600285600381111561231757612317612e62565b145b1561233e578381101561233e5760405162461bcd60e51b81526004016104d5906139f3565b600185600381111561235257612352612e62565b148061236f5750600385600381111561236d5761236d612e62565b145b1561239457838111156123945760405162461bcd60e51b81526004016104d5906139f3565b826001600160401b03164310156123bd5760405162461bcd60e51b81526004016104d590613a6c565b816001600160401b031643106123e55760405162461bcd60e51b81526004016104d590613aab565b6123ef8633612565565b1561248657600085600381111561240857612408612e62565b036124355761241786336125d9565b81116124355760405162461bcd60e51b81526004016104d5906139f3565b600185600381111561244957612449612e62565b036124765761245886336125d9565b81106124765760405162461bcd60e51b81526004016104d5906139f3565b6124818633836126f4565b6124f8565b60408051606081018252338152602080820184815260019383018481528a548086018c5560008c8152939093209351600390930290930180546001600160a01b0319166001600160a01b039093169290921782555192810192909255516002909101805460ff19169115159190911790555b505050505050565b6000805b835181101561255b57826001600160a01b0316848281518110612529576125296132d4565b60200260200101516001600160a01b0316036125495760019150506115ad565b806125538161393b565b915050612504565b5060009392505050565b6000805b83546001600160401b038216101561255b5783600001816001600160401b031681548110612599576125996132d4565b60009182526020909120600390910201546001600160a01b03908116908416036125c75760019150506115ad565b806125d181613300565b915050612569565b815460009081906125ec9060019061377e565b90505b83600001816001600160401b03168154811061260d5761260d6132d4565b60009182526020909120600390910201546001600160a01b03908116908416036126695783600001816001600160401b03168154811061264f5761264f6132d4565b9060005260206000209060030201600101549150506115ad565b8061267381613791565b9150506125ef565b61268481612193565b6126a05760405162461bcd60e51b81526004016104d590613b05565b600080516020613ba883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126d883612791565b6000825111806126e55750805b156109b657610b5783836127d1565b82546000906127059060019061377e565b90505b83600001816001600160401b031681548110612726576127266132d4565b60009182526020909120600390910201546001600160a01b039081169084160361277f578184600001826001600160401b031681548110612769576127696132d4565b9060005260206000209060030201600101819055505b8061278981613791565b915050612708565b61279a8161267b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606115f08383604051806060016040528060278152602001613bc8602791396060600080856001600160a01b03168560405161280e9190613b37565b600060405180830381855af49150503d8060008114612849576040519150601f19603f3d011682016040523d82523d6000602084013e61284e565b606091505b509150915061285f86838387612869565b9695505050505050565b606083156128a657825160000361289f5761288385612193565b61289f5760405162461bcd60e51b81526004016104d590613b77565b50816128b0565b6128b083836128b8565b949350505050565b815115610b235781518083602001fd5b6001600160401b031690565b6128dd816128c8565b8114610c2257600080fd5b80356115ad816128d4565b60006020828403121561290857612908600080fd5b60006115a984846128e8565b6001600160a01b031690565b60006115ad82612914565b61293481612920565b82525050565b6000612946838361292b565b505060200190565b6000612958825190565b80845260209384019383018060005b8381101561298c57815161297b888261293a565b975060208301925050600101612967565b509495945050505050565b80612934565b60006129468383612997565b60006129b3825190565b80845260209384019383018060005b8381101561298c5781516129d6888261299d565b9750602083019250506001016129c2565b604080825281016129f8818561294e565b905081810360208301526128b081846129a9565b60006115ad612a1d610e1f84612914565b612914565b60006115ad82612a0c565b60006115ad82612a22565b61293481612a2d565b602081016115ad8284612a38565b6128dd81612920565b80356115ad81612a4f565b600060208284031215612a7857612a78600080fd5b60006115a98484612a58565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b612aad82612a84565b81018181106001600160401b0382111715612aca57612aca612a8e565b6040525050565b6000612adc60405190565b9050612ae88282612aa4565b919050565b60006001600160401b03821115612b0657612b06612a8e565b612b0f82612a84565b60200192915050565b82818337506000910152565b6000612b37612b3284612aed565b612ad1565b905082815260208101848484011115612b5257612b52600080fd5b612b5d848285612b18565b509392505050565b600082601f830112612b7957612b79600080fd5b81356115a9848260208601612b24565b60008060408385031215612b9f57612b9f600080fd5b6000612bab8585612a58565b92505060208301356001600160401b03811115612bca57612bca600080fd5b612bd685828601612b65565b9150509250929050565b60006001600160401b03821115612bf957612bf9612a8e565b5060209081020190565b6000612c11612b3284612be0565b83815290506020808201908402830185811115612c3057612c30600080fd5b835b81811015612c545780612c4588826128e8565b84525060209283019201612c32565b5050509392505050565b600082601f830112612c7257612c72600080fd5b81356115a9848260208601612c03565b600060208284031215612c9757612c97600080fd5b81356001600160401b03811115612cb057612cb0600080fd5b6115a984828501612c5e565b602080825281016115f0818461294e565b602081016115ad8284612997565b602081016115ad828461292b565b600080600080600080600080610100898b031215612d0957612d09600080fd5b6000612d158b8b612a58565b9850506020612d268b828c01612a58565b9750506040612d378b828c01612a58565b9650506060612d488b828c01612a58565b9550506080612d598b828c01612a58565b94505060a0612d6a8b828c01612a58565b93505060c0612d7b8b828c01612a58565b92505060e0612d8c8b828c01612a58565b9150509295985092959890939650565b806128dd565b80356115ad81612d9c565b60008060408385031215612dc357612dc3600080fd5b6000612dcf85856128e8565b9250506020612bd685828601612da2565b60008060408385031215612df657612df6600080fd5b6000612e0285856128e8565b9250506020612bd685828601612a58565b801515612934565b602081016115ad8284612e13565b612934816128c8565b602081016115ad8284612e29565b60008060408385031215612e5657612e56600080fd5b6000612e028585612a58565b634e487b7160e01b600052602160045260246000fd5b60088110610c2257600080fd5b80516115ad81612e78565b600060208284031215612ea557612ea5600080fd5b60006115a98484612e85565b601581526000602082017418db1bdcd9481b585d18da1a5b99c819985a5b1959605a1b815291505b5060200190565b602080825281016115ad81612eb1565b600d81526000602082016c496e76616c696420737461746560981b81529150612ed9565b602080825281016115ad81612ef0565b60048110610c2257600080fd5b80516115ad81612f24565b600060208284031215612f5157612f51600080fd5b60006115a98484612f31565b80516115ad81612d9c565b600060208284031215612f7d57612f7d600080fd5b60006115a98484612f5d565b80516115ad816128d4565b600060208284031215612fa957612fa9600080fd5b60006115a98484612f89565b60408101612fc38285612e29565b6115f0602083018461292b565b8015156128dd565b80516115ad81612fd0565b600060208284031215612ff857612ff8600080fd5b60006115a98484612fd8565b80516115ad81612a4f565b60006020828403121561302457613024600080fd5b60006115a98484613004565b60088110610c2257610c22612e62565b80612ae881613030565b60006115ad82613040565b6129348161304a565b60038110610c2257610c22612e62565b80612ae88161305e565b60006115ad8261306e565b61293481613078565b60a0810161309a8288613055565b6130a7602083018761292b565b6130b46040830186612e29565b6130c1606083018561292b565b61285f6080830184613083565b606081016130dc8286612e29565b6130e9602083018561292b565b6128b0604083018461292b565b600060033d1115610e1f5760046000803e5060005160e01c90565b600060443d101561311f5790565b60405160043d036004823e80513d60248201116001600160401b038211171561314757505090565b80820180516001600160401b03811115613162575050505090565b80602083010160043d03850181111561317d57505050505090565b61318c82602001850186612aa4565b5090949350505050565b60005b838110156131b1578181015183820152602001613199565b50506000910152565b60006131c4825190565b8084526020840193506131db818560208601613196565b6131e481612a84565b9093019392505050565b602080825281016115f081846131ba565b601d81526000602082017f7265706f72742063616e63656c206d61746368696e67206661696c656400000081529150612ed9565b602080825281016115ad816131ff565b602c8152600060208201600080516020613b8883398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016115ad81613243565b602c8152600060208201600080516020613b8883398151915281526b6163746976652070726f787960a01b60208201529150613276565b602080825281016115ad8161328d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061330b826128c8565b91506001600160401b038203613323576133236132ea565b5060010190565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150613276565b602080825281016115ad8161332a565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150613276565b602080825281016115ad8161338f565b60ff1690565b6129348160006115ad826133ea565b602081016115ad82846133f0565b60408101612fc38285612997565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612ed9565b602080825281016115ad8161341b565b6060810161346a8286612e29565b6134776020830185613055565b6128b06040830184613055565b61ffff81166128dd565b80516115ad81613484565b6000602082840312156134ae576134ae600080fd5b60006115a9848461348e565b6129348160006115ad61ffff83166128c8565b604081016134db8285612e29565b6115f060208301846134ba565b60006134f6612b3284612be0565b8381529050602080820190840283018581111561351557613515600080fd5b835b81811015612c54578061352a8882613004565b84525060209283019201613517565b600082601f83011261354d5761354d600080fd5b81516115a98482602086016134e8565b63ffffffff81166128dd565b80516115ad8161355d565b6000613582612b3284612be0565b838152905060208082019084028301858111156135a1576135a1600080fd5b835b81811015612c5457806135b68882613569565b845250602092830192016135a3565b600082601f8301126135d9576135d9600080fd5b81516115a9848260208601613574565b600080600080600060a0868803121561360457613604600080fd5b85516001600160401b0381111561361d5761361d600080fd5b61362988828901613539565b95505060208601516001600160401b0381111561364857613648600080fd5b61365488828901613539565b94505060406136658882890161348e565b93505060606136768882890161348e565b92505060808601516001600160401b0381111561369557613695600080fd5b6136a1888289016135c5565b9150509295509295909350565b601481526000602082017324b73b30b634b21029a81039bab136b4ba3a32b960611b81529150612ed9565b602080825281016115ad816136ae565b604081016136f7828561292b565b6115f06020830184612997565b601181526000602082017042696464696e6720746f6f206561726c7960781b81529150612ed9565b602080825281016115ad81613704565b60208082527f42696464696e6720706572696f6420686173206e6f7420656e6465642079657491019081526000612ed9565b602080825281016115ad8161373c565b818103818111156115ad576115ad6132ea565b600061379c826128c8565b9150816137ab576137ab6132ea565b506000190190565b60006137c1612b3284612be0565b838152905060208082019084028301858111156137e0576137e0600080fd5b835b81811015612c5457806137f58882612f89565b845250602092830192016137e2565b600082601f83011261381857613818600080fd5b81516115a98482602086016137b3565b60006020828403121561383d5761383d600080fd5b81516001600160401b0381111561385657613856600080fd5b6115a984828501613804565b606081016138708286612e29565b61387d6020830185612e29565b6128b06040830184612e13565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150613276565b602080825281016115ad8161388a565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150613276565b602080825281016115ad816138e5565b60006000198203613323576133236132ea565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150613276565b602080825281016115ad8161394e565b606081016139b48286613055565b6139c1602083018561292b565b6128b06040830184612e29565b600e81526000602082016d125b9d985b1a5908185b5bdd5b9d60921b81529150612ed9565b602080825281016115ad816139ce565b60808101613a118287613055565b613a1e602083018661292b565b613a2b6040830185612e29565b6119ba6060830184612997565b601e81526000602082017f4d61746368696e673a2042696464696e67206973206e6f74207374617274000081529150612ed9565b602080825281016115ad81613a38565b601881526000602082017713585d18da1a5b99ce88109a59191a5b99c81a5cc8195b9960421b81529150612ed9565b602080825281016115ad81613a7c565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150613276565b602080825281016115ad81613abb565b6000613b1f825190565b613b2d818560208601613196565b9290920192915050565b60006115f08284613b15565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612ed9565b602080825281016115ad81613b4356fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200e50817c5bff85f7a4cd13c108e981315c17bf300156ccddebd28deb0820b5a164736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100fa5760003560e01c8063050507a9146100ff57806306e726c01461012157806312c9618c146101585780632620333e146101785780633659cfe6146101a55780634f1ef286146101c55780634fc780e8146101d857806352d1902d1461020557806363976407146102275780636ad81d6214610254578063840febd9146102745780638a29e2de1461029457806396fd77b0146102b45780639a917558146102c75780639aa023d1146102f45780639cfa7d5514610314578063a2cda22e14610334578063aaf10f4214610361578063ab2d10f714610376578063bbf8367414610396578063e2fdcc17146103b6575b600080fd5b34801561010b57600080fd5b5061011f61011a3660046128f3565b6103d6565b005b34801561012d57600080fd5b5061014161013c3660046128f3565b6109bb565b60405161014f9291906129e7565b60405180910390f35b34801561016457600080fd5b5061011f6101733660046128f3565b6109eb565b34801561018457600080fd5b50606f54610198906001600160a01b031681565b60405161014f9190612a41565b3480156101b157600080fd5b5061011f6101c0366004612a63565b610b5d565b61011f6101d3366004612b89565b610c25565b3480156101e457600080fd5b506101f86101f3366004612c82565b610cde565b60405161014f9190612cbc565b34801561021157600080fd5b5061021a610dc4565b60405161014f9190612ccd565b34801561023357600080fd5b506102476102423660046128f3565b610e22565b60405161014f9190612cdb565b34801561026057600080fd5b50606d54610198906001600160a01b031681565b34801561028057600080fd5b50606e54610198906001600160a01b031681565b3480156102a057600080fd5b5061011f6102af366004612ce9565b610e49565b61011f6102c2366004612dad565b610fa1565b3480156102d357600080fd5b506102e76102e2366004612de0565b611587565b60405161014f9190612e1b565b34801561030057600080fd5b50606c54610198906001600160a01b031681565b34801561032057600080fd5b5061021a61032f366004612de0565b6115b3565b34801561034057600080fd5b5061035461034f3660046128f3565b6115d5565b60405161014f9190612e32565b34801561036d57600080fd5b506102476115f7565b34801561038257600080fd5b50606b54610198906001600160a01b031681565b3480156103a257600080fd5b5061011f6103b1366004612e40565b611606565b3480156103c257600080fd5b50606854610198906001600160a01b031681565b606e54604051631a569da560e11b81526002916001600160a01b0316906334ad3b4a90610407908590600401612e32565b602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190612e90565b600781111561045957610459612e62565b036104de57606e54604051636bb0367b60e11b81526001600160a01b039091169063d7606cf69061048e908490600401612e32565b600060405180830381600087803b1580156104a857600080fd5b505af19250505080156104b9575060015b6104de5760405162461bcd60e51b81526004016104d590612ee0565b60405180910390fd5b606e54604051631a569da560e11b81526004916001600160a01b0316906334ad3b4a9061050e9085908501612e32565b602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f9190612e90565b600781111561056057610560612e62565b1461057d5760405162461bcd60e51b81526004016104d590612f14565b6001600160401b038116600090815260656020526040808220606e54915163b6c9178360e01b815290929161076a916001600160a01b039091169063b6c91783906105cc908790600401612e32565b602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190612f3c565b606e546040516302de966b60e41b81526001600160a01b0390911690632de966b09061063d908890600401612e32565b602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190612f68565b606e54604051639e5a53e560e01b81526001600160a01b0390911690639e5a53e5906106ae908990600401612e32565b602060405180830381865afa1580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef9190612f94565b606e54604051639f6c8a4760e01b81526001600160a01b0390911690639f6c8a479061071f908a90600401612e32565b602060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190612f94565b86939291906116ca565b90506001600160a01b0381161561097d57606f546040516383587b9d60e01b81526001600160a01b03909116906383587b9d906107ad9086908590600401612fb5565b602060405180830381865afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190612fe3565b610819576107fc82826119c3565b8281604051632fa0b95d60e01b81526004016104d5929190612fb5565b61082283611a6e565b6001820180546001600160a01b0319166001600160a01b0383811691909117909155606854606e5460405163e19edda160e01b81529183169263d8ea185e926007928692899291169063e19edda19061087f908490600401612e32565b602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c0919061300f565b60016040518663ffffffff1660e01b81526004016108e295949392919061308c565b600060405180830381600087803b1580156108fc57600080fd5b505af1158015610910573d6000803e3d6000fd5b5050606e54604051630731aebf60e11b81526001600160a01b039091169250630e635d7e91506109469086908590600401612fb5565b600060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b50505050505050565b61098683611b9b565b606e54604051639247e80f60e01b81526001600160a01b0390911690639247e80f90610946908690600401612e32565b505050565b6001600160401b038116600090815260656020526040902060609081906109e181611cc8565b9250925050915091565b606e5460405163e19edda160e01b81526001600160a01b03909116908290600090839063e19edda190610a22908590600401612e32565b602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a63919061300f565b90506001600160a01b0381163314610a945781813360405163bb5a686560e01b81526004016104d5939291906130ce565b610a9d84611b9b565b606e54604051632c7e9d9b60e21b81526001600160a01b039091169063b1fa766c90610acd908790600401612e32565b600060405180830381600087803b158015610ae757600080fd5b505af1925050508015610af8575060015b610b5757610b046130f6565b806308c379a003610b3d5750610b18613111565b80610b235750610b3f565b8060405162461bcd60e51b81526004016104d591906131ee565b505b60405162461bcd60e51b81526004016104d590613233565b50505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ba55760405162461bcd60e51b81526004016104d59061327d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bd7611e5e565b6001600160a01b031614610bfd5760405162461bcd60e51b81526004016104d5906132c4565b610c0681611e7a565b60408051600080825260208201909252610c2291839190611f0e565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c6d5760405162461bcd60e51b81526004016104d59061327d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c9f611e5e565b6001600160a01b031614610cc55760405162461bcd60e51b81526004016104d5906132c4565b610cce82611e7a565b610cda82826001611f0e565b5050565b6060600080610ced8482611ff0565b915091506000826001600160401b03811115610d0b57610d0b612a8e565b604051908082528060200260200182016040528015610d34578160200160208202803683370190505b50905060005b83816001600160401b03161015610dbb57610d7683826001600160401b031681518110610d6957610d696132d4565b6020026020010151610e22565b82826001600160401b031681518110610d9157610d916132d4565b6001600160a01b039092166020928302919091019091015280610db381613300565b915050610d3a565b50949350505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e0e5760405162461bcd60e51b81526004016104d59061337f565b50600080516020613ba88339815191525b90565b6001600160401b03166000908152606560205260409020600101546001600160a01b031690565b600054610100900460ff1615808015610e695750600054600160ff909116105b80610e8a5750610e7830612193565b158015610e8a575060005460ff166001145b610ea65760405162461bcd60e51b81526004016104d5906133da565b6000805460ff191660011790558015610ec9576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038c8116919091179092556067805482168b84161790556068805482168584161790556069805482168a8416179055606a80548216898416179055606b80548216888416179055606c80548216878416179055606d8054909116918516919091179055610f4b6121a2565b8015610f96576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610f8d906001906133ff565b60405180910390a15b505050505050505050565b606754604051632474521560e21b81526001600160a01b03909116907fbef3bd11e82b4054dbbbfa191ade24a0f7f56837be03eaafd87d83dd8673ed669082906391d1485490610ff7908490339060040161340d565b602060405180830381865afa158015611014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110389190612fe3565b6110545760405162461bcd60e51b81526004016104d59061344c565b606e54604051631a569da560e11b81526001600160a01b0390911690859060029060009084906334ad3b4a9061108e908690600401612e32565b602060405180830381865afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190612e90565b90508160078111156110e3576110e3612e62565b8160078111156110f5576110f5612e62565b14611119578282826040516399df707960e01b81526004016104d59392919061345c565b6001600160401b038816600090815260656020526040808220606e54915163b6c9178360e01b81529092916001600160a01b03169063b6c9178390611162908d90600401612e32565b602060405180830381865afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a39190612f3c565b90506111b08a8a836121cb565b606e546040516302de966b60e41b81526113369183916001600160a01b0390911690632de966b0906111e6908f90600401612e32565b602060405180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190612f68565b606e60009054906101000a90046001600160a01b03166001600160a01b0316639e5a53e58e6040518263ffffffff1660e01b81526004016112689190612e32565b602060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a99190612f94565b606e60009054906101000a90046001600160a01b03166001600160a01b0316639f6c8a478f6040518263ffffffff1660e01b81526004016112ea9190612e32565b602060405180830381865afa158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b9190612f94565b86939291908e6122e8565b6000606c60009054906101000a90046001600160a01b03166001600160a01b031663146846a8606f60009054906101000a90046001600160a01b03166001600160a01b03166340f7f10b8e6040518263ffffffff1660e01b815260040161139d9190612e32565b602060405180830381865afa1580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190612f94565b606f60009054906101000a90046001600160a01b03166001600160a01b031663075717218f6040518263ffffffff1660e01b815260040161141f9190612e32565b602060405180830381865afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114609190613499565b6040518363ffffffff1660e01b815260040161147d9291906134cd565b600060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114c291908101906135e9565b5050509150506000815111156114f8576114dc8133612500565b6114f85760405162461bcd60e51b81526004016104d5906136d9565b8a6001600160401b03167f2d59e8efadb0626949fe9770419e2db68557cae79e87826fea8478c843b2f066338c6040516115339291906136e9565b60405180910390a2600282600381111561154f5761154f612e62565b148061156c5750600382600381111561156a5761156a612e62565b145b1561157a5761157a8b6103d6565b5050505050505050505050565b6001600160401b03821660009081526065602052604081206115a98184612565565b9150505b92915050565b6001600160401b03821660009081526065602052604081206115a981846125d9565b6001600160401b038116600090815260656020526040812080545b9392505050565b6000611601611e5e565b905090565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d148549061163d908490339060040161340d565b602060405180830381865afa15801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e9190612fe3565b61169a5760405162461bcd60e51b81526004016104d59061344c565b5050606e80546001600160a01b039384166001600160a01b031991821617909155606f8054929093169116179055565b600060028560038111156116e0576116e0612e62565b14806116fd575060038560038111156116fb576116fb612e62565b145b1561173057826001600160401b031643101561172b5760405162461bcd60e51b81526004016104d59061372c565b611759565b816001600160401b03164310156117595760405162461bcd60e51b81526004016104d59061376e565b836000805b88546001600160401b03821610156119b557600088600381111561178457611784612e62565b14806117a15750600288600381111561179f5761179f612e62565b145b1561188c578289600001826001600160401b0316815481106117c5576117c56132d4565b906000526020600020906003020160010154118015611815575088600001816001600160401b0316815481106117fd576117fd6132d4565b600091825260209091206002600390920201015460ff165b156118875788600001816001600160401b031681548110611838576118386132d4565b906000526020600020906003020160010154925088600001816001600160401b03168154811061186a5761186a6132d4565b60009182526020909120600390910201546001600160a01b031691505b6119a3565b60018860038111156118a0576118a0612e62565b14806118bd575060038860038111156118bb576118bb612e62565b145b156119a3578289600001826001600160401b0316815481106118e1576118e16132d4565b906000526020600020906003020160010154108015611931575088600001816001600160401b031681548110611919576119196132d4565b600091825260209091206002600390920201015460ff165b156119a35788600001816001600160401b031681548110611954576119546132d4565b906000526020600020906003020160010154925088600001816001600160401b031681548110611986576119866132d4565b60009182526020909120600390910201546001600160a01b031691505b806119ad81613300565b91505061175e565b509150505b95945050505050565b81546000906119d49060019061377e565b90505b82600001816001600160401b0316815481106119f5576119f56132d4565b60009182526020909120600390910201546001600160a01b0390811690831603611a5c57600083600001826001600160401b031681548110611a3957611a396132d4565b60009182526020909120600390910201600201805460ff19169115159190911790555b80611a6681613791565b9150506119d7565b606f546040516314bcfacf60e31b81526000916001600160a01b03169063a5e7d67890611a9f908590600401612e32565b600060405180830381865afa158015611abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ae49190810190613828565b905060005b8151816001600160401b031610156109b657606a5482516001600160a01b0390911690639528f0629084906001600160401b038516908110611b2d57611b2d6132d4565b60200260200101518560016040518463ffffffff1660e01b8152600401611b5693929190613862565b600060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050508080611b9390613300565b915050611ae9565b606f546040516314bcfacf60e31b81526000916001600160a01b03169063a5e7d67890611bcc908590600401612e32565b600060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c119190810190613828565b905060005b8151816001600160401b031610156109b657606a5482516001600160a01b0390911690639528f0629084906001600160401b038516908110611c5a57611c5a6132d4565b60200260200101518560006040518463ffffffff1660e01b8152600401611c8393929190613862565b600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b505050508080611cc090613300565b915050611c16565b805460609081906000906001600160401b03811115611ce957611ce9612a8e565b604051908082528060200260200182016040528015611d12578160200160208202803683370190505b5084549091506000906001600160401b03811115611d3257611d32612a8e565b604051908082528060200260200182016040528015611d5b578160200160208202803683370190505b50905060005b85546001600160401b0382161015611e535785600001816001600160401b031681548110611d9157611d916132d4565b600091825260209091206003909102015483516001600160a01b039091169084906001600160401b038416908110611dcb57611dcb6132d4565b60200260200101906001600160a01b031690816001600160a01b03168152505085600001816001600160401b031681548110611e0957611e096132d4565b90600052602060002090600302016001015482826001600160401b031681518110611e3657611e366132d4565b602090810291909101015280611e4b81613300565b915050611d61565b509094909350915050565b600080516020613ba8833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490611eb1908490339060040161340d565b602060405180830381865afa158015611ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef29190612fe3565b6109b65760405162461bcd60e51b81526004016104d59061344c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f41576109b68361267b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611f9b575060408051601f3d908101601f19168201909252611f9891810190612f68565b60015b611fb75760405162461bcd60e51b81526004016104d5906138d5565b600080516020613ba88339815191528114611fe45760405162461bcd60e51b81526004016104d59061392b565b506109b68383836126cf565b60006060600084516001600160401b0381111561200f5761200f612a8e565b604051908082528060200260200182016040528015612038578160200160208202803683370190505b5090506000805b86518110156120de57856001600160401b0316878281518110612064576120646132d4565b60200260200101516001600160401b0316146120cc5786818151811061208c5761208c6132d4565b60200260200101518383815181106120a6576120a66132d4565b6001600160401b0390921660209283029190910190910152816120c88161393b565b9250505b806120d68161393b565b91505061203f565b506000816001600160401b038111156120f9576120f9612a8e565b604051908082528060200260200182016040528015612122578160200160208202803683370190505b50905060005b8281101561218657838181518110612142576121426132d4565b602002602001015182828151811061215c5761215c6132d4565b6001600160401b03909216602092830291909101909101528061217e8161393b565b915050612128565b5090969095509350505050565b6001600160a01b03163b151590565b600054610100900460ff166121c95760405162461bcd60e51b81526004016104d590613996565b565b60008160038111156121df576121df612e62565b036109b65760685460405163938a6b0d60e01b81526000916001600160a01b03169063938a6b0d9061221a90600790339089906004016139a6565b602060405180830381865afa158015612237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225b9190612f68565b905080831161227c5760405162461bcd60e51b81526004016104d5906139f3565b6068546001600160a01b031663ea12c742346007338861229c878a61377e565b6040518663ffffffff1660e01b81526004016122bb9493929190613a03565b6000604051808303818588803b1580156122d457600080fd5b505af1158015610f96573d6000803e3d6000fd5b60008560038111156122fc576122fc612e62565b14806123195750600285600381111561231757612317612e62565b145b1561233e578381101561233e5760405162461bcd60e51b81526004016104d5906139f3565b600185600381111561235257612352612e62565b148061236f5750600385600381111561236d5761236d612e62565b145b1561239457838111156123945760405162461bcd60e51b81526004016104d5906139f3565b826001600160401b03164310156123bd5760405162461bcd60e51b81526004016104d590613a6c565b816001600160401b031643106123e55760405162461bcd60e51b81526004016104d590613aab565b6123ef8633612565565b1561248657600085600381111561240857612408612e62565b036124355761241786336125d9565b81116124355760405162461bcd60e51b81526004016104d5906139f3565b600185600381111561244957612449612e62565b036124765761245886336125d9565b81106124765760405162461bcd60e51b81526004016104d5906139f3565b6124818633836126f4565b6124f8565b60408051606081018252338152602080820184815260019383018481528a548086018c5560008c8152939093209351600390930290930180546001600160a01b0319166001600160a01b039093169290921782555192810192909255516002909101805460ff19169115159190911790555b505050505050565b6000805b835181101561255b57826001600160a01b0316848281518110612529576125296132d4565b60200260200101516001600160a01b0316036125495760019150506115ad565b806125538161393b565b915050612504565b5060009392505050565b6000805b83546001600160401b038216101561255b5783600001816001600160401b031681548110612599576125996132d4565b60009182526020909120600390910201546001600160a01b03908116908416036125c75760019150506115ad565b806125d181613300565b915050612569565b815460009081906125ec9060019061377e565b90505b83600001816001600160401b03168154811061260d5761260d6132d4565b60009182526020909120600390910201546001600160a01b03908116908416036126695783600001816001600160401b03168154811061264f5761264f6132d4565b9060005260206000209060030201600101549150506115ad565b8061267381613791565b9150506125ef565b61268481612193565b6126a05760405162461bcd60e51b81526004016104d590613b05565b600080516020613ba883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126d883612791565b6000825111806126e55750805b156109b657610b5783836127d1565b82546000906127059060019061377e565b90505b83600001816001600160401b031681548110612726576127266132d4565b60009182526020909120600390910201546001600160a01b039081169084160361277f578184600001826001600160401b031681548110612769576127696132d4565b9060005260206000209060030201600101819055505b8061278981613791565b915050612708565b61279a8161267b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606115f08383604051806060016040528060278152602001613bc8602791396060600080856001600160a01b03168560405161280e9190613b37565b600060405180830381855af49150503d8060008114612849576040519150601f19603f3d011682016040523d82523d6000602084013e61284e565b606091505b509150915061285f86838387612869565b9695505050505050565b606083156128a657825160000361289f5761288385612193565b61289f5760405162461bcd60e51b81526004016104d590613b77565b50816128b0565b6128b083836128b8565b949350505050565b815115610b235781518083602001fd5b6001600160401b031690565b6128dd816128c8565b8114610c2257600080fd5b80356115ad816128d4565b60006020828403121561290857612908600080fd5b60006115a984846128e8565b6001600160a01b031690565b60006115ad82612914565b61293481612920565b82525050565b6000612946838361292b565b505060200190565b6000612958825190565b80845260209384019383018060005b8381101561298c57815161297b888261293a565b975060208301925050600101612967565b509495945050505050565b80612934565b60006129468383612997565b60006129b3825190565b80845260209384019383018060005b8381101561298c5781516129d6888261299d565b9750602083019250506001016129c2565b604080825281016129f8818561294e565b905081810360208301526128b081846129a9565b60006115ad612a1d610e1f84612914565b612914565b60006115ad82612a0c565b60006115ad82612a22565b61293481612a2d565b602081016115ad8284612a38565b6128dd81612920565b80356115ad81612a4f565b600060208284031215612a7857612a78600080fd5b60006115a98484612a58565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b612aad82612a84565b81018181106001600160401b0382111715612aca57612aca612a8e565b6040525050565b6000612adc60405190565b9050612ae88282612aa4565b919050565b60006001600160401b03821115612b0657612b06612a8e565b612b0f82612a84565b60200192915050565b82818337506000910152565b6000612b37612b3284612aed565b612ad1565b905082815260208101848484011115612b5257612b52600080fd5b612b5d848285612b18565b509392505050565b600082601f830112612b7957612b79600080fd5b81356115a9848260208601612b24565b60008060408385031215612b9f57612b9f600080fd5b6000612bab8585612a58565b92505060208301356001600160401b03811115612bca57612bca600080fd5b612bd685828601612b65565b9150509250929050565b60006001600160401b03821115612bf957612bf9612a8e565b5060209081020190565b6000612c11612b3284612be0565b83815290506020808201908402830185811115612c3057612c30600080fd5b835b81811015612c545780612c4588826128e8565b84525060209283019201612c32565b5050509392505050565b600082601f830112612c7257612c72600080fd5b81356115a9848260208601612c03565b600060208284031215612c9757612c97600080fd5b81356001600160401b03811115612cb057612cb0600080fd5b6115a984828501612c5e565b602080825281016115f0818461294e565b602081016115ad8284612997565b602081016115ad828461292b565b600080600080600080600080610100898b031215612d0957612d09600080fd5b6000612d158b8b612a58565b9850506020612d268b828c01612a58565b9750506040612d378b828c01612a58565b9650506060612d488b828c01612a58565b9550506080612d598b828c01612a58565b94505060a0612d6a8b828c01612a58565b93505060c0612d7b8b828c01612a58565b92505060e0612d8c8b828c01612a58565b9150509295985092959890939650565b806128dd565b80356115ad81612d9c565b60008060408385031215612dc357612dc3600080fd5b6000612dcf85856128e8565b9250506020612bd685828601612da2565b60008060408385031215612df657612df6600080fd5b6000612e0285856128e8565b9250506020612bd685828601612a58565b801515612934565b602081016115ad8284612e13565b612934816128c8565b602081016115ad8284612e29565b60008060408385031215612e5657612e56600080fd5b6000612e028585612a58565b634e487b7160e01b600052602160045260246000fd5b60088110610c2257600080fd5b80516115ad81612e78565b600060208284031215612ea557612ea5600080fd5b60006115a98484612e85565b601581526000602082017418db1bdcd9481b585d18da1a5b99c819985a5b1959605a1b815291505b5060200190565b602080825281016115ad81612eb1565b600d81526000602082016c496e76616c696420737461746560981b81529150612ed9565b602080825281016115ad81612ef0565b60048110610c2257600080fd5b80516115ad81612f24565b600060208284031215612f5157612f51600080fd5b60006115a98484612f31565b80516115ad81612d9c565b600060208284031215612f7d57612f7d600080fd5b60006115a98484612f5d565b80516115ad816128d4565b600060208284031215612fa957612fa9600080fd5b60006115a98484612f89565b60408101612fc38285612e29565b6115f0602083018461292b565b8015156128dd565b80516115ad81612fd0565b600060208284031215612ff857612ff8600080fd5b60006115a98484612fd8565b80516115ad81612a4f565b60006020828403121561302457613024600080fd5b60006115a98484613004565b60088110610c2257610c22612e62565b80612ae881613030565b60006115ad82613040565b6129348161304a565b60038110610c2257610c22612e62565b80612ae88161305e565b60006115ad8261306e565b61293481613078565b60a0810161309a8288613055565b6130a7602083018761292b565b6130b46040830186612e29565b6130c1606083018561292b565b61285f6080830184613083565b606081016130dc8286612e29565b6130e9602083018561292b565b6128b0604083018461292b565b600060033d1115610e1f5760046000803e5060005160e01c90565b600060443d101561311f5790565b60405160043d036004823e80513d60248201116001600160401b038211171561314757505090565b80820180516001600160401b03811115613162575050505090565b80602083010160043d03850181111561317d57505050505090565b61318c82602001850186612aa4565b5090949350505050565b60005b838110156131b1578181015183820152602001613199565b50506000910152565b60006131c4825190565b8084526020840193506131db818560208601613196565b6131e481612a84565b9093019392505050565b602080825281016115f081846131ba565b601d81526000602082017f7265706f72742063616e63656c206d61746368696e67206661696c656400000081529150612ed9565b602080825281016115ad816131ff565b602c8152600060208201600080516020613b8883398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016115ad81613243565b602c8152600060208201600080516020613b8883398151915281526b6163746976652070726f787960a01b60208201529150613276565b602080825281016115ad8161328d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061330b826128c8565b91506001600160401b038203613323576133236132ea565b5060010190565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150613276565b602080825281016115ad8161332a565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150613276565b602080825281016115ad8161338f565b60ff1690565b6129348160006115ad826133ea565b602081016115ad82846133f0565b60408101612fc38285612997565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612ed9565b602080825281016115ad8161341b565b6060810161346a8286612e29565b6134776020830185613055565b6128b06040830184613055565b61ffff81166128dd565b80516115ad81613484565b6000602082840312156134ae576134ae600080fd5b60006115a9848461348e565b6129348160006115ad61ffff83166128c8565b604081016134db8285612e29565b6115f060208301846134ba565b60006134f6612b3284612be0565b8381529050602080820190840283018581111561351557613515600080fd5b835b81811015612c54578061352a8882613004565b84525060209283019201613517565b600082601f83011261354d5761354d600080fd5b81516115a98482602086016134e8565b63ffffffff81166128dd565b80516115ad8161355d565b6000613582612b3284612be0565b838152905060208082019084028301858111156135a1576135a1600080fd5b835b81811015612c5457806135b68882613569565b845250602092830192016135a3565b600082601f8301126135d9576135d9600080fd5b81516115a9848260208601613574565b600080600080600060a0868803121561360457613604600080fd5b85516001600160401b0381111561361d5761361d600080fd5b61362988828901613539565b95505060208601516001600160401b0381111561364857613648600080fd5b61365488828901613539565b94505060406136658882890161348e565b93505060606136768882890161348e565b92505060808601516001600160401b0381111561369557613695600080fd5b6136a1888289016135c5565b9150509295509295909350565b601481526000602082017324b73b30b634b21029a81039bab136b4ba3a32b960611b81529150612ed9565b602080825281016115ad816136ae565b604081016136f7828561292b565b6115f06020830184612997565b601181526000602082017042696464696e6720746f6f206561726c7960781b81529150612ed9565b602080825281016115ad81613704565b60208082527f42696464696e6720706572696f6420686173206e6f7420656e6465642079657491019081526000612ed9565b602080825281016115ad8161373c565b818103818111156115ad576115ad6132ea565b600061379c826128c8565b9150816137ab576137ab6132ea565b506000190190565b60006137c1612b3284612be0565b838152905060208082019084028301858111156137e0576137e0600080fd5b835b81811015612c5457806137f58882612f89565b845250602092830192016137e2565b600082601f83011261381857613818600080fd5b81516115a98482602086016137b3565b60006020828403121561383d5761383d600080fd5b81516001600160401b0381111561385657613856600080fd5b6115a984828501613804565b606081016138708286612e29565b61387d6020830185612e29565b6128b06040830184612e13565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150613276565b602080825281016115ad8161388a565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150613276565b602080825281016115ad816138e5565b60006000198203613323576133236132ea565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150613276565b602080825281016115ad8161394e565b606081016139b48286613055565b6139c1602083018561292b565b6128b06040830184612e29565b600e81526000602082016d125b9d985b1a5908185b5bdd5b9d60921b81529150612ed9565b602080825281016115ad816139ce565b60808101613a118287613055565b613a1e602083018661292b565b613a2b6040830185612e29565b6119ba6060830184612997565b601e81526000602082017f4d61746368696e673a2042696464696e67206973206e6f74207374617274000081529150612ed9565b602080825281016115ad81613a38565b601881526000602082017713585d18da1a5b99ce88109a59191a5b99c81a5cc8195b9960421b81529150612ed9565b602080825281016115ad81613a7c565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150613276565b602080825281016115ad81613abb565b6000613b1f825190565b613b2d818560208601613196565b9290920192915050565b60006115f08284613b15565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612ed9565b602080825281016115ad81613b4356fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200e50817c5bff85f7a4cd13c108e981315c17bf300156ccddebd28deb0820b5a164736f6c63430008150033",
  "devdoc": {
    "details": "This contract is intended to be inherited by specific matching-related contracts.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelMatching(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Matchings Base Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidMatchingState(uint64,uint8,uint8)": [
        {
          "notice": "matching errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "bidding(uint64,uint256)": {
        "notice": "Function for bidding on a matching"
      },
      "cancelMatching(uint64)": {
        "notice": "Function for canceling a matching"
      },
      "closeMatching(uint64)": {
        "notice": "Function for closing a matching and choosing a winner"
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getMatchingBidAmount(uint64,address)": {
        "notice": "Function for getting bid amount of a bidder in a matching"
      },
      "getMatchingBids(uint64)": {
        "notice": "Function for getting bids in a matching"
      },
      "getMatchingBidsCount(uint64)": {
        "notice": "Function for getting the count of bids in a matching"
      },
      "getMatchingWinner(uint64)": {
        "notice": "Function for getting winner of a matching"
      },
      "getMatchingWinners(uint64[])": {
        "notice": "Function for getting winners of a matchings"
      },
      "hasMatchingBid(uint64,address)": {
        "notice": "Function for checking if a bidder has a bid in a matching"
      },
      "initDependencies(address,address)": {
        "notice": "Function for init matchings instance."
      },
      "initialize(address,address,address,address,address,address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      }
    },
    "notice": "This contract serves as the base for managing matchings, their states, and associated actions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 37306,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "matchingBids",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint64,t_struct(MatchingBids)45194_storage)"
      },
      {
        "astId": 37308,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 37311,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "roles",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IRoles)29558"
      },
      {
        "astId": 37314,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "escrow",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IEscrow)29288"
      },
      {
        "astId": 37317,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "filplus",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IFilplus)29518"
      },
      {
        "astId": 37320,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "carstore",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ICarstore)29050"
      },
      {
        "astId": 37323,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "datasets",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IDatasets)29822"
      },
      {
        "astId": 37326,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "datasetsRequirement",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IDatasetsRequirement)30208"
      },
      {
        "astId": 37329,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "datasetsProof",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IDatasetsProof)30135"
      },
      {
        "astId": 37332,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "matchings",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IMatchings)30370"
      },
      {
        "astId": 37335,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "matchingsTarget",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IMatchingsTarget)30632"
      },
      {
        "astId": 37340,
        "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
        "label": "__gap",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bid)45186_storage)dyn_storage": {
        "base": "t_struct(Bid)45186_storage",
        "encoding": "dynamic_array",
        "label": "struct MatchingType.Bid[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICarstore)29050": {
        "encoding": "inplace",
        "label": "contract ICarstore",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasets)29822": {
        "encoding": "inplace",
        "label": "contract IDatasets",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasetsProof)30135": {
        "encoding": "inplace",
        "label": "contract IDatasetsProof",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasetsRequirement)30208": {
        "encoding": "inplace",
        "label": "contract IDatasetsRequirement",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)29288": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IFilplus)29518": {
        "encoding": "inplace",
        "label": "contract IFilplus",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchings)30370": {
        "encoding": "inplace",
        "label": "contract IMatchings",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsTarget)30632": {
        "encoding": "inplace",
        "label": "contract IMatchingsTarget",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)29558": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_struct(MatchingBids)45194_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct MatchingType.MatchingBids)",
        "numberOfBytes": "32",
        "value": "t_struct(MatchingBids)45194_storage"
      },
      "t_struct(Bid)45186_storage": {
        "encoding": "inplace",
        "label": "struct MatchingType.Bid",
        "members": [
          {
            "astId": 45181,
            "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 45183,
            "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 45185,
            "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
            "label": "complyFilplusRule",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MatchingBids)45194_storage": {
        "encoding": "inplace",
        "label": "struct MatchingType.MatchingBids",
        "members": [
          {
            "astId": 45191,
            "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
            "label": "bids",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Bid)45186_storage)dyn_storage"
          },
          {
            "astId": 45193,
            "contract": "src/v0.8/module/matching/MatchingsBids.sol:MatchingsBids",
            "label": "winner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}