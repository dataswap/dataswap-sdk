{
  "address": "0x634ABA17B025d360236452ac82c7dEfA44ee9495",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "expectedInitiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualInitiator",
          "type": "address"
        }
      ],
      "name": "NotMatchingInitiator",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "matchingId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        }
      ],
      "name": "MatchingPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "enum DatasetType.DataType",
          "name": "_dataType",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "_associatedMappingFilesMatchingID",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_replicaIndex",
          "type": "uint16"
        }
      ],
      "name": "createTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasets",
      "outputs": [
        {
          "internalType": "contract IDatasets",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetsProof",
      "outputs": [
        {
          "internalType": "contract IDatasetsProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetsRequirement",
      "outputs": [
        {
          "internalType": "contract IDatasetsRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingCars",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingDatasetId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingReplicaIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getMatchingTarget",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "datasetID",
          "type": "uint64"
        },
        {
          "internalType": "uint64[]",
          "name": "cars",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "internalType": "enum DatasetType.DataType",
          "name": "dataType",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "associatedMappingFilesMatchingID",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_matchings",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsBids",
          "type": "address"
        }
      ],
      "name": "initDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filplus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_carstore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasets",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsRequirement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_datasetsProof",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_cid",
          "type": "uint64"
        }
      ],
      "name": "isMatchingContainsCar",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64[]",
          "name": "_cids",
          "type": "uint64[]"
        }
      ],
      "name": "isMatchingContainsCars",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "isMatchingTargetMeetsFilPlusRequirements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64[]",
          "name": "_cars",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64",
          "name": "_size",
          "type": "uint64"
        },
        {
          "internalType": "enum DatasetType.DataType",
          "name": "_dataType",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "_associatedMappingFilesMatchingID",
          "type": "uint64"
        }
      ],
      "name": "isMatchingTargetValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchings",
      "outputs": [
        {
          "internalType": "contract IMatchings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsBids",
      "outputs": [
        {
          "internalType": "contract IMatchingsBids",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_starts",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_ends",
          "type": "uint64[]"
        }
      ],
      "name": "parseCars",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64[]",
          "name": "_carsStarts",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_carsEnds",
          "type": "uint64[]"
        },
        {
          "internalType": "bool",
          "name": "complete",
          "type": "bool"
        }
      ],
      "name": "publishMatching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "86ceebc14306f94d4b734206564c3c08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"expectedInitiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualInitiator\",\"type\":\"address\"}],\"name\":\"NotMatchingInitiator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"matchingId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"MatchingPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"enum DatasetType.DataType\",\"name\":\"_dataType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_associatedMappingFilesMatchingID\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_replicaIndex\",\"type\":\"uint16\"}],\"name\":\"createTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasets\",\"outputs\":[{\"internalType\":\"contract IDatasets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetsProof\",\"outputs\":[{\"internalType\":\"contract IDatasetsProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetsRequirement\",\"outputs\":[{\"internalType\":\"contract IDatasetsRequirement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingCars\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingDatasetId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingReplicaIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getMatchingTarget\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"datasetID\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"cars\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"enum DatasetType.DataType\",\"name\":\"dataType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"associatedMappingFilesMatchingID\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_matchings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsBids\",\"type\":\"address\"}],\"name\":\"initDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filplus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_carstore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasets\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsRequirement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_datasetsProof\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_cid\",\"type\":\"uint64\"}],\"name\":\"isMatchingContainsCar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"_cids\",\"type\":\"uint64[]\"}],\"name\":\"isMatchingContainsCars\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isMatchingTargetMeetsFilPlusRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"_cars\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_size\",\"type\":\"uint64\"},{\"internalType\":\"enum DatasetType.DataType\",\"name\":\"_dataType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_associatedMappingFilesMatchingID\",\"type\":\"uint64\"}],\"name\":\"isMatchingTargetValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchings\",\"outputs\":[{\"internalType\":\"contract IMatchings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsBids\",\"outputs\":[{\"internalType\":\"contract IMatchingsBids\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_starts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_ends\",\"type\":\"uint64[]\"}],\"name\":\"parseCars\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"_carsStarts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_carsEnds\",\"type\":\"uint64[]\"},{\"internalType\":\"bool\",\"name\":\"complete\",\"type\":\"bool\"}],\"name\":\"publishMatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is intended to be inherited by specific matching-related contracts.      TODO: Missing fund proccess,need add later https://github.com/dataswap/core/issues/20            1 bidder(when bidding) and initiator(when publish) should transfer FIL to payable function            2 proccess the fund after matched            3 proccess the fund after matchedsotre,step by step\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"createTarget(uint64,uint64,uint8,uint64,uint16)\":{\"params\":{\"_associatedMappingFilesMatchingID\":\"The matching ID that associated with mapping files of dataset of _datasetId\",\"_dataType\":\"Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\",\"_datasetId\":\"The dataset id to create matching.\",\"_matchingId\":\"The matching id to publish cars.\",\"_replicaIndex\":\"The index of the replica in dataset.\"}},\"getMatchingCars(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching.\"},\"returns\":{\"_0\":\"cars An array of CIDs representing the cars in the matching.\"}},\"getMatchingDatasetId(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching.\"},\"returns\":{\"_0\":\"The ID of the matching's dataset.\"}},\"getMatchingReplicaIndex(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching.\"},\"returns\":{\"_0\":\"index The index of the matching's replica.\"}},\"getMatchingSize(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching to check.\"},\"returns\":{\"_0\":\"The size of the matching cars.\"}},\"getMatchingTarget(uint64)\":{\"params\":{\"_matchingId\":\"The ID of the matching.\"},\"returns\":{\"associatedMappingFilesMatchingID\":\"The ID of the associated mapping files matching.\",\"cars\":\"An array of CIDs representing the cars in the matching.\",\"dataType\":\"The data type of the matching.\",\"datasetID\":\"The ID of the associated dataset.\",\"size\":\"The size of the matching.\"}},\"isMatchingContainsCar(uint64,uint64)\":{\"params\":{\"_cid\":\"The CID (Content Identifier) to check for.\",\"_matchingId\":\"The ID of the matching to check.\"},\"returns\":{\"_0\":\"True if the matching contains the specified CID, otherwise false.\"}},\"isMatchingContainsCars(uint64,uint64[])\":{\"params\":{\"_cids\":\"An array of CIDs (Content Identifiers) to check for.\",\"_matchingId\":\"The ID of the matching to check.\"},\"returns\":{\"_0\":\"True if the matching contains all the specified CIDs, otherwise false.\"}},\"parseCars(uint64[],uint64[])\":{\"params\":{\"_ends\":\"The ends of cars to publish.\",\"_starts\":\"The starts of cars to publish.\"},\"returns\":{\"_0\":\"The cars of the indexes.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"publishMatching(uint64,uint64,uint64[],uint64[],bool)\":{\"params\":{\"_carsEnds\":\"The cars to publish.\",\"_carsStarts\":\"The cars to publish.\",\"_datasetId\":\"The dataset id of matching.\",\"_matchingId\":\"The matching id to publish cars.\",\"complete\":\"If the publish is complete.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Matchings Base Contract\",\"version\":1},\"userdoc\":{\"events\":{\"MatchingPublished(uint64,address)\":{\"notice\":\"Declare events for external monitoring\"}},\"kind\":\"user\",\"methods\":{\"createTarget(uint64,uint64,uint8,uint64,uint16)\":{\"notice\":\"Function for create a new matching target.\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getMatchingCars(uint64)\":{\"notice\":\"Get the cars of a matching.\"},\"getMatchingDatasetId(uint64)\":{\"notice\":\"Function for getting the dataset id in a matching\"},\"getMatchingReplicaIndex(uint64)\":{\"notice\":\"Get the index of matching's replica.\"},\"getMatchingSize(uint64)\":{\"notice\":\"Function for getting the total data size of bids in a matching\"},\"getMatchingTarget(uint64)\":{\"notice\":\"Get the target information of a matching.\"},\"initDependencies(address,address)\":{\"notice\":\"The function to init the dependencies of a matchingsTarget.\"},\"initialize(address,address,address,address,address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"isMatchingContainsCar(uint64,uint64)\":{\"notice\":\"Check if a matching with the given matching ID contains a specific CID.\"},\"isMatchingContainsCars(uint64,uint64[])\":{\"notice\":\"Check if a matching with the given matching ID contains multiple CIDs.\"},\"isMatchingTargetMeetsFilPlusRequirements(uint64,address)\":{\"notice\":\"Check if a matching meets the requirements of Fil+.\"},\"isMatchingTargetValid(uint64,uint64[],uint64,uint8,uint64)\":{\"notice\":\"check is matching targe valid\"},\"parseCars(uint64[],uint64[])\":{\"notice\":\"Function for parse cars from indexes.\"},\"publishMatching(uint64,uint64,uint64[],uint64[],bool)\":{\"notice\":\"Function for publishing a matching\"}},\"notice\":\"This contract serves as the base for managing matchings, their states, and associated actions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/matching/MatchingsTarget.sol\":\"MatchingsTarget\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030363434343639383630\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to init the dependencies of a filecoin.\\n    function initDependencies(address _datacap) external;\\n\\n    /// @notice The function to allocate the datacap of a storage deal.\\n    function allocateDatacap(uint64 client, uint256 _size) external;\\n\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0x5f39c709a0e57fa50f9f38e8fa5eb7c311e9700bc32bea042e8b1cf0c452ad2f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasets.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasets\\ninterface IDatasets {\\n    ///@notice Approve a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    function approveDataset(uint64 _datasetId) external;\\n\\n    ///@notice Approve the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    function approveDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Reject a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\\n    function rejectDataset(uint64 _datasetId) external;\\n\\n    ///@notice Reject the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    function rejectDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Submit metadata for a dataset\\n    ///        Note:anyone can submit dataset metadata\\n    function submitDatasetMetadata(\\n        uint64 _client,\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) external returns (uint64);\\n\\n    ///@notice Get dataset metadata\\n    function getDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory title,\\n            string memory industry,\\n            string memory name,\\n            string memory description,\\n            string memory source,\\n            string memory accessMethod,\\n            address submitter,\\n            uint64 createdBlockNumber,\\n            uint64 sizeInBytes,\\n            bool isPublic,\\n            uint64 version\\n        );\\n\\n    /// @notice Get submitter of dataset's metadata\\n    function getDatasetMetadataSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    /// @notice Get client of dataset's metadata\\n    function getDatasetMetadataClient(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset state\\n    function getDatasetState(\\n        uint64 _datasetId\\n    ) external view returns (DatasetType.State);\\n\\n    ///@notice Check if a dataset has metadata\\n    function hasDatasetMetadata(\\n        string memory _accessMethod\\n    ) external view returns (bool);\\n\\n    /// @notice Checks if metadata fields are valid.\\n    function requireValidDatasetMetadata(\\n        uint64 _datasetId\\n    ) external view returns (bool);\\n\\n    /// @notice Report the dataset has not enough collateral.\\n    function reportCollateralNotEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset has enough collateral.\\n    function reportCollateralEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset replica has already been submitted.\\n    function reportDatasetReplicaRequirementSubmitted(\\n        uint64 _datasetId\\n    ) external;\\n\\n    /// @notice Report the dataset proof has already been submitted.\\n    function reportDatasetProofSubmitted(uint64 _datasetId) external;\\n\\n    /// @notice Default getter functions for public variables\\n    function datasetsCount() external view returns (uint64);\\n\\n    /// @notice get  roles instance\\n    function roles() external view returns (IRoles);\\n\\n    /// @notice get  governance address\\n    function governanceAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x995e9501ddf94a17a0383b72d1701cadbb0e4a6bc3ae7d371677a458ba64e94b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsProof.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsProof\\ninterface IDatasetsProof {\\n    ///@notice Submit proof root for a dataset\\n    function submitDatasetProofRoot(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        string calldata _mappingFilesAccessMethod,\\n        bytes32 _rootHash\\n    ) external;\\n\\n    ///@notice Submit proof for a dataset\\n    function submitDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        bytes32[] memory _leafHashes,\\n        uint64 _leafIndex,\\n        uint64[] memory _leafSizes,\\n        bool _completed\\n    ) external;\\n\\n    ///@notice Submit proof completed for a dataset\\n    function submitDatasetProofCompleted(uint64 _datasetId) external;\\n\\n    /// @notice Append dataset collateral funds\\n    function appendDatasetCollateral(uint64 _datasetId) external payable;\\n\\n    /// @notice Get dataset need append collateral funds\\n    function getDatasetAppendCollateral(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCars(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    function getDatasetProofCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset proof's submitter\\n    function getDatasetProofSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCarsCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset size\\n    function getDatasetSize(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset minimum conditional\\n    function getDatasetCollateralRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Check if a dataset has a car id\\n    function isDatasetContainsCar(\\n        uint64 _datasetId,\\n        uint64 _id\\n    ) external returns (bool);\\n\\n    ///@notice Check if a dataset has car ids\\n    function isDatasetContainsCars(\\n        uint64 _datasetId,\\n        uint64[] memory _ids\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset has submitter\\n    function isDatasetProofSubmitter(\\n        uint64 _datasetId,\\n        address _submitter\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset proof all completed\\n    function isDatasetProofallCompleted(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe6f984da1ffcf0bb6dec2e79a232f394d564107972c727420d21a2d084c0a584\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsRequirement\\ninterface IDatasetsRequirement {\\n    ///@notice Submit storage requirement for a dataset\\n    ///        Note: submmiter of dataset can submit dataset storage requirement\\n    function submitDatasetReplicaRequirements(\\n        uint64 _datasetId,\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external payable;\\n\\n    ///@notice Get dataset replicas count\\n    function getDatasetReplicasCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Get dataset replica requirement\\n    function getDatasetReplicaRequirement(\\n        uint64 _datasetId,\\n        uint64 _index\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            address[] memory,\\n            uint16,\\n            uint16,\\n            uint32[] memory\\n        );\\n\\n    ///@notice Get dataset pre conditional\\n    function getDatasetPreCollateralRequirements(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7dc6c2d7dfaa3f6aaa56052304f36adda27182c1c34e7d6fead3671245d3e9bc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchings.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchings\\ninterface IMatchings {\\n    /// @notice The function to init the dependencies of a matchings.\\n    function initDependencies(\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _bidSelectionRule The rules for determining the winning bid.\\n    /// @param _biddingDelayBlockCount The number of blocks to delay bidding.\\n    /// @param _biddingPeriodBlockCount The number of blocks for bidding period.\\n    /// @param _storageCompletionPeriodBlocks The number of blocks for storage period.\\n    /// @param _biddingThreshold The threshold for bidding.\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    /// @param _additionalInfo The additional information about the matching.\\n    /// @return The matchingId.\\n    function createMatching(\\n        uint64 _datasetId,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint64 _biddingDelayBlockCount,\\n        uint64 _biddingPeriodBlockCount,\\n        uint64 _storageCompletionPeriodBlocks,\\n        uint256 _biddingThreshold,\\n        uint16 _replicaIndex,\\n        string memory _additionalInfo\\n    ) external returns (uint64);\\n\\n    /// @notice Function for pausing a matching\\n    /// @param _matchingId The matching id.\\n    function pauseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for resuming a paused matching\\n    /// @param _matchingId The matching id.\\n    function resumeMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    function reportPublishMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report canceling a matching\\n    /// @param _matchingId The matching id.\\n    function reportCancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report closing a matching\\n    /// @param _matchingId The matching id.\\n    function reportCloseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report complete with a winner\\n    /// @param _matchingId The matching id.\\n    /// @param _winner The winner of bids of matching.\\n    function reportMatchingHasWinner(\\n        uint64 _matchingId,\\n        address _winner\\n    ) external;\\n\\n    /// @notice Function for report complete a matching without winner\\n    /// @param _matchingId The matching id.\\n    function reportMatchingNoWinner(uint64 _matchingId) external;\\n\\n    /// @notice Function for getting matchings initiator\\n    function getMatchingInitiator(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting the state of a matching\\n    function getMatchingState(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.State);\\n\\n    /// @notice  Function for getting the bid selection rule of a matching\\n    function getBidSelectionRule(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.BidSelectionRule);\\n\\n    /// @notice  Function for getting the bid threshold of a matching\\n    function getBiddingThreshold(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the start height of a matching\\n    function getBiddingStartHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the after pause height of a matching\\n    function getBiddingAfterPauseHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the end height of a matching\\n    function getBiddingEndHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    // Default getter functions for public variables\\n    function matchingsCount() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x8388805c02520d71207fc4a755a894e7e76c6860c56e7a209d0de0d6422d5886\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsBids.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsBid\\ninterface IMatchingsBids {\\n    /// @notice The function to init the dependencies of a matchingsBids.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsTarget\\n    ) external;\\n\\n    /// @notice  Function for bidding on a matching\\n    function bidding(uint64 _matchingId, uint256 _amount) external;\\n\\n    /// @notice  Function for canceling a matching\\n    function cancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for closing a matching and choosing a winner\\n    function closeMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for getting bids in a matching\\n    function getMatchingBids(\\n        uint64 _matchingId\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice  Function for getting bid amount of a bidder in a matching\\n    function getMatchingBidAmount(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingBidsCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting winner of a matching\\n    function getMatchingWinner(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting winners of a matchings\\n    function getMatchingWinners(\\n        uint64[] memory _matchingIds\\n    ) external view returns (address[] memory);\\n\\n    /// @notice  Function for checking if a bidder has a bid in a matching\\n    function hasMatchingBid(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc60936578b513522c01c218f6311621d234c7bb1633a895ae75525b08c51024d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsTarget.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsTarget\\ninterface IMatchingsTarget {\\n    /// @notice The function to init the dependencies of a matchingsTarget.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching target.\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _dataType Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\\n    /// @param _associatedMappingFilesMatchingID The matching ID that associated with mapping files of dataset of _datasetId\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    function createTarget(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice  Function for parse cars from indexes.\\n    /// @param _starts The starts of cars to publish.\\n    /// @param _ends The ends of cars to publish.\\n    /// @return The cars of the indexes.\\n    function parseCars(\\n        uint64[] memory _starts,\\n        uint64[] memory _ends\\n    ) external pure returns (uint64[] memory);\\n\\n    /// @notice  Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id of matching.\\n    /// @param _carsStarts The cars to publish.\\n    /// @param _carsEnds The cars to publish.\\n    /// @param complete If the publish is complete.\\n    function publishMatching(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        uint64[] memory _carsStarts,\\n        uint64[] memory _carsEnds,\\n        bool complete\\n    ) external;\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice  Function for getting the dataset id in a matching\\n    function getMatchingDatasetId(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the index of matching's replica.\\n    function getMatchingReplicaIndex(\\n        uint64 _matchingId\\n    ) external view returns (uint16);\\n\\n    /// @notice get matchings size\\n    function getMatchingSize(uint64 _matchingId) external view returns (uint64);\\n\\n    /// @notice Get the target information of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return datasetID The ID of the associated dataset.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    /// @return size The size of the matching.\\n    /// @return dataType The data type of the matching.\\n    /// @return associatedMappingFilesMatchingID The ID of the associated mapping files matching.\\n    function getMatchingTarget(\\n        uint64 _matchingId\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 datasetID,\\n            uint64[] memory cars,\\n            uint64 size,\\n            DatasetType.DataType dataType,\\n            uint64 associatedMappingFilesMatchingID\\n        );\\n\\n    /// @notice Check if a matching with the given matching ID contains a specific CID.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cid The CID (Content Identifier) to check for.\\n    /// @return True if the matching contains the specified CID, otherwise false.\\n    function isMatchingContainsCar(\\n        uint64 _matchingId,\\n        uint64 _cid\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching with the given matching ID contains multiple CIDs.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cids An array of CIDs (Content Identifiers) to check for.\\n    /// @return True if the matching contains all the specified CIDs, otherwise false.\\n    function isMatchingContainsCars(\\n        uint64 _matchingId,\\n        uint64[] memory _cids\\n    ) external view returns (bool);\\n\\n    /// @notice check is matching targe valid\\n    function isMatchingTargetValid(\\n        uint64 _datasetId,\\n        uint64[] memory _cars,\\n        uint64 _size,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching meets the requirements of Fil+.\\n    function isMatchingTargetMeetsFilPlusRequirements(\\n        uint64 _matchingId,\\n        address candidate\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb27dd02e741d33a91c7761aadd2911d88ef6c0b7662f5ecb5acfde708176c44d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/MatchingsTarget.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\nimport {IDatasetsProof} from \\\"src/v0.8/interfaces/module/IDatasetsProof.sol\\\";\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\n/// shared\\nimport {MatchingsEvents} from \\\"src/v0.8/shared/events/MatchingsEvents.sol\\\";\\nimport {MatchingsModifiers} from \\\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n\\n/// library\\nimport {MatchingTargetLIB} from \\\"src/v0.8/module/matching/library/MatchingTargetLIB.sol\\\";\\nimport \\\"src/v0.8/shared/utils/array/ArrayLIB.sol\\\";\\n\\n/// type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Matchings Base Contract\\n/// @notice This contract serves as the base for managing matchings, their states, and associated actions.\\n/// @dev This contract is intended to be inherited by specific matching-related contracts.\\n///      TODO: Missing fund proccess,need add later https://github.com/dataswap/core/issues/20\\n///            1 bidder(when bidding) and initiator(when publish) should transfer FIL to payable function\\n///            2 proccess the fund after matched\\n///            3 proccess the fund after matchedsotre,step by step\\ncontract MatchingsTarget is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IMatchingsTarget,\\n    MatchingsModifiers\\n{\\n    /// @notice  Use libraries for different matching functionalities\\n    using MatchingTargetLIB for MatchingType.MatchingTarget;\\n    using ArrayAddressLIB for address[];\\n\\n    /// @notice  Declare private variables\\n    mapping(uint64 => MatchingType.MatchingTarget) private targets;\\n\\n    address private governanceAddress;\\n    IRoles private roles;\\n    IFilplus private filplus;\\n    ICarstore private carstore;\\n    IDatasets public datasets;\\n    IDatasetsRequirement public datasetsRequirement;\\n    IDatasetsProof public datasetsProof;\\n    IMatchings public matchings;\\n    IMatchingsBids public matchingsBids;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    // solhint-disable-next-line\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _filplus,\\n        address _carstore,\\n        address _datasets,\\n        address _datasetsRequirement,\\n        address _datasetsProof\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        filplus = IFilplus(_filplus);\\n        carstore = ICarstore(_carstore);\\n        datasets = IDatasets(_datasets);\\n        datasetsRequirement = IDatasetsRequirement(_datasetsRequirement);\\n        datasetsProof = IDatasetsProof(_datasetsProof);\\n\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice The function to init the dependencies of a matchingsTarget.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsBids\\n    ) external onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) {\\n        matchings = IMatchings(_matchings);\\n        matchingsBids = IMatchingsBids(_matchingsBids);\\n    }\\n\\n    ///@dev update cars info  to carStore before bidding\\n    function _beforeBidding(uint64 _matchingId) internal {\\n        uint64[] memory cars = getMatchingCars(_matchingId);\\n        uint16 replicaIndex = getMatchingReplicaIndex(_matchingId);\\n        for (uint64 i; i < cars.length; i++) {\\n            carstore.registCarReplica(cars[i], _matchingId, replicaIndex);\\n        }\\n    }\\n\\n    /// @notice Function for create a new matching target.\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _dataType Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\\n    /// @param _associatedMappingFilesMatchingID The matching ID that associated with mapping files of dataset of _datasetId\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    function createTarget(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID,\\n        uint16 _replicaIndex\\n    )\\n        external\\n        onlyRole(roles, RolesType.DATASET_PROVIDER)\\n        //onlyMatchingState(matchings, _matchingId, MatchingType.State.None)\\n        onlyMatchingInitiator(matchings, _matchingId)\\n    {\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        target.datasetId = _datasetId;\\n        target.cars = new uint64[](0);\\n        target.size = 0;\\n        target.dataType = _dataType;\\n        target\\n            .associatedMappingFilesMatchingID = _associatedMappingFilesMatchingID;\\n        target.replicaIndex = _replicaIndex;\\n    }\\n\\n    /// @notice  Function for parse cars from indexes.\\n    /// @param _starts The starts of cars to publish.\\n    /// @param _ends The ends of cars to publish.\\n    /// @return The cars of the indexes.\\n    function parseCars(\\n        uint64[] memory _starts,\\n        uint64[] memory _ends\\n    ) public pure returns (uint64[] memory) {\\n        require(_starts.length == _ends.length, \\\"start and end not match\\\");\\n        uint64 total;\\n        for (uint64 i = 0; i < _starts.length; i++) {\\n            require(_starts[i] <= _ends[i], \\\"start must be greater than end\\\");\\n            total += _ends[i] - _starts[i] + 1;\\n        }\\n        uint64 cnt;\\n        uint64[] memory _cars = new uint64[](total);\\n        for (uint64 i = 0; i < _starts.length; i++) {\\n            for (uint64 j = _starts[i]; j <= _ends[i]; j++) {\\n                _cars[cnt] = j;\\n                cnt++;\\n            }\\n        }\\n        return _cars;\\n    }\\n\\n    /// @notice  Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id of matching.\\n    /// @param _carsStarts The cars to publish.\\n    /// @param _carsEnds The cars to publish.\\n    /// @param complete If the publish is complete.\\n    function publishMatching(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        uint64[] memory _carsStarts,\\n        uint64[] memory _carsEnds,\\n        bool complete\\n    )\\n        external\\n        onlyRole(roles, RolesType.DATASET_PROVIDER)\\n        onlyMatchingInitiator(matchings, _matchingId)\\n    {\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        uint64[] memory _cars = parseCars(_carsStarts, _carsEnds);\\n        uint64 _size;\\n        try carstore.getCarsSize(_cars) returns (uint64 carSize) {\\n            _size = carSize;\\n        } catch {\\n            revert(\\\"Get cars size failed\\\");\\n        }\\n        require(target.datasetId == _datasetId, \\\"invalid dataset id\\\");\\n\\n        target._updateTargetCars(_cars, _size);\\n\\n        require(\\n            isMatchingTargetValid(\\n                _datasetId,\\n                _cars,\\n                _size,\\n                target.dataType,\\n                target.associatedMappingFilesMatchingID\\n            ),\\n            \\\"Target invalid\\\"\\n        );\\n\\n        if (complete) {\\n            _beforeBidding(_matchingId);\\n            matchings.reportPublishMatching(_matchingId);\\n            emit MatchingsEvents.MatchingPublished(_matchingId, msg.sender);\\n        }\\n    }\\n\\n    /// @notice Get the cars of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    function getMatchingCars(\\n        uint64 _matchingId\\n    ) public view returns (uint64[] memory) {\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        return target._getCars();\\n    }\\n\\n    /// @notice  Function for getting the dataset id in a matching\\n    /// @param _matchingId The ID of the matching.\\n    /// @return The ID of the matching's dataset.\\n    function getMatchingDatasetId(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        return target._getDatasetId();\\n    }\\n\\n    /// @notice Get the index of matching's replica.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return index The index of the matching's replica.\\n    function getMatchingReplicaIndex(\\n        uint64 _matchingId\\n    ) public view returns (uint16) {\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        return target.replicaIndex;\\n    }\\n\\n    /// @notice  Function for getting the total data size of bids in a matching\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @return The size of the matching cars.\\n    function getMatchingSize(uint64 _matchingId) public view returns (uint64) {\\n        (, , uint64 datasize, , ) = getMatchingTarget(_matchingId);\\n        return datasize;\\n    }\\n\\n    /// @notice Get the target information of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return datasetID The ID of the associated dataset.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    /// @return size The size of the matching.\\n    /// @return dataType The data type of the matching.\\n    /// @return associatedMappingFilesMatchingID The ID of the associated mapping files matching.\\n    function getMatchingTarget(\\n        uint64 _matchingId\\n    )\\n        public\\n        view\\n        returns (\\n            uint64 datasetID,\\n            uint64[] memory cars,\\n            uint64 size,\\n            DatasetType.DataType dataType,\\n            uint64 associatedMappingFilesMatchingID\\n        )\\n    {\\n        // Access the matching with the specified ID and retrieve the target information\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        return (\\n            target.datasetId,\\n            target.cars,\\n            target.size,\\n            target.dataType,\\n            target.associatedMappingFilesMatchingID\\n        );\\n    }\\n\\n    /// @notice Check if a matching with the given matching ID contains a specific CID.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cid The CID (Content Identifier) to check for.\\n    /// @return True if the matching contains the specified CID, otherwise false.\\n    function isMatchingContainsCar(\\n        uint64 _matchingId,\\n        uint64 _cid\\n    ) public view returns (bool) {\\n        uint64[] memory cids = getMatchingCars(_matchingId);\\n        for (uint64 i = 0; i < cids.length; i++) {\\n            if (_cid == cids[i]) return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Check if a matching with the given matching ID contains multiple CIDs.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cids An array of CIDs (Content Identifiers) to check for.\\n    /// @return True if the matching contains all the specified CIDs, otherwise false.\\n    function isMatchingContainsCars(\\n        uint64 _matchingId,\\n        uint64[] memory _cids\\n    ) public view returns (bool) {\\n        for (uint64 i = 0; i < _cids.length; i++) {\\n            if (!isMatchingContainsCar(_matchingId, _cids[i])) return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice check is matching targe valid\\n    function isMatchingTargetValid(\\n        uint64 _datasetId,\\n        uint64[] memory _cars,\\n        uint64 _size,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID\\n    ) public view returns (bool) {\\n        require(\\n            datasets.getDatasetState(_datasetId) ==\\n                DatasetType.State.DatasetApproved,\\n            \\\"datasetId is not approved!\\\"\\n        );\\n        require(\\n            datasetsProof.isDatasetContainsCars(_datasetId, _cars),\\n            \\\"Invalid cids!\\\"\\n        );\\n        require(_size > 0, \\\"Invalid size!\\\");\\n\\n        // Source data needs to ensure that the associated mapping files data has been stored\\n        if (_dataType == DatasetType.DataType.Source) {\\n            (\\n                ,\\n                uint64[] memory mappingsCars,\\n                ,\\n                DatasetType.DataType dataType,\\n\\n            ) = getMatchingTarget(_associatedMappingFilesMatchingID);\\n\\n            require(\\n                dataType == DatasetType.DataType.MappingFiles,\\n                \\\"Need a associated matching\\\"\\n            );\\n\\n            require(\\n                datasetsProof.isDatasetContainsCars(_datasetId, mappingsCars),\\n                \\\"Invalid mapping files cars\\\"\\n            );\\n\\n            require(\\n                matchings.getMatchingState(_associatedMappingFilesMatchingID) ==\\n                    MatchingType.State.Completed,\\n                \\\"datasetId is not completed!\\\"\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Check if a matching meets the requirements of Fil+.\\n    function isMatchingTargetMeetsFilPlusRequirements(\\n        uint64 _matchingId,\\n        address candidate\\n    ) external view returns (bool) {\\n        MatchingType.MatchingTarget storage target = targets[_matchingId];\\n        uint64[] memory cars = getMatchingCars(_matchingId);\\n        uint16 requirementReplicaCount = datasetsRequirement\\n            .getDatasetReplicasCount(target.datasetId);\\n        for (uint64 i; i < cars.length; i++) {\\n            address[] memory winners = matchingsBids.getMatchingWinners(\\n                carstore.getCarMatchingIds(cars[i])\\n            );\\n\\n            uint256 alreadyStoredReplicasByWinner = winners.countOccurrences(\\n                candidate\\n            );\\n\\n            if (\\n                !filplus.isCompliantRuleMaxReplicasPerSP(\\n                    uint16(alreadyStoredReplicasByWinner + 1)\\n                )\\n            ) {\\n                return false;\\n            }\\n\\n            uint256 uniqueCount = winners.countUniqueElements();\\n\\n            if (winners.isContains(candidate)) {\\n                uniqueCount++;\\n            }\\n\\n            if (\\n                !filplus.isCompliantRuleMinSPsPerDataset(\\n                    requirementReplicaCount,\\n                    uint16(winners.length),\\n                    uint16(uniqueCount)\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa95e612cf00004d5678af345501e21871339bfcb5747090b99eea0328447738c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/matching/library/MatchingTargetLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title Matching Target Library\\n/// @notice This library provides functions for managing targets.\\n/// @dev This library is used to manage the targets of matchings.\\nlibrary MatchingTargetLIB {\\n    /// @notice Get the cars of a matching.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    function _getCars(\\n        MatchingType.MatchingTarget storage self\\n    ) internal view returns (uint64[] memory) {\\n        return self.cars;\\n    }\\n\\n    /// @notice Get datasetId of matching.\\n    /// @dev This function is used to get dataset id of matching.\\n    function _getDatasetId(\\n        MatchingType.MatchingTarget storage self\\n    ) internal view returns (uint64) {\\n        return self.datasetId;\\n    }\\n\\n    /// @notice Get replica index of matching.\\n    /// @dev This function is used to get dataset's replica index of matching.\\n    function _getDatasetReplicaIndex(\\n        MatchingType.MatchingTarget storage self\\n    ) internal view returns (uint64) {\\n        return self.replicaIndex;\\n    }\\n\\n    /// @notice Push a car to matching.\\n    /// @dev This function is used to push a car to target of matching.\\n    function _pushCar(\\n        MatchingType.MatchingTarget storage self,\\n        uint64 _car\\n    ) internal {\\n        self.cars.push(_car);\\n    }\\n\\n    /// @notice Update cars and size of a matching target.\\n    /// @dev This function is used to update cars and size of target of matching.\\n    function _updateTargetCars(\\n        MatchingType.MatchingTarget storage self,\\n        uint64[] memory _cars,\\n        uint64 _size\\n    ) internal {\\n        for (uint64 i = 0; i < _cars.length; i++) {\\n            _pushCar(self, _cars[i]);\\n        }\\n        self.size += _size;\\n    }\\n}\\n\",\"keccak256\":\"0x4de0d332e03f97e55ab647693e7a794cf9e14ccd47877593ab72298851961c49\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n    error NotEnough(uint256 amount, uint256 append);\\n}\\n\",\"keccak256\":\"0x9bb103e0cf0c9cd5a9d200382cc51060a2494f41b38ce2fda1d5762dd9306b94\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/MatchingsEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary MatchingsEvents {\\n    /// @notice Declare events for external monitoring\\n\\n    // Event emitted when a matching is published\\n    event MatchingPublished(\\n        uint64 indexed matchingId,\\n        address indexed initiator\\n    );\\n\\n    // Event emitted when a matching is paused\\n    event MatchingPaused(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching's pause expires\\n    event MatchingPauseExpired(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching is resumed\\n    event MatchingResumed(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching is cancelled\\n    event MatchingCancelled(uint64 indexed _matchingId);\\n\\n    event MatchingClosed(uint64 indexed _matchingId);\\n\\n    // Event emitted when a matching has a winner\\n    event MatchingHasWinner(\\n        uint64 indexed _matchingId,\\n        address indexed _winner\\n    );\\n\\n    // Event emitted when a matching has no winner\\n    event MatchingNoWinner(uint64 indexed _matchingId);\\n\\n    // Event emitted when a bid is placed in a matching\\n    event MatchingBidPlaced(\\n        uint64 indexed _matchingId,\\n        address _bidder,\\n        uint256 _amount\\n    );\\n}\\n\",\"keccak256\":\"0xcbdfdd78049f4b0fefd1f0f64c3b83fa44b17036c6f357617bad8aa1c9942875\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract MatchingsModifiers is CarstoreModifiers {\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingInitiator(IMatchings _matchings, uint64 _matchingId) {\\n        address initiator = _matchings.getMatchingInitiator(_matchingId);\\n        if (initiator != msg.sender) {\\n            revert Errors.NotMatchingInitiator(\\n                _matchingId,\\n                initiator,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access based on matching state\\n    modifier onlyMatchingState(\\n        IMatchings _matchings,\\n        uint64 _matchingId,\\n        MatchingType.State _state\\n    ) {\\n        MatchingType.State matchingState = _matchings.getMatchingState(\\n            _matchingId\\n        );\\n        if (matchingState != _state) {\\n            revert Errors.InvalidMatchingState(\\n                _matchingId,\\n                _state,\\n                matchingState\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsTarget(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsTarget) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsBids(\\n        IMatchingsBids _matchingsBids,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsBids) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingContainsCar(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) {\\n        if (!_matchingsTarget.isMatchingContainsCar(_matchingId, _id)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2aaf11a9100face83692e5b9d6ab8b0440d05e4baa5a795ba6ac4a3c1f09d387\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/utils/array/ArrayLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary ArrayUint16LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint16[] memory _elements\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint16[] memory uniques = new uint16[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint16[] memory result = new uint16[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint16[] memory _elements,\\n        uint16 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint16[] memory _elements,\\n        uint16 _elementToRemove\\n    ) internal pure returns (uint256, uint16[] memory) {\\n        uint16[] memory updatedArray = new uint16[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint16[] memory result = new uint16[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint16[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint16[] memory _elements,\\n        uint16 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint32LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint32[] memory _elements\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint32[] memory uniques = new uint32[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint32[] memory result = new uint32[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint32[] memory _elements,\\n        uint32 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint32[] memory _elements,\\n        uint32 _elementToRemove\\n    ) internal pure returns (uint256, uint32[] memory) {\\n        uint32[] memory updatedArray = new uint32[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint32[] memory result = new uint32[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint32[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint32[] memory _elements,\\n        uint32 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayUint64LIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        uint64[] memory _elements\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint256 uniqueCount = 0;\\n        uint64[] memory uniques = new uint64[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        uint64[] memory result = new uint64[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        uint64[] memory _elements,\\n        uint64 _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        uint64[] memory _elements,\\n        uint64 _elementToRemove\\n    ) internal pure returns (uint256, uint64[] memory) {\\n        uint64[] memory updatedArray = new uint64[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        uint64[] memory result = new uint64[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        uint64[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        uint64[] memory _elements,\\n        uint64 target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\nlibrary ArrayAddressLIB {\\n    /// @notice Retrieve the count of unique elements in an array.\\n    function countUniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Retrieve the count of unique elements in an array and the array of unique elements after deduplication.\\n    /// @return The count of unique elements and the array of unique elements after deduplication.\\n    function uniqueElements(\\n        address[] memory _elements\\n    ) internal pure returns (uint256, address[] memory) {\\n        uint256 uniqueCount = 0;\\n        address[] memory uniques = new address[](_elements.length);\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueCount; j++) {\\n                if (_elements[i] == uniques[j]) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                uniques[uniqueCount] = _elements[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        // Create a new array with only unique elements\\n        address[] memory result = new address[](uniqueCount);\\n        for (uint256 i = 0; i < uniqueCount; i++) {\\n            result[i] = uniques[i];\\n        }\\n\\n        return (uniqueCount, result);\\n    }\\n\\n    /// @notice The number of times a particular element appears in an array.\\n    function countOccurrences(\\n        address[] memory _elements,\\n        address _target\\n    ) internal pure returns (uint256) {\\n        uint256 uniqueCount = 0;\\n\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == _target) {\\n                uniqueCount++;\\n            }\\n        }\\n\\n        return uniqueCount;\\n    }\\n\\n    /// @notice Calculate the number of elements remaining after removing a specific element from an array.\\n    /// @return The count of elements remaining.\\n    function countAfterRemoval(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256) {\\n        uint256 countRemaining = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                countRemaining++;\\n            }\\n        }\\n        return countRemaining;\\n    }\\n\\n    /// @notice Remove a specific element from an array.\\n    /// @return The modified array with the specified element removed.\\n    function removeElement(\\n        address[] memory _elements,\\n        address _elementToRemove\\n    ) internal pure returns (uint256, address[] memory) {\\n        address[] memory updatedArray = new address[](_elements.length);\\n\\n        uint256 newSize = 0;\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] != _elementToRemove) {\\n                updatedArray[newSize] = _elements[i];\\n                newSize++;\\n            }\\n        }\\n\\n        // Create a new array with only the elements that are not equal to _elementToRemove\\n        address[] memory result = new address[](newSize);\\n        for (uint256 i = 0; i < newSize; i++) {\\n            result[i] = updatedArray[i];\\n        }\\n\\n        return (newSize, result);\\n    }\\n\\n    /// @notice Check if an array has duplicate elements.\\n    /// @return True if there are duplicates, false otherwise.\\n    function hasDuplicates(\\n        address[] memory _elements\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            for (uint256 j = i + 1; j < _elements.length; j++) {\\n                if (_elements[i] == _elements[j]) {\\n                    return true; // Found a duplicate element\\n                }\\n            }\\n        }\\n        return false; // No duplicates found\\n    }\\n\\n    /// @notice Check if a specified element exists in the array.\\n    function isContains(\\n        address[] memory _elements,\\n        address target\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            if (_elements[i] == target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xa7e0795c087c5270c3af404ed45be0762fed1a09eea5ee547bd10fb76708d98b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        CollateralNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 client; // Filecoin actor id of the dataset's client.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x0eea4527c3d5df919e552d99d728ad823427974e4e01944efc8aadcf3744773b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0x3b6918e967adea47fceea5d699a40f86c24c9417379cd387071ee96bb246f7dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516134d261004c60003960008181610b8301528181610bc301528181610f8101528181610fc1015261103d01526134d26000f3fe6080604052600436106101105760003560e01c80630382f41d1461011557806307571721146101375780631fe162e51461016d578063358764761461019a5780633659cfe6146101ba57806340f7f10b146101da57806341558943146102075780634f1ef2861461023457806352d1902d146102475780636ad81d62146102695780637da15ea41461029657806383587b9d146102b6578063840febd9146102d65780638d4861fd146102f65780639aa023d114610327578063a5e7d67814610347578063aaf10f4214610367578063ab2d10f714610389578063b3c21e88146103a9578063bbf83674146103c9578063c95d6fa9146103e9578063dd8fff9714610409578063f210e02b14610429575b600080fd5b34801561012157600080fd5b506101356101303660046122d0565b610449565b005b34801561014357600080fd5b5061015761015236600461237c565b6107a1565b60405161016491906123a9565b60405180910390f35b34801561017957600080fd5b5061018d6101883660046123b7565b6107ca565b604051610164919061248d565b3480156101a657600080fd5b506101356101b53660046124c9565b610a2e565b3480156101c657600080fd5b506101356101d5366004612568565b610b79565b3480156101e657600080fd5b506101fa6101f536600461237c565b610c41565b6040516101649190612589565b34801561021357600080fd5b506102276102223660046125af565b610c71565b604051610164919061263c565b6101356102423660046126d9565b610f77565b34801561025357600080fd5b5061025c611030565b604051610164919061272c565b34801561027557600080fd5b50606c54610289906001600160a01b031681565b6040516101649190612772565b3480156102a257600080fd5b506102276102b1366004612780565b61108d565b3480156102c257600080fd5b506102276102d13660046127b3565b611113565b3480156102e257600080fd5b50606d54610289906001600160a01b031681565b34801561030257600080fd5b5061031661031136600461237c565b61144e565b60405161016495949392919061282a565b34801561033357600080fd5b50606b54610289906001600160a01b031681565b34801561035357600080fd5b5061018d61036236600461237c565b61152d565b34801561037357600080fd5b5061037c611551565b604051610164919061287c565b34801561039557600080fd5b50606a54610289906001600160a01b031681565b3480156103b557600080fd5b506101fa6103c436600461237c565b611560565b3480156103d557600080fd5b506101356103e436600461288a565b611578565b3480156103f557600080fd5b506102276104043660046128ac565b61163c565b34801561041557600080fd5b50606e54610289906001600160a01b031681565b34801561043557600080fd5b506101356104443660046128e3565b6116a8565b606754604051632474521560e21b81526001600160a01b03909116906000805160206134168339815191529082906391d148549061048d908490339060040161294e565b602060405180830381865afa1580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce9190612974565b6104f35760405162461bcd60e51b81526004016104ea906129c9565b60405180910390fd5b606d5460405163e19edda160e01b81526001600160a01b03909116908890600090839063e19edda19061052a908590600401612589565b602060405180830381865afa158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b91906129e4565b90506001600160a01b038116331461059c5781813360405163bb5a686560e01b81526004016104ea93929190612a05565b6001600160401b038a166000908152606560205260408120906105bf8a8a6107ca565b60695460405163309d8e3f60e21b81529192506000916001600160a01b039091169063c27638fc906105f590859060040161248d565b602060405180830381865afa92505050801561062e575060408051601f3d908101601f1916820190925261062b91810190612a38565b60015b61064a5760405162461bcd60e51b81526004016104ea90612a84565b905082546001600160401b03908116908d16146106795760405162461bcd60e51b81526004016104ea90612abd565b6106848383836118cd565b60028301546106b3908d9084908490600160401b810460ff1690600160481b90046001600160401b0316610c71565b6106cf5760405162461bcd60e51b81526004016104ea90612af2565b8815610792576106de8d6119ab565b606d60009054906101000a90046001600160a01b03166001600160a01b03166352ffae6b8e6040518263ffffffff1660e01b815260040161071f9190612589565b600060405180830381600087803b15801561073957600080fd5b505af115801561074d573d6000803e3d6000fd5b50505050336001600160a01b03168d6001600160401b03167fc1ca89de71e6b0a8b9533756c5ce88f0c6980c359077c799b6e750c04a842c3560405160405180910390a35b50505050505050505050505050565b6001600160401b0316600090815260656020526040902060020154600160881b900461ffff1690565b606081518351146107ed5760405162461bcd60e51b81526004016104ea90612b30565b6000805b8451816001600160401b031610156108f25783816001600160401b03168151811061081e5761081e612b40565b60200260200101516001600160401b031685826001600160401b03168151811061084a5761084a612b40565b60200260200101516001600160401b031611156108795760405162461bcd60e51b81526004016104ea90612b8a565b84816001600160401b03168151811061089457610894612b40565b602002602001015184826001600160401b0316815181106108b7576108b7612b40565b60200260200101516108c99190612bb0565b6108d4906001612be3565b6108de9083612be3565b9150806108ea81612c16565b9150506107f1565b50600080826001600160401b03166001600160401b03811115610917576109176121b7565b604051908082528060200260200182016040528015610940578160200160208202803683370190505b50905060005b8651816001600160401b03161015610a2257600087826001600160401b03168151811061097557610975612b40565b602002602001015190505b86826001600160401b03168151811061099b5761099b612b40565b60200260200101516001600160401b0316816001600160401b031611610a0f578083856001600160401b0316815181106109d7576109d7612b40565b6001600160401b0390921660209283029190910190910152836109f981612c16565b9450508080610a0790612c16565b915050610980565b5080610a1a81612c16565b915050610946565b50925050505b92915050565b600054610100900460ff1615808015610a4e5750600054600160ff909116105b80610a6f5750610a5d30611a7f565b158015610a6f575060005460ff166001145b610a8b5760405162461bcd60e51b81526004016104ea90612c8e565b6000805460ff191660011790558015610aae576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038b8116919091179092556067805482168a8416179055606880548216898416179055606980548216888416179055606a80548216878416179055606b80548216868416179055606c8054909116918416919091179055610b24611a8e565b8015610b6f576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610b6690600190612cb2565b60405180910390a15b5050505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bc15760405162461bcd60e51b81526004016104ea90612cf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bf3611ab7565b6001600160a01b031614610c195760405162461bcd60e51b81526004016104ea90612d3e565b610c2281611ad3565b60408051600080825260208201909252610c3e91839190611b6c565b50565b6001600160401b0381166000908152606560205260408120610c6a81546001600160401b031690565b9392505050565b60006006606a546040516315b536bd60e11b81526001600160a01b0390911690632b6a6d7a90610ca5908a90600401612589565b602060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190612d66565b6006811115610cf757610cf76127e6565b14610d145760405162461bcd60e51b81526004016104ea90612db8565b606c54604051631026a71360e01b81526001600160a01b0390911690631026a71390610d469089908990600401612dc8565b602060405180830381865afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190612974565b610da35760405162461bcd60e51b81526004016104ea90612e0c565b6000846001600160401b031611610dcc5760405162461bcd60e51b81526004016104ea90612e40565b6000836001811115610de057610de06127e6565b03610f6b57600080610df18461144e565b50935050925050600180811115610e0a57610e0a6127e6565b816001811115610e1c57610e1c6127e6565b14610e395760405162461bcd60e51b81526004016104ea90612e81565b606c54604051631026a71360e01b81526001600160a01b0390911690631026a71390610e6b908b908690600401612dc8565b602060405180830381865afa158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac9190612974565b610ec85760405162461bcd60e51b81526004016104ea90612ec2565b606d54604051631a569da560e11b81526005916001600160a01b0316906334ad3b4a90610ef9908890600401612589565b602060405180830381865afa158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a9190612eea565b6007811115610f4b57610f4b6127e6565b14610f685760405162461bcd60e51b81526004016104ea90612f3d565b50505b50600195945050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fbf5760405162461bcd60e51b81526004016104ea90612cf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff1611ab7565b6001600160a01b0316146110175760405162461bcd60e51b81526004016104ea90612d3e565b61102082611ad3565b61102c82826001611b6c565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461107a5760405162461bcd60e51b81526004016104ea90612fa2565b5060008051602061345683398151915290565b6000806110998461152d565b905060005b8151816001600160401b031610156111085781816001600160401b0316815181106110cb576110cb612b40565b60200260200101516001600160401b0316846001600160401b0316036110f657600192505050610a28565b8061110081612c16565b91505061109e565b506000949350505050565b6001600160401b0382166000908152606560205260408120816111358561152d565b606b5483546040516314a41d8560e01b81529293506000926001600160a01b03909216916314a41d8591611177916001600160401b0390911690600401612589565b602060405180830381865afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b89190612fbd565b905060005b8251816001600160401b0316101561144157606e5460695484516000926001600160a01b0390811692634fc780e89291169063310805429088906001600160401b03881690811061121057611210612b40565b60200260200101516040518263ffffffff1660e01b81526004016112349190612589565b600060405180830381865afa158015611251573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112799190810190613053565b6040518263ffffffff1660e01b8152600401611295919061248d565b600060405180830381865afa1580156112b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112da9190810190613102565b905060006112e88289611c4e565b6068549091506001600160a01b031663037864d261130783600161313c565b6040518263ffffffff1660e01b815260040161132391906123a9565b602060405180830381865afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113649190612974565b6113775760009650505050505050610a28565b600061138283611cb6565b905061138e838a611df8565b156113a1578061139d8161314f565b9150505b6068548351604051632cccebc560e21b81526001600160a01b039092169163b333af14916113d6918991908690600401613162565b602060405180830381865afa1580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114179190612974565b61142b576000975050505050505050610a28565b505050808061143990612c16565b9150506111bd565b5060019695505050505050565b6001600160401b038082166000908152606560209081526040808320805460028201546001830180548551818802810188019096528086529697606097899788978897968416958085169460ff600160401b83041694600160481b909204169286919083018282801561151257602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b0316815260200190600801906020826007010492830192600103820291508084116114cf5790505b50505050509350955095509550955095505091939590929450565b6001600160401b0381166000908152606560205260409020606090610c6a81611e5d565b600061155b611ab7565b905090565b60008061156c8361144e565b50909695505050505050565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d14854906115af908490339060040161294e565b602060405180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f09190612974565b61160c5760405162461bcd60e51b81526004016104ea906129c9565b5050606d80546001600160a01b039384166001600160a01b031991821617909155606e8054929093169116179055565b6000805b8251816001600160401b0316101561169e5761167e8484836001600160401b03168151811061167157611671612b40565b602002602001015161108d565b61168c576000915050610a28565b8061169681612c16565b915050611640565b5060019392505050565b606754604051632474521560e21b81526001600160a01b03909116906000805160206134168339815191529082906391d14854906116ec908490339060040161294e565b602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190612974565b6117495760405162461bcd60e51b81526004016104ea906129c9565b606d5460405163e19edda160e01b81526001600160a01b03909116908890600090839063e19edda190611780908590600401612589565b602060405180830381865afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c191906129e4565b90506001600160a01b03811633146117f25781813360405163bb5a686560e01b81526004016104ea93929190612a05565b6001600160401b038a8116600090815260656020908152604080832080546001600160401b031916948e16949094178455805192835290820190819052905161183f9160018401916120b5565b506002810180546001600160401b0319811682558a91906001600160481b031916600160401b836001811115611877576118776127e6565b0217905550600201805461ffff909716600160881b0261ffff60881b196001600160401b03909916600160481b0298909816600160481b600160981b031990971696909617969096179094555050505050505050565b60005b8251816001600160401b031610156119615761194f8484836001600160401b03168151811061190157611901612b40565b6020026020010151600191820180549283018155600090815260209020600483040180546001600160401b0392831660086003909516949094026101000a9384029290930219909216179055565b8061195981612c16565b9150506118d0565b506002830180548291906000906119829084906001600160401b0316612be3565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550505050565b60006119b68261152d565b905060006119c3836107a1565b905060005b8251816001600160401b03161015611a795760695483516001600160a01b03909116906313083f869085906001600160401b038516908110611a0c57611a0c612b40565b602002602001015186856040518463ffffffff1660e01b8152600401611a349392919061318a565b600060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b505050508080611a7190612c16565b9150506119c8565b50505050565b6001600160a01b03163b151590565b600054610100900460ff16611ab55760405162461bcd60e51b81526004016104ea906131ed565b565b600080516020613456833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490611b0a908490339060040161294e565b602060405180830381865afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b9190612974565b611b675760405162461bcd60e51b81526004016104ea906129c9565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611b9f57611b6783611eeb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611bf9575060408051601f3d908101601f19168201909252611bf69181019061320e565b60015b611c155760405162461bcd60e51b81526004016104ea9061327a565b6000805160206134568339815191528114611c425760405162461bcd60e51b81526004016104ea906132d0565b50611b67838383611f3f565b600080805b8451811015611cae57836001600160a01b0316858281518110611c7857611c78612b40565b60200260200101516001600160a01b031603611c9c5781611c988161314f565b9250505b80611ca68161314f565b915050611c53565b509392505050565b60008060009050600083516001600160401b03811115611cd857611cd86121b7565b604051908082528060200260200182016040528015611d01578160200160208202803683370190505b50905060005b8451811015611def57600160005b84811015611d8357838181518110611d2f57611d2f612b40565b60200260200101516001600160a01b0316878481518110611d5257611d52612b40565b60200260200101516001600160a01b031603611d715760009150611d83565b80611d7b8161314f565b915050611d15565b508015611ddc57858281518110611d9c57611d9c612b40565b6020026020010151838581518110611db657611db6612b40565b6001600160a01b039092166020928302919091019091015283611dd88161314f565b9450505b5080611de78161314f565b915050611d07565b50909392505050565b6000805b8351811015611e5357826001600160a01b0316848281518110611e2157611e21612b40565b60200260200101516001600160a01b031603611e41576001915050610a28565b80611e4b8161314f565b915050611dfc565b5060009392505050565b606081600101805480602002602001604051908101604052809291908181526020018280548015611edf57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b031681526020019060080190602082600701049283019260010382029150808411611e9c5790505b50505050509050919050565b611ef481611a7f565b611f105760405162461bcd60e51b81526004016104ea9061332a565b60008051602061345683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611f4883611f64565b600082511180611f555750805b15611b6757611a798383611fa4565b611f6d81611eeb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610c6a8383604051806060016040528060278152602001613476602791396060600080856001600160a01b031685604051611fe19190613380565b600060405180830381855af49150503d806000811461201c576040519150601f19603f3d011682016040523d82523d6000602084013e612021565b606091505b50915091506120328683838761203c565b9695505050505050565b606083156120795782516000036120725761205685611a7f565b6120725760405162461bcd60e51b81526004016104ea906133c0565b5081612083565b612083838361208b565b949350505050565b81511561209b5781518083602001fd5b8060405162461bcd60e51b81526004016104ea9190613404565b8280548282559060005260206000209060030160049004810192821561215d5791602002820160005b8382111561212857835183826101000a8154816001600160401b0302191690836001600160401b0316021790555092602001926008016020816007010492830192600103026120de565b801561215b5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302612128565b505b5061216992915061216d565b5090565b5b80821115612169576000815560010161216e565b6001600160401b031690565b61219781612182565b8114610c3e57600080fd5b8035610a288161218e565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6121d6826121ad565b81018181106001600160401b03821117156121f3576121f36121b7565b6040525050565b600061220560405190565b905061221182826121cd565b919050565b60006001600160401b0382111561222f5761222f6121b7565b5060209081020190565b600061224c61224784612216565b6121fa565b8381529050602080820190840283018581111561226b5761226b600080fd5b835b8181101561228f578061228088826121a2565b8452506020928301920161226d565b5050509392505050565b600082601f8301126122ad576122ad600080fd5b8135612083848260208601612239565b801515612197565b8035610a28816122bd565b600080600080600060a086880312156122eb576122eb600080fd5b60006122f788886121a2565b9550506020612308888289016121a2565b94505060408601356001600160401b0381111561232757612327600080fd5b61233388828901612299565b93505060608601356001600160401b0381111561235257612352600080fd5b61235e88828901612299565b925050608061236f888289016122c5565b9150509295509295909350565b60006020828403121561239157612391600080fd5b600061208384846121a2565b61ffff81165b82525050565b60208101610a28828461239d565b600080604083850312156123cd576123cd600080fd5b82356001600160401b038111156123e6576123e6600080fd5b6123f285828601612299565b92505060208301356001600160401b0381111561241157612411600080fd5b61241d85828601612299565b9150509250929050565b6123a381612182565b600061243c8383612427565b505060200190565b600061244e825190565b80845260209384019383018060005b838110156124825781516124718882612430565b97506020830192505060010161245d565b509495945050505050565b60208082528101610c6a8184612444565b6001600160a01b031690565b6000610a288261249e565b612197816124aa565b8035610a28816124b5565b600080600080600080600060e0888a0312156124e7576124e7600080fd5b60006124f38a8a6124be565b97505060206125048a828b016124be565b96505060406125158a828b016124be565b95505060606125268a828b016124be565b94505060806125378a828b016124be565b93505060a06125488a828b016124be565b92505060c06125598a828b016124be565b91505092959891949750929550565b60006020828403121561257d5761257d600080fd5b600061208384846124be565b60208101610a288284612427565b60028110610c3e57600080fd5b8035610a2881612597565b600080600080600060a086880312156125ca576125ca600080fd5b60006125d688886121a2565b95505060208601356001600160401b038111156125f5576125f5600080fd5b61260188828901612299565b9450506040612612888289016121a2565b9350506060612623888289016125a4565b925050608061236f888289016121a2565b8015156123a3565b60208101610a288284612634565b60006001600160401b03821115612663576126636121b7565b61266c826121ad565b60200192915050565b82818337506000910152565b600061268f6122478461264a565b9050828152602081018484840111156126aa576126aa600080fd5b611cae848285612675565b600082601f8301126126c9576126c9600080fd5b8135612083848260208601612681565b600080604083850312156126ef576126ef600080fd5b60006126fb85856124be565b92505060208301356001600160401b0381111561271a5761271a600080fd5b61241d858286016126b5565b806123a3565b60208101610a288284612726565b6000610a2861274e61274b8461249e565b90565b61249e565b6000610a288261273a565b6000610a2882612753565b6123a38161275e565b60208101610a288284612769565b6000806040838503121561279657612796600080fd5b60006127a285856121a2565b925050602061241d858286016121a2565b600080604083850312156127c9576127c9600080fd5b60006127d585856121a2565b925050602061241d858286016124be565b634e487b7160e01b600052602160045260246000fd5b60028110610c3e57610c3e6127e6565b80612211816127fc565b6000610a288261280c565b6123a381612816565b60a081016128388288612427565b818103602083015261284a8187612444565b90506128596040830186612427565b6128666060830185612821565b6120326080830184612427565b6123a3816124aa565b60208101610a288284612873565b600080604083850312156128a0576128a0600080fd5b60006127d585856124be565b600080604083850312156128c2576128c2600080fd5b60006123f285856121a2565b61ffff8116612197565b8035610a28816128ce565b600080600080600060a086880312156128fe576128fe600080fd5b600061290a88886121a2565b955050602061291b888289016121a2565b945050604061292c888289016125a4565b935050606061293d888289016121a2565b925050608061236f888289016128d8565b6040810161295c8285612726565b610c6a6020830184612873565b8051610a28816122bd565b60006020828403121561298957612989600080fd5b60006120838484612969565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b815291505b5060200190565b60208082528101610a2881612995565b8051610a28816124b5565b6000602082840312156129f9576129f9600080fd5b600061208384846129d9565b60608101612a138286612427565b612a206020830185612873565b6120836040830184612873565b8051610a288161218e565b600060208284031215612a4d57612a4d600080fd5b60006120838484612a2d565b601481526000602082017311d95d0818d85c9cc81cda5e994819985a5b195960621b815291506129c2565b60208082528101610a2881612a59565b60128152600060208201711a5b9d985b1a590819185d185cd95d081a5960721b815291506129c2565b60208082528101610a2881612a94565b600e81526000602082016d15185c99d95d081a5b9d985b1a5960921b815291506129c2565b60208082528101610a2881612acd565b60178152600060208201760e6e8c2e4e840c2dcc840cadcc840dcdee840dac2e8c6d604b1b815291506129c2565b60208082528101610a2881612b02565b634e487b7160e01b600052603260045260246000fd5b601e81526000602082017f7374617274206d7573742062652067726561746572207468616e20656e640000815291506129c2565b60208082528101610a2881612b56565b634e487b7160e01b600052601160045260246000fd5b6000612bbb82612182565b9150612bc683612182565b9250508181036001600160401b03811115610a2857610a28612b9a565b6000612bee82612182565b9150612bf983612182565b9250508082016001600160401b03811115610a2857610a28612b9a565b6000612c2182612182565b91506001600160401b038203612c3957612c39612b9a565b5060010190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b60208082528101610a2881612c40565b600060ff8216610a28565b6123a381612c9e565b60208101610a288284612ca9565b602c815260006020820160008051602061343683398151915281526b19195b1959d85d1958d85b1b60a21b60208201529150612c87565b60208082528101610a2881612cc0565b602c815260006020820160008051602061343683398151915281526b6163746976652070726f787960a01b60208201529150612c87565b60208082528101610a2881612d07565b60078110610c3e57600080fd5b8051610a2881612d4e565b600060208284031215612d7b57612d7b600080fd5b60006120838484612d5b565b601a815260006020820179646174617365744964206973206e6f7420617070726f7665642160301b815291506129c2565b60208082528101610a2881612d87565b60408101612dd68285612427565b81810360208301526120838184612444565b600d81526000602082016c496e76616c696420636964732160981b815291506129c2565b60208082528101610a2881612de8565b600d81526000602082016c496e76616c69642073697a652160981b815291506129c2565b60208082528101610a2881612e1c565b601a8152600060208201794e6565642061206173736f636961746564206d61746368696e6760301b815291506129c2565b60208082528101610a2881612e50565b601a815260006020820179496e76616c6964206d617070696e672066696c6573206361727360301b815291506129c2565b60208082528101610a2881612e91565b60088110610c3e57600080fd5b8051610a2881612ed2565b600060208284031215612eff57612eff600080fd5b60006120838484612edf565b601b81526000602082017a646174617365744964206973206e6f7420636f6d706c657465642160281b815291506129c2565b60208082528101610a2881612f0b565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612c87565b60208082528101610a2881612f4d565b8051610a28816128ce565b600060208284031215612fd257612fd2600080fd5b60006120838484612fb2565b6000612fec61224784612216565b8381529050602080820190840283018581111561300b5761300b600080fd5b835b8181101561228f57806130208882612a2d565b8452506020928301920161300d565b600082601f83011261304357613043600080fd5b8151612083848260208601612fde565b60006020828403121561306857613068600080fd5b81516001600160401b0381111561308157613081600080fd5b6120838482850161302f565b600061309b61224784612216565b838152905060208082019084028301858111156130ba576130ba600080fd5b835b8181101561228f57806130cf88826129d9565b845250602092830192016130bc565b600082601f8301126130f2576130f2600080fd5b815161208384826020860161308d565b60006020828403121561311757613117600080fd5b81516001600160401b0381111561313057613130600080fd5b612083848285016130de565b80820180821115610a2857610a28612b9a565b60006000198203612c3957612c39612b9a565b60608101613170828661239d565b61317d602083018561239d565b612083604083018461239d565b606081016131988286612427565b61317d6020830185612427565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612c87565b60208082528101610a28816131a5565b80612197565b8051610a28816131fd565b60006020828403121561322357613223600080fd5b60006120838484613203565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612c87565b60208082528101610a288161322f565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612c87565b60208082528101610a288161328a565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612c87565b60208082528101610a28816132e0565b60005b8381101561335557818101518382015260200161333d565b50506000910152565b6000613368825190565b61337681856020860161333a565b9290920192915050565b6000610c6a828461335e565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506129c2565b60208082528101610a288161338c565b60006133da825190565b8084526020840193506133f181856020860161333a565b6133fa816121ad565b9093019392505050565b60208082528101610c6a81846133d056fe2e7a99dcc48463ba57667732f1d19d96afa51e11db099e5c9c708076a0a0804046756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e3c0ecd3382cfde874bfaa7b51db2b029511ae83b0d268152344709c58a49fb264736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101105760003560e01c80630382f41d1461011557806307571721146101375780631fe162e51461016d578063358764761461019a5780633659cfe6146101ba57806340f7f10b146101da57806341558943146102075780634f1ef2861461023457806352d1902d146102475780636ad81d62146102695780637da15ea41461029657806383587b9d146102b6578063840febd9146102d65780638d4861fd146102f65780639aa023d114610327578063a5e7d67814610347578063aaf10f4214610367578063ab2d10f714610389578063b3c21e88146103a9578063bbf83674146103c9578063c95d6fa9146103e9578063dd8fff9714610409578063f210e02b14610429575b600080fd5b34801561012157600080fd5b506101356101303660046122d0565b610449565b005b34801561014357600080fd5b5061015761015236600461237c565b6107a1565b60405161016491906123a9565b60405180910390f35b34801561017957600080fd5b5061018d6101883660046123b7565b6107ca565b604051610164919061248d565b3480156101a657600080fd5b506101356101b53660046124c9565b610a2e565b3480156101c657600080fd5b506101356101d5366004612568565b610b79565b3480156101e657600080fd5b506101fa6101f536600461237c565b610c41565b6040516101649190612589565b34801561021357600080fd5b506102276102223660046125af565b610c71565b604051610164919061263c565b6101356102423660046126d9565b610f77565b34801561025357600080fd5b5061025c611030565b604051610164919061272c565b34801561027557600080fd5b50606c54610289906001600160a01b031681565b6040516101649190612772565b3480156102a257600080fd5b506102276102b1366004612780565b61108d565b3480156102c257600080fd5b506102276102d13660046127b3565b611113565b3480156102e257600080fd5b50606d54610289906001600160a01b031681565b34801561030257600080fd5b5061031661031136600461237c565b61144e565b60405161016495949392919061282a565b34801561033357600080fd5b50606b54610289906001600160a01b031681565b34801561035357600080fd5b5061018d61036236600461237c565b61152d565b34801561037357600080fd5b5061037c611551565b604051610164919061287c565b34801561039557600080fd5b50606a54610289906001600160a01b031681565b3480156103b557600080fd5b506101fa6103c436600461237c565b611560565b3480156103d557600080fd5b506101356103e436600461288a565b611578565b3480156103f557600080fd5b506102276104043660046128ac565b61163c565b34801561041557600080fd5b50606e54610289906001600160a01b031681565b34801561043557600080fd5b506101356104443660046128e3565b6116a8565b606754604051632474521560e21b81526001600160a01b03909116906000805160206134168339815191529082906391d148549061048d908490339060040161294e565b602060405180830381865afa1580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce9190612974565b6104f35760405162461bcd60e51b81526004016104ea906129c9565b60405180910390fd5b606d5460405163e19edda160e01b81526001600160a01b03909116908890600090839063e19edda19061052a908590600401612589565b602060405180830381865afa158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b91906129e4565b90506001600160a01b038116331461059c5781813360405163bb5a686560e01b81526004016104ea93929190612a05565b6001600160401b038a166000908152606560205260408120906105bf8a8a6107ca565b60695460405163309d8e3f60e21b81529192506000916001600160a01b039091169063c27638fc906105f590859060040161248d565b602060405180830381865afa92505050801561062e575060408051601f3d908101601f1916820190925261062b91810190612a38565b60015b61064a5760405162461bcd60e51b81526004016104ea90612a84565b905082546001600160401b03908116908d16146106795760405162461bcd60e51b81526004016104ea90612abd565b6106848383836118cd565b60028301546106b3908d9084908490600160401b810460ff1690600160481b90046001600160401b0316610c71565b6106cf5760405162461bcd60e51b81526004016104ea90612af2565b8815610792576106de8d6119ab565b606d60009054906101000a90046001600160a01b03166001600160a01b03166352ffae6b8e6040518263ffffffff1660e01b815260040161071f9190612589565b600060405180830381600087803b15801561073957600080fd5b505af115801561074d573d6000803e3d6000fd5b50505050336001600160a01b03168d6001600160401b03167fc1ca89de71e6b0a8b9533756c5ce88f0c6980c359077c799b6e750c04a842c3560405160405180910390a35b50505050505050505050505050565b6001600160401b0316600090815260656020526040902060020154600160881b900461ffff1690565b606081518351146107ed5760405162461bcd60e51b81526004016104ea90612b30565b6000805b8451816001600160401b031610156108f25783816001600160401b03168151811061081e5761081e612b40565b60200260200101516001600160401b031685826001600160401b03168151811061084a5761084a612b40565b60200260200101516001600160401b031611156108795760405162461bcd60e51b81526004016104ea90612b8a565b84816001600160401b03168151811061089457610894612b40565b602002602001015184826001600160401b0316815181106108b7576108b7612b40565b60200260200101516108c99190612bb0565b6108d4906001612be3565b6108de9083612be3565b9150806108ea81612c16565b9150506107f1565b50600080826001600160401b03166001600160401b03811115610917576109176121b7565b604051908082528060200260200182016040528015610940578160200160208202803683370190505b50905060005b8651816001600160401b03161015610a2257600087826001600160401b03168151811061097557610975612b40565b602002602001015190505b86826001600160401b03168151811061099b5761099b612b40565b60200260200101516001600160401b0316816001600160401b031611610a0f578083856001600160401b0316815181106109d7576109d7612b40565b6001600160401b0390921660209283029190910190910152836109f981612c16565b9450508080610a0790612c16565b915050610980565b5080610a1a81612c16565b915050610946565b50925050505b92915050565b600054610100900460ff1615808015610a4e5750600054600160ff909116105b80610a6f5750610a5d30611a7f565b158015610a6f575060005460ff166001145b610a8b5760405162461bcd60e51b81526004016104ea90612c8e565b6000805460ff191660011790558015610aae576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038b8116919091179092556067805482168a8416179055606880548216898416179055606980548216888416179055606a80548216878416179055606b80548216868416179055606c8054909116918416919091179055610b24611a8e565b8015610b6f576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610b6690600190612cb2565b60405180910390a15b5050505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bc15760405162461bcd60e51b81526004016104ea90612cf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bf3611ab7565b6001600160a01b031614610c195760405162461bcd60e51b81526004016104ea90612d3e565b610c2281611ad3565b60408051600080825260208201909252610c3e91839190611b6c565b50565b6001600160401b0381166000908152606560205260408120610c6a81546001600160401b031690565b9392505050565b60006006606a546040516315b536bd60e11b81526001600160a01b0390911690632b6a6d7a90610ca5908a90600401612589565b602060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190612d66565b6006811115610cf757610cf76127e6565b14610d145760405162461bcd60e51b81526004016104ea90612db8565b606c54604051631026a71360e01b81526001600160a01b0390911690631026a71390610d469089908990600401612dc8565b602060405180830381865afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190612974565b610da35760405162461bcd60e51b81526004016104ea90612e0c565b6000846001600160401b031611610dcc5760405162461bcd60e51b81526004016104ea90612e40565b6000836001811115610de057610de06127e6565b03610f6b57600080610df18461144e565b50935050925050600180811115610e0a57610e0a6127e6565b816001811115610e1c57610e1c6127e6565b14610e395760405162461bcd60e51b81526004016104ea90612e81565b606c54604051631026a71360e01b81526001600160a01b0390911690631026a71390610e6b908b908690600401612dc8565b602060405180830381865afa158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac9190612974565b610ec85760405162461bcd60e51b81526004016104ea90612ec2565b606d54604051631a569da560e11b81526005916001600160a01b0316906334ad3b4a90610ef9908890600401612589565b602060405180830381865afa158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a9190612eea565b6007811115610f4b57610f4b6127e6565b14610f685760405162461bcd60e51b81526004016104ea90612f3d565b50505b50600195945050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fbf5760405162461bcd60e51b81526004016104ea90612cf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff1611ab7565b6001600160a01b0316146110175760405162461bcd60e51b81526004016104ea90612d3e565b61102082611ad3565b61102c82826001611b6c565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461107a5760405162461bcd60e51b81526004016104ea90612fa2565b5060008051602061345683398151915290565b6000806110998461152d565b905060005b8151816001600160401b031610156111085781816001600160401b0316815181106110cb576110cb612b40565b60200260200101516001600160401b0316846001600160401b0316036110f657600192505050610a28565b8061110081612c16565b91505061109e565b506000949350505050565b6001600160401b0382166000908152606560205260408120816111358561152d565b606b5483546040516314a41d8560e01b81529293506000926001600160a01b03909216916314a41d8591611177916001600160401b0390911690600401612589565b602060405180830381865afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b89190612fbd565b905060005b8251816001600160401b0316101561144157606e5460695484516000926001600160a01b0390811692634fc780e89291169063310805429088906001600160401b03881690811061121057611210612b40565b60200260200101516040518263ffffffff1660e01b81526004016112349190612589565b600060405180830381865afa158015611251573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112799190810190613053565b6040518263ffffffff1660e01b8152600401611295919061248d565b600060405180830381865afa1580156112b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112da9190810190613102565b905060006112e88289611c4e565b6068549091506001600160a01b031663037864d261130783600161313c565b6040518263ffffffff1660e01b815260040161132391906123a9565b602060405180830381865afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113649190612974565b6113775760009650505050505050610a28565b600061138283611cb6565b905061138e838a611df8565b156113a1578061139d8161314f565b9150505b6068548351604051632cccebc560e21b81526001600160a01b039092169163b333af14916113d6918991908690600401613162565b602060405180830381865afa1580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114179190612974565b61142b576000975050505050505050610a28565b505050808061143990612c16565b9150506111bd565b5060019695505050505050565b6001600160401b038082166000908152606560209081526040808320805460028201546001830180548551818802810188019096528086529697606097899788978897968416958085169460ff600160401b83041694600160481b909204169286919083018282801561151257602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b0316815260200190600801906020826007010492830192600103820291508084116114cf5790505b50505050509350955095509550955095505091939590929450565b6001600160401b0381166000908152606560205260409020606090610c6a81611e5d565b600061155b611ab7565b905090565b60008061156c8361144e565b50909695505050505050565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d14854906115af908490339060040161294e565b602060405180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f09190612974565b61160c5760405162461bcd60e51b81526004016104ea906129c9565b5050606d80546001600160a01b039384166001600160a01b031991821617909155606e8054929093169116179055565b6000805b8251816001600160401b0316101561169e5761167e8484836001600160401b03168151811061167157611671612b40565b602002602001015161108d565b61168c576000915050610a28565b8061169681612c16565b915050611640565b5060019392505050565b606754604051632474521560e21b81526001600160a01b03909116906000805160206134168339815191529082906391d14854906116ec908490339060040161294e565b602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190612974565b6117495760405162461bcd60e51b81526004016104ea906129c9565b606d5460405163e19edda160e01b81526001600160a01b03909116908890600090839063e19edda190611780908590600401612589565b602060405180830381865afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c191906129e4565b90506001600160a01b03811633146117f25781813360405163bb5a686560e01b81526004016104ea93929190612a05565b6001600160401b038a8116600090815260656020908152604080832080546001600160401b031916948e16949094178455805192835290820190819052905161183f9160018401916120b5565b506002810180546001600160401b0319811682558a91906001600160481b031916600160401b836001811115611877576118776127e6565b0217905550600201805461ffff909716600160881b0261ffff60881b196001600160401b03909916600160481b0298909816600160481b600160981b031990971696909617969096179094555050505050505050565b60005b8251816001600160401b031610156119615761194f8484836001600160401b03168151811061190157611901612b40565b6020026020010151600191820180549283018155600090815260209020600483040180546001600160401b0392831660086003909516949094026101000a9384029290930219909216179055565b8061195981612c16565b9150506118d0565b506002830180548291906000906119829084906001600160401b0316612be3565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550505050565b60006119b68261152d565b905060006119c3836107a1565b905060005b8251816001600160401b03161015611a795760695483516001600160a01b03909116906313083f869085906001600160401b038516908110611a0c57611a0c612b40565b602002602001015186856040518463ffffffff1660e01b8152600401611a349392919061318a565b600060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b505050508080611a7190612c16565b9150506119c8565b50505050565b6001600160a01b03163b151590565b600054610100900460ff16611ab55760405162461bcd60e51b81526004016104ea906131ed565b565b600080516020613456833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490611b0a908490339060040161294e565b602060405180830381865afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b9190612974565b611b675760405162461bcd60e51b81526004016104ea906129c9565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611b9f57611b6783611eeb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611bf9575060408051601f3d908101601f19168201909252611bf69181019061320e565b60015b611c155760405162461bcd60e51b81526004016104ea9061327a565b6000805160206134568339815191528114611c425760405162461bcd60e51b81526004016104ea906132d0565b50611b67838383611f3f565b600080805b8451811015611cae57836001600160a01b0316858281518110611c7857611c78612b40565b60200260200101516001600160a01b031603611c9c5781611c988161314f565b9250505b80611ca68161314f565b915050611c53565b509392505050565b60008060009050600083516001600160401b03811115611cd857611cd86121b7565b604051908082528060200260200182016040528015611d01578160200160208202803683370190505b50905060005b8451811015611def57600160005b84811015611d8357838181518110611d2f57611d2f612b40565b60200260200101516001600160a01b0316878481518110611d5257611d52612b40565b60200260200101516001600160a01b031603611d715760009150611d83565b80611d7b8161314f565b915050611d15565b508015611ddc57858281518110611d9c57611d9c612b40565b6020026020010151838581518110611db657611db6612b40565b6001600160a01b039092166020928302919091019091015283611dd88161314f565b9450505b5080611de78161314f565b915050611d07565b50909392505050565b6000805b8351811015611e5357826001600160a01b0316848281518110611e2157611e21612b40565b60200260200101516001600160a01b031603611e41576001915050610a28565b80611e4b8161314f565b915050611dfc565b5060009392505050565b606081600101805480602002602001604051908101604052809291908181526020018280548015611edf57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b031681526020019060080190602082600701049283019260010382029150808411611e9c5790505b50505050509050919050565b611ef481611a7f565b611f105760405162461bcd60e51b81526004016104ea9061332a565b60008051602061345683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611f4883611f64565b600082511180611f555750805b15611b6757611a798383611fa4565b611f6d81611eeb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610c6a8383604051806060016040528060278152602001613476602791396060600080856001600160a01b031685604051611fe19190613380565b600060405180830381855af49150503d806000811461201c576040519150601f19603f3d011682016040523d82523d6000602084013e612021565b606091505b50915091506120328683838761203c565b9695505050505050565b606083156120795782516000036120725761205685611a7f565b6120725760405162461bcd60e51b81526004016104ea906133c0565b5081612083565b612083838361208b565b949350505050565b81511561209b5781518083602001fd5b8060405162461bcd60e51b81526004016104ea9190613404565b8280548282559060005260206000209060030160049004810192821561215d5791602002820160005b8382111561212857835183826101000a8154816001600160401b0302191690836001600160401b0316021790555092602001926008016020816007010492830192600103026120de565b801561215b5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302612128565b505b5061216992915061216d565b5090565b5b80821115612169576000815560010161216e565b6001600160401b031690565b61219781612182565b8114610c3e57600080fd5b8035610a288161218e565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6121d6826121ad565b81018181106001600160401b03821117156121f3576121f36121b7565b6040525050565b600061220560405190565b905061221182826121cd565b919050565b60006001600160401b0382111561222f5761222f6121b7565b5060209081020190565b600061224c61224784612216565b6121fa565b8381529050602080820190840283018581111561226b5761226b600080fd5b835b8181101561228f578061228088826121a2565b8452506020928301920161226d565b5050509392505050565b600082601f8301126122ad576122ad600080fd5b8135612083848260208601612239565b801515612197565b8035610a28816122bd565b600080600080600060a086880312156122eb576122eb600080fd5b60006122f788886121a2565b9550506020612308888289016121a2565b94505060408601356001600160401b0381111561232757612327600080fd5b61233388828901612299565b93505060608601356001600160401b0381111561235257612352600080fd5b61235e88828901612299565b925050608061236f888289016122c5565b9150509295509295909350565b60006020828403121561239157612391600080fd5b600061208384846121a2565b61ffff81165b82525050565b60208101610a28828461239d565b600080604083850312156123cd576123cd600080fd5b82356001600160401b038111156123e6576123e6600080fd5b6123f285828601612299565b92505060208301356001600160401b0381111561241157612411600080fd5b61241d85828601612299565b9150509250929050565b6123a381612182565b600061243c8383612427565b505060200190565b600061244e825190565b80845260209384019383018060005b838110156124825781516124718882612430565b97506020830192505060010161245d565b509495945050505050565b60208082528101610c6a8184612444565b6001600160a01b031690565b6000610a288261249e565b612197816124aa565b8035610a28816124b5565b600080600080600080600060e0888a0312156124e7576124e7600080fd5b60006124f38a8a6124be565b97505060206125048a828b016124be565b96505060406125158a828b016124be565b95505060606125268a828b016124be565b94505060806125378a828b016124be565b93505060a06125488a828b016124be565b92505060c06125598a828b016124be565b91505092959891949750929550565b60006020828403121561257d5761257d600080fd5b600061208384846124be565b60208101610a288284612427565b60028110610c3e57600080fd5b8035610a2881612597565b600080600080600060a086880312156125ca576125ca600080fd5b60006125d688886121a2565b95505060208601356001600160401b038111156125f5576125f5600080fd5b61260188828901612299565b9450506040612612888289016121a2565b9350506060612623888289016125a4565b925050608061236f888289016121a2565b8015156123a3565b60208101610a288284612634565b60006001600160401b03821115612663576126636121b7565b61266c826121ad565b60200192915050565b82818337506000910152565b600061268f6122478461264a565b9050828152602081018484840111156126aa576126aa600080fd5b611cae848285612675565b600082601f8301126126c9576126c9600080fd5b8135612083848260208601612681565b600080604083850312156126ef576126ef600080fd5b60006126fb85856124be565b92505060208301356001600160401b0381111561271a5761271a600080fd5b61241d858286016126b5565b806123a3565b60208101610a288284612726565b6000610a2861274e61274b8461249e565b90565b61249e565b6000610a288261273a565b6000610a2882612753565b6123a38161275e565b60208101610a288284612769565b6000806040838503121561279657612796600080fd5b60006127a285856121a2565b925050602061241d858286016121a2565b600080604083850312156127c9576127c9600080fd5b60006127d585856121a2565b925050602061241d858286016124be565b634e487b7160e01b600052602160045260246000fd5b60028110610c3e57610c3e6127e6565b80612211816127fc565b6000610a288261280c565b6123a381612816565b60a081016128388288612427565b818103602083015261284a8187612444565b90506128596040830186612427565b6128666060830185612821565b6120326080830184612427565b6123a3816124aa565b60208101610a288284612873565b600080604083850312156128a0576128a0600080fd5b60006127d585856124be565b600080604083850312156128c2576128c2600080fd5b60006123f285856121a2565b61ffff8116612197565b8035610a28816128ce565b600080600080600060a086880312156128fe576128fe600080fd5b600061290a88886121a2565b955050602061291b888289016121a2565b945050604061292c888289016125a4565b935050606061293d888289016121a2565b925050608061236f888289016128d8565b6040810161295c8285612726565b610c6a6020830184612873565b8051610a28816122bd565b60006020828403121561298957612989600080fd5b60006120838484612969565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b815291505b5060200190565b60208082528101610a2881612995565b8051610a28816124b5565b6000602082840312156129f9576129f9600080fd5b600061208384846129d9565b60608101612a138286612427565b612a206020830185612873565b6120836040830184612873565b8051610a288161218e565b600060208284031215612a4d57612a4d600080fd5b60006120838484612a2d565b601481526000602082017311d95d0818d85c9cc81cda5e994819985a5b195960621b815291506129c2565b60208082528101610a2881612a59565b60128152600060208201711a5b9d985b1a590819185d185cd95d081a5960721b815291506129c2565b60208082528101610a2881612a94565b600e81526000602082016d15185c99d95d081a5b9d985b1a5960921b815291506129c2565b60208082528101610a2881612acd565b60178152600060208201760e6e8c2e4e840c2dcc840cadcc840dcdee840dac2e8c6d604b1b815291506129c2565b60208082528101610a2881612b02565b634e487b7160e01b600052603260045260246000fd5b601e81526000602082017f7374617274206d7573742062652067726561746572207468616e20656e640000815291506129c2565b60208082528101610a2881612b56565b634e487b7160e01b600052601160045260246000fd5b6000612bbb82612182565b9150612bc683612182565b9250508181036001600160401b03811115610a2857610a28612b9a565b6000612bee82612182565b9150612bf983612182565b9250508082016001600160401b03811115610a2857610a28612b9a565b6000612c2182612182565b91506001600160401b038203612c3957612c39612b9a565b5060010190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b60208082528101610a2881612c40565b600060ff8216610a28565b6123a381612c9e565b60208101610a288284612ca9565b602c815260006020820160008051602061343683398151915281526b19195b1959d85d1958d85b1b60a21b60208201529150612c87565b60208082528101610a2881612cc0565b602c815260006020820160008051602061343683398151915281526b6163746976652070726f787960a01b60208201529150612c87565b60208082528101610a2881612d07565b60078110610c3e57600080fd5b8051610a2881612d4e565b600060208284031215612d7b57612d7b600080fd5b60006120838484612d5b565b601a815260006020820179646174617365744964206973206e6f7420617070726f7665642160301b815291506129c2565b60208082528101610a2881612d87565b60408101612dd68285612427565b81810360208301526120838184612444565b600d81526000602082016c496e76616c696420636964732160981b815291506129c2565b60208082528101610a2881612de8565b600d81526000602082016c496e76616c69642073697a652160981b815291506129c2565b60208082528101610a2881612e1c565b601a8152600060208201794e6565642061206173736f636961746564206d61746368696e6760301b815291506129c2565b60208082528101610a2881612e50565b601a815260006020820179496e76616c6964206d617070696e672066696c6573206361727360301b815291506129c2565b60208082528101610a2881612e91565b60088110610c3e57600080fd5b8051610a2881612ed2565b600060208284031215612eff57612eff600080fd5b60006120838484612edf565b601b81526000602082017a646174617365744964206973206e6f7420636f6d706c657465642160281b815291506129c2565b60208082528101610a2881612f0b565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612c87565b60208082528101610a2881612f4d565b8051610a28816128ce565b600060208284031215612fd257612fd2600080fd5b60006120838484612fb2565b6000612fec61224784612216565b8381529050602080820190840283018581111561300b5761300b600080fd5b835b8181101561228f57806130208882612a2d565b8452506020928301920161300d565b600082601f83011261304357613043600080fd5b8151612083848260208601612fde565b60006020828403121561306857613068600080fd5b81516001600160401b0381111561308157613081600080fd5b6120838482850161302f565b600061309b61224784612216565b838152905060208082019084028301858111156130ba576130ba600080fd5b835b8181101561228f57806130cf88826129d9565b845250602092830192016130bc565b600082601f8301126130f2576130f2600080fd5b815161208384826020860161308d565b60006020828403121561311757613117600080fd5b81516001600160401b0381111561313057613130600080fd5b612083848285016130de565b80820180821115610a2857610a28612b9a565b60006000198203612c3957612c39612b9a565b60608101613170828661239d565b61317d602083018561239d565b612083604083018461239d565b606081016131988286612427565b61317d6020830185612427565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612c87565b60208082528101610a28816131a5565b80612197565b8051610a28816131fd565b60006020828403121561322357613223600080fd5b60006120838484613203565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612c87565b60208082528101610a288161322f565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612c87565b60208082528101610a288161328a565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612c87565b60208082528101610a28816132e0565b60005b8381101561335557818101518382015260200161333d565b50506000910152565b6000613368825190565b61337681856020860161333a565b9290920192915050565b6000610c6a828461335e565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506129c2565b60208082528101610a288161338c565b60006133da825190565b8084526020840193506133f181856020860161333a565b6133fa816121ad565b9093019392505050565b60208082528101610c6a81846133d056fe2e7a99dcc48463ba57667732f1d19d96afa51e11db099e5c9c708076a0a0804046756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e3c0ecd3382cfde874bfaa7b51db2b029511ae83b0d268152344709c58a49fb264736f6c63430008150033",
  "devdoc": {
    "details": "This contract is intended to be inherited by specific matching-related contracts.      TODO: Missing fund proccess,need add later https://github.com/dataswap/core/issues/20            1 bidder(when bidding) and initiator(when publish) should transfer FIL to payable function            2 proccess the fund after matched            3 proccess the fund after matchedsotre,step by step",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "createTarget(uint64,uint64,uint8,uint64,uint16)": {
        "params": {
          "_associatedMappingFilesMatchingID": "The matching ID that associated with mapping files of dataset of _datasetId",
          "_dataType": "Identify the data type of \"cars\", which can be either \"Source\" or \"MappingFiles\".",
          "_datasetId": "The dataset id to create matching.",
          "_matchingId": "The matching id to publish cars.",
          "_replicaIndex": "The index of the replica in dataset."
        }
      },
      "getMatchingCars(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching."
        },
        "returns": {
          "_0": "cars An array of CIDs representing the cars in the matching."
        }
      },
      "getMatchingDatasetId(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching."
        },
        "returns": {
          "_0": "The ID of the matching's dataset."
        }
      },
      "getMatchingReplicaIndex(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching."
        },
        "returns": {
          "_0": "index The index of the matching's replica."
        }
      },
      "getMatchingSize(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching to check."
        },
        "returns": {
          "_0": "The size of the matching cars."
        }
      },
      "getMatchingTarget(uint64)": {
        "params": {
          "_matchingId": "The ID of the matching."
        },
        "returns": {
          "associatedMappingFilesMatchingID": "The ID of the associated mapping files matching.",
          "cars": "An array of CIDs representing the cars in the matching.",
          "dataType": "The data type of the matching.",
          "datasetID": "The ID of the associated dataset.",
          "size": "The size of the matching."
        }
      },
      "isMatchingContainsCar(uint64,uint64)": {
        "params": {
          "_cid": "The CID (Content Identifier) to check for.",
          "_matchingId": "The ID of the matching to check."
        },
        "returns": {
          "_0": "True if the matching contains the specified CID, otherwise false."
        }
      },
      "isMatchingContainsCars(uint64,uint64[])": {
        "params": {
          "_cids": "An array of CIDs (Content Identifiers) to check for.",
          "_matchingId": "The ID of the matching to check."
        },
        "returns": {
          "_0": "True if the matching contains all the specified CIDs, otherwise false."
        }
      },
      "parseCars(uint64[],uint64[])": {
        "params": {
          "_ends": "The ends of cars to publish.",
          "_starts": "The starts of cars to publish."
        },
        "returns": {
          "_0": "The cars of the indexes."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "publishMatching(uint64,uint64,uint64[],uint64[],bool)": {
        "params": {
          "_carsEnds": "The cars to publish.",
          "_carsStarts": "The cars to publish.",
          "_datasetId": "The dataset id of matching.",
          "_matchingId": "The matching id to publish cars.",
          "complete": "If the publish is complete."
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Matchings Base Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MatchingPublished(uint64,address)": {
        "notice": "Declare events for external monitoring"
      }
    },
    "kind": "user",
    "methods": {
      "createTarget(uint64,uint64,uint8,uint64,uint16)": {
        "notice": "Function for create a new matching target."
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getMatchingCars(uint64)": {
        "notice": "Get the cars of a matching."
      },
      "getMatchingDatasetId(uint64)": {
        "notice": "Function for getting the dataset id in a matching"
      },
      "getMatchingReplicaIndex(uint64)": {
        "notice": "Get the index of matching's replica."
      },
      "getMatchingSize(uint64)": {
        "notice": "Function for getting the total data size of bids in a matching"
      },
      "getMatchingTarget(uint64)": {
        "notice": "Get the target information of a matching."
      },
      "initDependencies(address,address)": {
        "notice": "The function to init the dependencies of a matchingsTarget."
      },
      "initialize(address,address,address,address,address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "isMatchingContainsCar(uint64,uint64)": {
        "notice": "Check if a matching with the given matching ID contains a specific CID."
      },
      "isMatchingContainsCars(uint64,uint64[])": {
        "notice": "Check if a matching with the given matching ID contains multiple CIDs."
      },
      "isMatchingTargetMeetsFilPlusRequirements(uint64,address)": {
        "notice": "Check if a matching meets the requirements of Fil+."
      },
      "isMatchingTargetValid(uint64,uint64[],uint64,uint8,uint64)": {
        "notice": "check is matching targe valid"
      },
      "parseCars(uint64[],uint64[])": {
        "notice": "Function for parse cars from indexes."
      },
      "publishMatching(uint64,uint64,uint64[],uint64[],bool)": {
        "notice": "Function for publishing a matching"
      }
    },
    "notice": "This contract serves as the base for managing matchings, their states, and associated actions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28813,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "targets",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint64,t_struct(MatchingTarget)35400_storage)"
      },
      {
        "astId": 28815,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 28818,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "roles",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IRoles)20939"
      },
      {
        "astId": 28821,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "filplus",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IFilplus)20899"
      },
      {
        "astId": 28824,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "carstore",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ICarstore)20452"
      },
      {
        "astId": 28827,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "datasets",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IDatasets)21171"
      },
      {
        "astId": 28830,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "datasetsRequirement",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IDatasetsRequirement)21507"
      },
      {
        "astId": 28833,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "datasetsProof",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IDatasetsProof)21436"
      },
      {
        "astId": 28836,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "matchings",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IMatchings)21653"
      },
      {
        "astId": 28839,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "matchingsBids",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IMatchingsBids)21747"
      },
      {
        "astId": 28844,
        "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
        "label": "__gap",
        "offset": 0,
        "slot": "111",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICarstore)20452": {
        "encoding": "inplace",
        "label": "contract ICarstore",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasets)21171": {
        "encoding": "inplace",
        "label": "contract IDatasets",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasetsProof)21436": {
        "encoding": "inplace",
        "label": "contract IDatasetsProof",
        "numberOfBytes": "20"
      },
      "t_contract(IDatasetsRequirement)21507": {
        "encoding": "inplace",
        "label": "contract IDatasetsRequirement",
        "numberOfBytes": "20"
      },
      "t_contract(IFilplus)20899": {
        "encoding": "inplace",
        "label": "contract IFilplus",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchings)21653": {
        "encoding": "inplace",
        "label": "contract IMatchings",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsBids)21747": {
        "encoding": "inplace",
        "label": "contract IMatchingsBids",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)20939": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_enum(DataType)35138": {
        "encoding": "inplace",
        "label": "enum DatasetType.DataType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint64,t_struct(MatchingTarget)35400_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct MatchingType.MatchingTarget)",
        "numberOfBytes": "32",
        "value": "t_struct(MatchingTarget)35400_storage"
      },
      "t_struct(MatchingTarget)35400_storage": {
        "encoding": "inplace",
        "label": "struct MatchingType.MatchingTarget",
        "members": [
          {
            "astId": 35387,
            "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
            "label": "datasetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 35390,
            "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
            "label": "cars",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint64)dyn_storage"
          },
          {
            "astId": 35392,
            "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 35395,
            "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
            "label": "dataType",
            "offset": 8,
            "slot": "2",
            "type": "t_enum(DataType)35138"
          },
          {
            "astId": 35397,
            "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
            "label": "associatedMappingFilesMatchingID",
            "offset": 9,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 35399,
            "contract": "src/v0.8/module/matching/MatchingsTarget.sol:MatchingsTarget",
            "label": "replicaIndex",
            "offset": 17,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}