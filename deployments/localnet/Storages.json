{
  "address": "0xDe62c79224EAC688E93806D91b4DBba3d4708078",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expectedLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_actualLength",
          "type": "uint256"
        }
      ],
      "name": "ParamLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "ReplicaFilecoinClaimIdExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "StorageClaimIdSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getStoredCarCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        }
      ],
      "name": "getStoredCarSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getStoredCars",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "getTotalStoredSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filplus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_filecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_carstore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchings",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsTarget",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchingsBids",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        }
      ],
      "name": "isAllStoredDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchings",
      "outputs": [
        {
          "internalType": "contract IMatchings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsBids",
      "outputs": [
        {
          "internalType": "contract IMatchingsBids",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchingsTarget",
      "outputs": [
        {
          "internalType": "contract IMatchingsTarget",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_provider",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_id",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "submitStorageClaimId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_matchingId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_provider",
          "type": "uint64"
        },
        {
          "internalType": "uint64[]",
          "name": "_ids",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_claimIds",
          "type": "uint64[]"
        }
      ],
      "name": "submitStorageClaimIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "86ceebc14306f94d4b734206564c3c08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expectedLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actualLength\",\"type\":\"uint256\"}],\"name\":\"ParamLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"ReplicaFilecoinClaimIdExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"StorageClaimIdSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getStoredCarCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"getStoredCarSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getStoredCars\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"getTotalStoredSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filplus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_carstore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchingsBids\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"}],\"name\":\"isAllStoredDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchings\",\"outputs\":[{\"internalType\":\"contract IMatchings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsBids\",\"outputs\":[{\"internalType\":\"contract IMatchingsBids\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingsTarget\",\"outputs\":[{\"internalType\":\"contract IMatchingsTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_provider\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"submitStorageClaimId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_matchingId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_provider\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"_ids\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_claimIds\",\"type\":\"uint64[]\"}],\"name\":\"submitStorageClaimIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages the storage of matched data after successful matching with Filecoin storage deals.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"StorageClaimIdSubmitted(uint64,uint64,uint64)\":{\"details\":\"Submits a Filecoin claim ID for a matched store after successful matching.\",\"params\":{\"_claimId\":\"The Filecoin claim ID.\",\"_id\":\"The ID of the file.\",\"_matchingId\":\"The ID of the matching store.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"getStoredCarCount(uint64)\":{\"details\":\"Gets the count of done cars in the matchedstore.\"},\"getStoredCarSize(uint64,uint64)\":{\"details\":\"Gets the car size in the matchedstore.\"},\"getStoredCars(uint64)\":{\"details\":\"Gets the list of done cars in the matchedstore.\"},\"getTotalStoredSize(uint64)\":{\"details\":\"Gets the stored size in the matchedstore.\"},\"isAllStoredDone(uint64)\":{\"details\":\"Checks if all cars are done in the matchedstore.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"submitStorageClaimId(uint64,uint64,uint64,uint64)\":{\"details\":\"Submits a Filecoin claim Id for a matchedstore after successful matching.\",\"params\":{\"_claimId\":\"The ID of the successful Filecoin storage deal.\",\"_id\":\"The content identifier of the matched data.\",\"_matchingId\":\"The ID of the matching.\",\"_provider\":\"A provider of storage provider of matching.\"}},\"submitStorageClaimIds(uint64,uint64,uint64[],uint64[])\":{\"details\":\"Submits multiple Filecoin claim Ids for a matchedstore after successful matching.\",\"params\":{\"_claimIds\":\"An array of IDs of successful Filecoin storage deals.\",\"_ids\":\"An array of content identifiers of the matched data.\",\"_matchingId\":\"The ID of the matching.\",\"_provider\":\"A provider of storage provider of matching.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"storages\",\"version\":1},\"userdoc\":{\"errors\":{\"ParamLengthMismatch(uint256,uint256)\":[{\"notice\":\"commmon errors\"}]},\"kind\":\"user\",\"methods\":{\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"initialize(address,address,address,address,address,address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"matchings()\":{\"notice\":\"get matchings instance\"},\"matchingsBids()\":{\"notice\":\"get matchingsBids instance\"},\"matchingsTarget()\":{\"notice\":\"get matchingsTarget instance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/storage/Storages.sol\":\"Storages\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030363434343639383630\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to init the dependencies of a filecoin.\\n    function initDependencies(address _datacap) external;\\n\\n    /// @notice The function to allocate the datacap of a storage deal.\\n    function allocateDatacap(uint64 client, uint256 _size) external;\\n\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0x5f39c709a0e57fa50f9f38e8fa5eb7c311e9700bc32bea042e8b1cf0c452ad2f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchings.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchings\\ninterface IMatchings {\\n    /// @notice The function to init the dependencies of a matchings.\\n    function initDependencies(\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _bidSelectionRule The rules for determining the winning bid.\\n    /// @param _biddingDelayBlockCount The number of blocks to delay bidding.\\n    /// @param _biddingPeriodBlockCount The number of blocks for bidding period.\\n    /// @param _storageCompletionPeriodBlocks The number of blocks for storage period.\\n    /// @param _biddingThreshold The threshold for bidding.\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    /// @param _additionalInfo The additional information about the matching.\\n    /// @return The matchingId.\\n    function createMatching(\\n        uint64 _datasetId,\\n        MatchingType.BidSelectionRule _bidSelectionRule,\\n        uint64 _biddingDelayBlockCount,\\n        uint64 _biddingPeriodBlockCount,\\n        uint64 _storageCompletionPeriodBlocks,\\n        uint256 _biddingThreshold,\\n        uint16 _replicaIndex,\\n        string memory _additionalInfo\\n    ) external returns (uint64);\\n\\n    /// @notice Function for pausing a matching\\n    /// @param _matchingId The matching id.\\n    function pauseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for resuming a paused matching\\n    /// @param _matchingId The matching id.\\n    function resumeMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    function reportPublishMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report canceling a matching\\n    /// @param _matchingId The matching id.\\n    function reportCancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report closing a matching\\n    /// @param _matchingId The matching id.\\n    function reportCloseMatching(uint64 _matchingId) external;\\n\\n    /// @notice Function for report complete with a winner\\n    /// @param _matchingId The matching id.\\n    /// @param _winner The winner of bids of matching.\\n    function reportMatchingHasWinner(\\n        uint64 _matchingId,\\n        address _winner\\n    ) external;\\n\\n    /// @notice Function for report complete a matching without winner\\n    /// @param _matchingId The matching id.\\n    function reportMatchingNoWinner(uint64 _matchingId) external;\\n\\n    /// @notice Function for getting matchings initiator\\n    function getMatchingInitiator(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting the state of a matching\\n    function getMatchingState(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.State);\\n\\n    /// @notice  Function for getting the bid selection rule of a matching\\n    function getBidSelectionRule(\\n        uint64 _matchingId\\n    ) external view returns (MatchingType.BidSelectionRule);\\n\\n    /// @notice  Function for getting the bid threshold of a matching\\n    function getBiddingThreshold(\\n        uint64 _matchingId\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the start height of a matching\\n    function getBiddingStartHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the after pause height of a matching\\n    function getBiddingAfterPauseHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting the end height of a matching\\n    function getBiddingEndHeight(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    // Default getter functions for public variables\\n    function matchingsCount() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x8388805c02520d71207fc4a755a894e7e76c6860c56e7a209d0de0d6422d5886\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsBids.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsBid\\ninterface IMatchingsBids {\\n    /// @notice The function to init the dependencies of a matchingsBids.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsTarget\\n    ) external;\\n\\n    /// @notice  Function for bidding on a matching\\n    function bidding(uint64 _matchingId, uint256 _amount) external;\\n\\n    /// @notice  Function for canceling a matching\\n    function cancelMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for closing a matching and choosing a winner\\n    function closeMatching(uint64 _matchingId) external;\\n\\n    /// @notice  Function for getting bids in a matching\\n    function getMatchingBids(\\n        uint64 _matchingId\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice  Function for getting bid amount of a bidder in a matching\\n    function getMatchingBidAmount(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (uint256);\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingBidsCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice  Function for getting winner of a matching\\n    function getMatchingWinner(\\n        uint64 _matchingId\\n    ) external view returns (address);\\n\\n    /// @notice  Function for getting winners of a matchings\\n    function getMatchingWinners(\\n        uint64[] memory _matchingIds\\n    ) external view returns (address[] memory);\\n\\n    /// @notice  Function for checking if a bidder has a bid in a matching\\n    function hasMatchingBid(\\n        uint64 _matchingId,\\n        address _bidder\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc60936578b513522c01c218f6311621d234c7bb1633a895ae75525b08c51024d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IMatchingsTarget.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title IMatchingsTarget\\ninterface IMatchingsTarget {\\n    /// @notice The function to init the dependencies of a matchingsTarget.\\n    function initDependencies(\\n        address _matchings,\\n        address _matchingsBids\\n    ) external;\\n\\n    /// @notice Function for create a new matching target.\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id to create matching.\\n    /// @param _dataType Identify the data type of \\\"cars\\\", which can be either \\\"Source\\\" or \\\"MappingFiles\\\".\\n    /// @param _associatedMappingFilesMatchingID The matching ID that associated with mapping files of dataset of _datasetId\\n    /// @param _replicaIndex The index of the replica in dataset.\\n    function createTarget(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice  Function for parse cars from indexes.\\n    /// @param _starts The starts of cars to publish.\\n    /// @param _ends The ends of cars to publish.\\n    /// @return The cars of the indexes.\\n    function parseCars(\\n        uint64[] memory _starts,\\n        uint64[] memory _ends\\n    ) external pure returns (uint64[] memory);\\n\\n    /// @notice  Function for publishing a matching\\n    /// @param _matchingId The matching id to publish cars.\\n    /// @param _datasetId The dataset id of matching.\\n    /// @param _carsStarts The cars to publish.\\n    /// @param _carsEnds The cars to publish.\\n    /// @param complete If the publish is complete.\\n    function publishMatching(\\n        uint64 _matchingId,\\n        uint64 _datasetId,\\n        uint64[] memory _carsStarts,\\n        uint64[] memory _carsEnds,\\n        bool complete\\n    ) external;\\n\\n    /// @notice  Function for getting the count of bids in a matching\\n    function getMatchingCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice  Function for getting the dataset id in a matching\\n    function getMatchingDatasetId(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the index of matching's replica.\\n    function getMatchingReplicaIndex(\\n        uint64 _matchingId\\n    ) external view returns (uint16);\\n\\n    /// @notice get matchings size\\n    function getMatchingSize(uint64 _matchingId) external view returns (uint64);\\n\\n    /// @notice Get the target information of a matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return datasetID The ID of the associated dataset.\\n    /// @return cars An array of CIDs representing the cars in the matching.\\n    /// @return size The size of the matching.\\n    /// @return dataType The data type of the matching.\\n    /// @return associatedMappingFilesMatchingID The ID of the associated mapping files matching.\\n    function getMatchingTarget(\\n        uint64 _matchingId\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 datasetID,\\n            uint64[] memory cars,\\n            uint64 size,\\n            DatasetType.DataType dataType,\\n            uint64 associatedMappingFilesMatchingID\\n        );\\n\\n    /// @notice Check if a matching with the given matching ID contains a specific CID.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cid The CID (Content Identifier) to check for.\\n    /// @return True if the matching contains the specified CID, otherwise false.\\n    function isMatchingContainsCar(\\n        uint64 _matchingId,\\n        uint64 _cid\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching with the given matching ID contains multiple CIDs.\\n    /// @param _matchingId The ID of the matching to check.\\n    /// @param _cids An array of CIDs (Content Identifiers) to check for.\\n    /// @return True if the matching contains all the specified CIDs, otherwise false.\\n    function isMatchingContainsCars(\\n        uint64 _matchingId,\\n        uint64[] memory _cids\\n    ) external view returns (bool);\\n\\n    /// @notice check is matching targe valid\\n    function isMatchingTargetValid(\\n        uint64 _datasetId,\\n        uint64[] memory _cars,\\n        uint64 _size,\\n        DatasetType.DataType _dataType,\\n        uint64 _associatedMappingFilesMatchingID\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a matching meets the requirements of Fil+.\\n    function isMatchingTargetMeetsFilPlusRequirements(\\n        uint64 _matchingId,\\n        address candidate\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb27dd02e741d33a91c7761aadd2911d88ef6c0b7662f5ecb5acfde708176c44d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IStorages.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n\\n/// @title Interface for Matchedstores contract\\ninterface IStorages {\\n    /// @dev Submits a Filecoin claim Id for a matchedstore after successful matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _provider A provider of storage provider of matching.\\n    /// @param _id The content identifier of the matched data.\\n    /// @param _claimId The ID of the successful Filecoin storage deal.\\n    function submitStorageClaimId(\\n        uint64 _matchingId,\\n        uint64 _provider,\\n        uint64 _id,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @dev Submits multiple Filecoin claim Ids for a matchedstore after successful matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _provider A provider of storage provider of matching.\\n    /// @param _ids An array of content identifiers of the matched data.\\n    /// @param _claimIds An array of IDs of successful Filecoin storage deals.\\n    function submitStorageClaimIds(\\n        uint64 _matchingId,\\n        uint64 _provider,\\n        uint64[] memory _ids,\\n        uint64[] memory _claimIds\\n    ) external;\\n\\n    /// @dev Gets the list of done cars in the matchedstore.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return An array of content identifiers of the done cars.\\n    function getStoredCars(\\n        uint64 _matchingId\\n    ) external view returns (uint64[] memory);\\n\\n    /// @dev Gets the count of done cars in the matchedstore.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return The count of done cars in the matchedstore.\\n    function getStoredCarCount(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice get total stored size\\n    /// @param _matchingId The ID of the matching.\\n    /// @return The total size of the matching's stored cars.\\n    function getTotalStoredSize(\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    ///@notice get car size\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _id The content identifier of the matched data.\\n    /// @return The size of the matching's stored cars.\\n    function getStoredCarSize(\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) external view returns (uint64);\\n\\n    /// @dev Checks if all cars are done in the matchedstore.\\n    /// @param _matchingId The ID of the matching.\\n    /// @return True if all cars are done in the matchedstore, otherwise false.\\n    function isAllStoredDone(uint64 _matchingId) external view returns (bool);\\n\\n    ///@notice get matchings instance\\n    function matchings() external view returns (IMatchings);\\n\\n    ///@notice get matchingsTarget instance\\n    function matchingsTarget() external view returns (IMatchingsTarget);\\n\\n    ///@notice get matchingsBids instance\\n    function matchingsBids() external view returns (IMatchingsBids);\\n}\\n\",\"keccak256\":\"0x9705c844e92164c366a38e40e0b4343c763c3fcdb821c343422492d2e9b6446e\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/storage/Storages.sol\":{\"content\":\"/// SPDX-License-Identifier: GPL-3.0-or-later\\n/// (c) 2023 Dataswap\\n///\\n/// Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n/// you may not use this file except in compliance with the License.\\n/// You may obtain a copy of the License at\\n///     https://www.gnu.org/licenses/gpl-3.0.en.html\\n///\\n/// Unless required by applicable law or agreed to in writing, software\\n/// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n/// See the License for the specific language governing permissions and\\n/// limitations under the License.\\n\\npragma solidity ^0.8.21;\\n\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\nimport {IStorages} from \\\"src/v0.8/interfaces/module/IStorages.sol\\\";\\n/// shared\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\nimport {StoragesEvents} from \\\"src/v0.8/shared/events/StoragesEvents.sol\\\";\\nimport {StoragesModifiers} from \\\"src/v0.8/shared/modifiers/StoragesModifiers.sol\\\";\\nimport {CidUtils} from \\\"src/v0.8/shared/utils/cid/CidUtils.sol\\\";\\n/// type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {StorageType} from \\\"src/v0.8/types/StorageType.sol\\\";\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract Storages is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IStorages,\\n    StoragesModifiers\\n{\\n    mapping(uint64 => StorageType.Storage) private storages; //matchingId=>Matchedstore\\n\\n    address private governanceAddress;\\n    IRoles private roles;\\n    IFilplus private filplus;\\n    IFilecoin private filecoin;\\n    ICarstore private carstore;\\n    IMatchings public matchings;\\n    IMatchingsTarget public matchingsTarget;\\n    IMatchingsBids public matchingsBids;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _filplus,\\n        address _filecoin,\\n        address _carstore,\\n        address _matchings,\\n        address _matchingsTarget,\\n        address _matchingsBids\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        filplus = IFilplus(_filplus);\\n        filecoin = IFilecoin(_filecoin);\\n        carstore = ICarstore(_carstore);\\n        matchings = IMatchings(_matchings);\\n        matchingsTarget = IMatchingsTarget(_matchingsTarget);\\n        matchingsBids = IMatchingsBids(_matchingsBids);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @dev Submits a Filecoin claim Id for a matchedstore after successful matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _provider A provider of storage provider of matching.\\n    /// @param _id The content identifier of the matched data.\\n    /// @param _claimId The ID of the successful Filecoin storage deal.\\n    function submitStorageClaimId(\\n        uint64 _matchingId,\\n        uint64 _provider,\\n        uint64 _id,\\n        uint64 _claimId\\n    )\\n        public\\n        onlyAddress(matchingsBids.getMatchingWinner(_matchingId))\\n        onlyUnsetCarReplicaFilecoinClaimId(carstore, _id, _matchingId)\\n    {\\n        require(\\n            CarReplicaType.State.Matched ==\\n                carstore.getCarReplicaState(_id, _matchingId),\\n            \\\"Invalid Replica State\\\"\\n        );\\n\\n        StorageType.Storage storage storage_ = storages[_matchingId];\\n\\n        bytes memory dataCid = filecoin.getReplicaClaimData(\\n            _provider,\\n            _claimId\\n        );\\n        bytes32 _hash = carstore.getCarHash(_id);\\n        bytes memory cid = CidUtils.hashToCID(_hash);\\n\\n        require(keccak256(dataCid) == keccak256(cid), \\\"cid mismatch\\\");\\n\\n        storage_.doneCars.push(_id);\\n\\n        /// Note:set claim id in carstore berfore submitClaimid\\n        carstore.setCarReplicaFilecoinClaimId(_id, _matchingId, _claimId);\\n\\n        emit StoragesEvents.StorageClaimIdSubmitted(_matchingId, _id, _claimId);\\n    }\\n\\n    /// @dev Submits multiple Filecoin claim Ids for a matchedstore after successful matching.\\n    /// @param _matchingId The ID of the matching.\\n    /// @param _provider A provider of storage provider of matching.\\n    /// @param _ids An array of content identifiers of the matched data.\\n    /// @param _claimIds An array of IDs of successful Filecoin storage deals.\\n    function submitStorageClaimIds(\\n        uint64 _matchingId,\\n        uint64 _provider,\\n        uint64[] memory _ids,\\n        uint64[] memory _claimIds\\n    ) external {\\n        if (_ids.length != _claimIds.length) {\\n            revert Errors.ParamLengthMismatch(_ids.length, _claimIds.length);\\n        }\\n        for (uint64 i = 0; i < _ids.length; i++) {\\n            submitStorageClaimId(_matchingId, _provider, _ids[i], _claimIds[i]);\\n        }\\n    }\\n\\n    /// @dev Gets the list of done cars in the matchedstore.\\n    function getStoredCars(\\n        uint64 _matchingId\\n    ) public view returns (uint64[] memory) {\\n        StorageType.Storage storage storage_ = storages[_matchingId];\\n        return storage_.doneCars;\\n    }\\n\\n    /// @dev Gets the count of done cars in the matchedstore.\\n    function getStoredCarCount(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        StorageType.Storage storage storage_ = storages[_matchingId];\\n        return uint64(storage_.doneCars.length);\\n    }\\n\\n    /// @dev Gets the stored size in the matchedstore.\\n    function getTotalStoredSize(\\n        uint64 _matchingId\\n    ) public view returns (uint64) {\\n        StorageType.Storage storage storage_ = storages[_matchingId];\\n        uint64 size = 0;\\n        for (uint64 i = 0; i < storage_.doneCars.length; i++) {\\n            size += carstore.getCarSize(storage_.doneCars[i]);\\n        }\\n        return size;\\n    }\\n\\n    /// @dev Gets the car size in the matchedstore.\\n    function getStoredCarSize(\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) public view returns (uint64) {\\n        StorageType.Storage storage storage_ = storages[_matchingId];\\n        for (uint64 i = 0; i < storage_.doneCars.length; i++) {\\n            if (storage_.doneCars[i] == _id) {\\n                return carstore.getCarSize(_id);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Checks if all cars are done in the matchedstore.\\n    function isAllStoredDone(uint64 _matchingId) public view returns (bool) {\\n        StorageType.Storage storage storage_ = storages[_matchingId];\\n        return\\n            storage_.doneCars.length ==\\n            matchingsTarget.getMatchingCars(_matchingId).length;\\n    }\\n}\\n\",\"keccak256\":\"0x4b56a36da754714a51811ab563aa66bdfe50aa6b8ca09fe2d603957e19a1a7e8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n    error NotEnough(uint256 amount, uint256 append);\\n}\\n\",\"keccak256\":\"0x9bb103e0cf0c9cd5a9d200382cc51060a2494f41b38ce2fda1d5762dd9306b94\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/StoragesEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary StoragesEvents {\\n    /// @dev Submits a Filecoin claim ID for a matched store after successful matching.\\n    /// @param _matchingId The ID of the matching store.\\n    /// @param _id The ID of the file.\\n    /// @param _claimId The Filecoin claim ID.\\n    event StorageClaimIdSubmitted(\\n        uint64 indexed _matchingId,\\n        uint64 indexed _id,\\n        uint64 _claimId\\n    );\\n}\\n\",\"keccak256\":\"0x55e7343b6c2f80ce8cfb4b13bd94909778471be80caa2c5fd9dbc30b7554ef74\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IMatchings} from \\\"src/v0.8/interfaces/module/IMatchings.sol\\\";\\nimport {IMatchingsTarget} from \\\"src/v0.8/interfaces/module/IMatchingsTarget.sol\\\";\\nimport {IMatchingsBids} from \\\"src/v0.8/interfaces/module/IMatchingsBids.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract MatchingsModifiers is CarstoreModifiers {\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingInitiator(IMatchings _matchings, uint64 _matchingId) {\\n        address initiator = _matchings.getMatchingInitiator(_matchingId);\\n        if (initiator != msg.sender) {\\n            revert Errors.NotMatchingInitiator(\\n                _matchingId,\\n                initiator,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access based on matching state\\n    modifier onlyMatchingState(\\n        IMatchings _matchings,\\n        uint64 _matchingId,\\n        MatchingType.State _state\\n    ) {\\n        MatchingType.State matchingState = _matchings.getMatchingState(\\n            _matchingId\\n        );\\n        if (matchingState != _state) {\\n            revert Errors.InvalidMatchingState(\\n                _matchingId,\\n                _state,\\n                matchingState\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsTarget(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsTarget) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n    /// @notice Modifier to restrict access to the matching target\\n    modifier onlyMatchingsBids(\\n        IMatchingsBids _matchingsBids,\\n        uint64 _matchingId\\n    ) {\\n        if (address(_matchingsBids) != msg.sender) {\\n            revert Errors.NotMatchingsTarget(_matchingId, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict access to the matching initiator\\n    modifier onlyMatchingContainsCar(\\n        IMatchingsTarget _matchingsTarget,\\n        uint64 _matchingId,\\n        uint64 _id\\n    ) {\\n        if (!_matchingsTarget.isMatchingContainsCar(_matchingId, _id)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2aaf11a9100face83692e5b9d6ab8b0440d05e4baa5a795ba6ac4a3c1f09d387\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/StoragesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///shared\\nimport {MatchingsModifiers} from \\\"src/v0.8/shared/modifiers/MatchingsModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract StoragesModifiers is MatchingsModifiers {\\n\\n}\\n\",\"keccak256\":\"0x654e1ef8c20aa552a5c13fa11a63a42036191c4abda99bb6c6b0df077b46d085\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/utils/cid/CidUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CidUtils\\nlibrary CidUtils {\\n    /// @notice Convert a bytes32 hash to a CID.\\n    /// @dev This function converts a bytes32 hash to a CID using the specified encoding.\\n    /// @return The CID corresponding to the input hash.\\n    function hashToCID(bytes32 _hash) internal pure returns (bytes memory) {\\n        // Hardcoded, to be refined for full implementation.\\n        // From https://github.com/filecoin-project/go-fil-commcid/blob/master/commcid.go#CommitmentToCID\\n        uint64 filCommitmentUnsealed = 0xf101;\\n        uint64 sha256Trunc254Padded = 0x1012;\\n\\n        bytes memory fBuf = bytes.concat(\\n            putUvarint(1),\\n            putUvarint(filCommitmentUnsealed)\\n        );\\n\\n        bytes memory result = bytes.concat(\\n            putUvarint(sha256Trunc254Padded),\\n            putUvarint(_hash.length)\\n        );\\n        result = bytes.concat(result, _hash);\\n\\n        return bytes.concat(fBuf, result);\\n    }\\n\\n    /// @notice Convert an array of bytes32 hashes to an array of CIDs.\\n    /// @dev This function converts an array of bytes32 hashes to an array of CIDs using the specified encoding.\\n    /// @param _hashes The array of bytes32 hashes to convert.\\n    /// @return The array of CIDs corresponding to the input hashes.\\n    function hashesToCIDs(\\n        bytes32[] memory _hashes\\n    ) internal pure returns (bytes[] memory) {\\n        bytes[] memory cids = new bytes[](_hashes.length);\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\n            cids[i] = hashToCID(bytes32(_hashes[i]));\\n        }\\n        return cids;\\n    }\\n\\n    /// @notice Function to encode an unsigned integer as a Uvarint byte array\\n    /// @dev Encode an unsigned integer as a Uvarint byte array\\n    /// @param _x input parameter an unsigned integer\\n    /// @return the return of Uvarint byte array\\n    function putUvarint(uint64 _x) public pure returns (bytes memory) {\\n        uint8 i = 0;\\n        uint8[] memory buffer = new uint8[](10); // Requires up to 10 bytes\\n\\n        while (_x >= 0x80) {\\n            buffer[i] = uint8(_x) | 0x80;\\n            _x >>= 7;\\n            i++;\\n        }\\n        buffer[i] = uint8(_x);\\n\\n        bytes memory result = new bytes(i + 1);\\n        for (uint8 j = 0; j <= i; j++) {\\n            result[j] = bytes1(buffer[j]);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xf2c3b5d269f59f0f58f33359843e6c6daa3e5d6f501070436c3dd74341758988\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        CollateralNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 client; // Filecoin actor id of the dataset's client.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x0eea4527c3d5df919e552d99d728ad823427974e4e01944efc8aadcf3744773b\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0x3b6918e967adea47fceea5d699a40f86c24c9417379cd387071ee96bb246f7dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/StorageType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @notice This library defines enums and structs related to storage deals and their states.\\nlibrary StorageType {\\n    /// @notice Struct representing a storage deal.\\n    struct Storage {\\n        uint64[] doneCars;\\n    }\\n}\\n\",\"keccak256\":\"0x9f719aacbb050bf66c6a0546ba005c824d556aa628fa87391bd612ee1792def6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516122ef61004c600039600081816102f30152818161033c01528181610467015281816104a7015261052301526122ef6000f3fe6080604052600436106100b85760003560e01c80632620333e146100bd5780633659cfe6146100f35780634b06f57b146101155780634f1ef2861461014257806352d1902d14610155578063840febd9146101775780638a29e2de14610197578063aaf10f42146101b7578063af9863b3146101d9578063b83ab4f91461021c578063cff371ce14610249578063dd8fff9714610269578063e525feea14610289578063e9eade6f146102a9578063ead549eb146102c9575b600080fd5b3480156100c957600080fd5b50606c546100dd906001600160a01b031681565b6040516100ea91906114c1565b60405180910390f35b3480156100ff57600080fd5b5061011361010e3660046114f9565b6102e9565b005b34801561012157600080fd5b5061013561013036600461153a565b6103ba565b6040516100ea91906115c1565b6101136101503660046116cf565b61045d565b34801561016157600080fd5b5061016a610516565b6040516100ea919061172c565b34801561018357600080fd5b50606b546100dd906001600160a01b031681565b3480156101a357600080fd5b506101136101b236600461173a565b610573565b3480156101c357600080fd5b506101cc6106cb565b6040516100ea91906117f6565b3480156101e557600080fd5b5061020f6101f436600461153a565b6001600160401b031660009081526065602052604090205490565b6040516100ea9190611804565b34801561022857600080fd5b5061023c61023736600461153a565b6106da565b6040516100ea919061181a565b34801561025557600080fd5b50610113610264366004611828565b610771565b34801561027557600080fd5b50606d546100dd906001600160a01b031681565b34801561029557600080fd5b5061020f6102a436600461188c565b610bbc565b3480156102b557600080fd5b5061020f6102c436600461153a565b610cd5565b3480156102d557600080fd5b506101136102e4366004611961565b610de0565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361033a5760405162461bcd60e51b815260040161033190611a27565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661036c610e86565b6001600160a01b0316146103925760405162461bcd60e51b815260040161033190611a6e565b61039b81610ea2565b604080516000808252602082019092526103b791839190610f3b565b50565b6001600160401b0381166000908152606560209081526040918290208054835181840281018401909452808452606093919283919083018282801561045057602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161040d5790505b5050505050915050919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104a55760405162461bcd60e51b815260040161033190611a27565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104d7610e86565b6001600160a01b0316146104fd5760405162461bcd60e51b815260040161033190611a6e565b61050682610ea2565b61051282826001610f3b565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105605760405162461bcd60e51b815260040161033190611ad3565b5060008051602061227383398151915290565b600054610100900460ff16158080156105935750600054600160ff909116105b806105b457506105a23061101d565b1580156105b4575060005460ff166001145b6105d05760405162461bcd60e51b815260040161033190611b2e565b6000805460ff1916600117905580156105f3576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038c8116919091179092556067805482168b84161790556068805482168a8416179055606980548216898416179055606a80548216888416179055606b80548216878416179055606c80548216868416179055606d805490911691841691909117905561067561102c565b80156106c0576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906106b790600190611b52565b60405180910390a15b505050505050505050565b60006106d5610e86565b905090565b6001600160401b038116600090815260656020526040808220606c5491516314bcfacf60e31b815290916001600160a01b03169063a5e7d67890610722908690600401611804565b600060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107679190810190611be0565b5190541492915050565b606d54604051636397640760e01b81526001600160a01b03909116906363976407906107a1908790600401611804565b602060405180830381865afa1580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e29190611c25565b336001600160a01b0382161461080a5760405162461bcd60e51b815260040161033190611c7d565b606a546040516357e926df60e01b81526001600160a01b03909116908490879083906357e926df906108429085908590600401611c8d565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611ca8565b6001600160401b0316156108ae578181604051637f579cdf60e01b8152600401610331929190611c8d565b606a54604051635ca64ded60e01b81526001600160a01b0390911690635ca64ded906108e09089908c90600401611c8d565b602060405180830381865afa1580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190611ce1565b600581111561093257610932611d02565b6001146109515760405162461bcd60e51b815260040161033190611d44565b6001600160401b038816600090815260656020526040808220606954915163ceb1a8cb60e01b81529092916001600160a01b03169063ceb1a8cb9061099c908c908b90600401611c8d565b6000604051808303816000875af11580156109bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e39190810190611dd0565b606a546040516326ca5a7160e01b81529192506000916001600160a01b03909116906326ca5a7190610a19908c90600401611804565b602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190611e1b565b90506000610a6782611055565b90508080519060200120838051906020012014610a965760405162461bcd60e51b815260040161033190611e5f565b836000018a90806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a8154816001600160401b0302191690836001600160401b03160217905550606a60009054906101000a90046001600160a01b03166001600160a01b03166391e3ce748b8e8c6040518463ffffffff1660e01b8152600401610b3193929190611e6f565b600060405180830381600087803b158015610b4b57600080fd5b505af1158015610b5f573d6000803e3d6000fd5b50505050896001600160401b03168c6001600160401b03167fa6c04d0af3a021b71a35f71b64f305d03cfdbb8e1c7de1d8f7ddb3020839c9c78b604051610ba69190611804565b60405180910390a3505050505050505050505050565b6001600160401b0382166000908152606560205260408120815b81546001600160401b0382161015610cc857836001600160401b031682600001826001600160401b031681548110610c1057610c10611e97565b6000918252602090912060048204015460039091166008026101000a90046001600160401b031603610cb657606a5460405163cf24e53b60e01b81526001600160a01b039091169063cf24e53b90610c6c908790600401611804565b602060405180830381865afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190611ca8565b92505050610ccf565b80610cc081611ec3565b915050610bd6565b5060009150505b92915050565b6001600160401b038116600090815260656020526040812081805b82546001600160401b0382161015610dd857606a5483546001600160a01b039091169063cf24e53b9085906001600160401b038516908110610d3457610d34611e97565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b03166040518263ffffffff1660e01b8152600401610d799190611804565b602060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190611ca8565b610dc49083611eed565b915080610dd081611ec3565b915050610cf0565b509392505050565b8051825114610e0857815181516040516379ef9bd560e01b8152600401610331929190611f20565b60005b8251816001600160401b03161015610e7f57610e6d858585846001600160401b031681518110610e3d57610e3d611e97565b602002602001015185856001600160401b031681518110610e6057610e60611e97565b6020026020010151610771565b80610e7781611ec3565b915050610e0b565b5050505050565b600080516020612273833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610ed99084903390600401611f3b565b602060405180830381865afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190611f69565b610f365760405162461bcd60e51b815260040161033190611fbb565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610f6e57610f368361111c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610fc8575060408051601f3d908101601f19168201909252610fc591810190611e1b565b60015b610fe45760405162461bcd60e51b815260040161033190612016565b60008051602061227383398151915281146110115760405162461bcd60e51b81526004016103319061206c565b50610f36838383611170565b6001600160a01b03163b151590565b600054610100900460ff166110535760405162461bcd60e51b8152600401610331906120c4565b565b606061f1016110126000611069600161119b565b6110728461119b565b6040516020016110839291906120f6565b6040516020818303038152906040529050600061109f8361119b565b6110a9602061119b565b6040516020016110ba9291906120f6565b604051602081830303815290604052905080866040516020016110de92919061210e565b604051602081830303815290604052905081816040516020016111029291906120f6565b604051602081830303815290604052945050505050919050565b6111258161101d565b6111415760405162461bcd60e51b81526004016103319061217a565b60008051602061227383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6111798361131a565b6000825111806111865750805b15610f3657611195838361135a565b50505050565b60408051600a8082526101608201909252606091600091829160208201610140803683370190505090505b6080846001600160401b0316106112275783608017818360ff16815181106111f0576111f0611e97565b602002602001019060ff16908160ff16815250506007846001600160401b0316901c9350818061121f9061218a565b9250506111c6565b83818360ff168151811061123d5761123d611e97565b60ff90921660209283029190910190910152600061125c8360016121a0565b60ff166001600160401b03811115611276576112766115dc565b6040519080825280601f01601f1916602001820160405280156112a0576020820181803683370190505b50905060005b8360ff168160ff161161131157828160ff16815181106112c8576112c8611e97565b602002602001015160f81b828260ff16815181106112e8576112e8611e97565b60200101906001600160f81b031916908160001a905350806113098161218a565b9150506112a6565b50949350505050565b6113238161111c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061137f838360405180606001604052806027815260200161229360279139611386565b9392505050565b6060600080856001600160a01b0316856040516113a391906121bd565b600060405180830381855af49150503d80600081146113de576040519150601f19603f3d011682016040523d82523d6000602084013e6113e3565b606091505b50915091506113f4868383876113fe565b9695505050505050565b6060831561143b578251600003611434576114188561101d565b6114345760405162461bcd60e51b8152600401610331906121fd565b5081611445565b611445838361144d565b949350505050565b81511561145d5781518083602001fd5b8060405162461bcd60e51b81526004016103319190612241565b6001600160a01b031690565b6000610ccf61149761149484611477565b90565b611477565b6000610ccf82611483565b6000610ccf8261149c565b6114bb816114a7565b82525050565b60208101610ccf82846114b2565b6000610ccf82611477565b6114e3816114cf565b81146103b757600080fd5b8035610ccf816114da565b60006020828403121561150e5761150e600080fd5b600061144584846114ee565b6001600160401b031690565b6114e38161151a565b8035610ccf81611526565b60006020828403121561154f5761154f600080fd5b6000611445848461152f565b6114bb8161151a565b6000611570838361155b565b505060200190565b6000611582825190565b80845260209384019383018060005b838110156115b65781516115a58882611564565b975060208301925050600101611591565b509495945050505050565b6020808252810161137f8184611578565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6115fb826115d2565b81018181106001600160401b0382111715611618576116186115dc565b6040525050565b600061162a60405190565b905061163682826115f2565b919050565b60006001600160401b03821115611654576116546115dc565b61165d826115d2565b60200192915050565b82818337506000910152565b60006116856116808461163b565b61161f565b9050828152602081018484840111156116a0576116a0600080fd5b610dd8848285611666565b600082601f8301126116bf576116bf600080fd5b8135611445848260208601611672565b600080604083850312156116e5576116e5600080fd5b60006116f185856114ee565b92505060208301356001600160401b0381111561171057611710600080fd5b61171c858286016116ab565b9150509250929050565b806114bb565b60208101610ccf8284611726565b600080600080600080600080610100898b03121561175a5761175a600080fd5b60006117668b8b6114ee565b98505060206117778b828c016114ee565b97505060406117888b828c016114ee565b96505060606117998b828c016114ee565b95505060806117aa8b828c016114ee565b94505060a06117bb8b828c016114ee565b93505060c06117cc8b828c016114ee565b92505060e06117dd8b828c016114ee565b9150509295985092959890939650565b6114bb816114cf565b60208101610ccf82846117ed565b60208101610ccf828461155b565b8015156114bb565b60208101610ccf8284611812565b6000806000806080858703121561184157611841600080fd5b600061184d878761152f565b945050602061185e8782880161152f565b935050604061186f8782880161152f565b92505060606118808782880161152f565b91505092959194509250565b600080604083850312156118a2576118a2600080fd5b60006118ae858561152f565b925050602061171c8582860161152f565b60006001600160401b038211156118d8576118d86115dc565b5060209081020190565b60006118f0611680846118bf565b8381529050602080820190840283018581111561190f5761190f600080fd5b835b818110156119335780611924888261152f565b84525060209283019201611911565b5050509392505050565b600082601f83011261195157611951600080fd5b81356114458482602086016118e2565b6000806000806080858703121561197a5761197a600080fd5b6000611986878761152f565b94505060206119978782880161152f565b93505060408501356001600160401b038111156119b6576119b6600080fd5b6119c28782880161193d565b92505060608501356001600160401b038111156119e1576119e1600080fd5b6118808782880161193d565b602c815260006020820160008051602061225383398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610ccf816119ed565b602c815260006020820160008051602061225383398151915281526b6163746976652070726f787960a01b60208201529150611a20565b60208082528101610ccf81611a37565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150611a20565b60208082528101610ccf81611a7e565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611a20565b60208082528101610ccf81611ae3565b600060ff8216610ccf565b6114bb81611b3e565b60208101610ccf8284611b49565b8051610ccf81611526565b6000611b79611680846118bf565b83815290506020808201908402830185811115611b9857611b98600080fd5b835b818110156119335780611bad8882611b60565b84525060209283019201611b9a565b600082601f830112611bd057611bd0600080fd5b8151611445848260208601611b6b565b600060208284031215611bf557611bf5600080fd5b81516001600160401b03811115611c0e57611c0e600080fd5b61144584828501611bbc565b8051610ccf816114da565b600060208284031215611c3a57611c3a600080fd5b60006114458484611c1a565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c000000815291505b5060200190565b60208082528101610ccf81611c46565b60408101611c9b828561155b565b61137f602083018461155b565b600060208284031215611cbd57611cbd600080fd5b60006114458484611b60565b600681106103b757600080fd5b8051610ccf81611cc9565b600060208284031215611cf657611cf6600080fd5b60006114458484611cd6565b634e487b7160e01b600052602160045260246000fd5b6015815260006020820174496e76616c6964205265706c69636120537461746560581b81529150611c76565b60208082528101610ccf81611d18565b60005b83811015611d6f578181015183820152602001611d57565b50506000910152565b6000611d866116808461163b565b905082815260208101848484011115611da157611da1600080fd5b610dd8848285611d54565b600082601f830112611dc057611dc0600080fd5b8151611445848260208601611d78565b600060208284031215611de557611de5600080fd5b81516001600160401b03811115611dfe57611dfe600080fd5b61144584828501611dac565b806114e3565b8051610ccf81611e0a565b600060208284031215611e3057611e30600080fd5b60006114458484611e10565b600c81526000602082016b0c6d2c840dad2e6dac2e8c6d60a31b81529150611c76565b60208082528101610ccf81611e3c565b60608101611e7d828661155b565b611e8a602083018561155b565b611445604083018461155b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000611ece8261151a565b91506001600160401b038203611ee657611ee6611ead565b5060010190565b6000611ef88261151a565b9150611f038361151a565b9250508082016001600160401b03811115610ccf57610ccf611ead565b60408101611f2e8285611726565b61137f6020830184611726565b60408101611f498285611726565b61137f60208301846117ed565b8015156114e3565b8051610ccf81611f56565b600060208284031215611f7e57611f7e600080fd5b60006114458484611f5e565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150611c76565b60208082528101610ccf81611f8a565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150611a20565b60208082528101610ccf81611fcb565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150611a20565b60208082528101610ccf81612026565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611a20565b60208082528101610ccf8161207c565b60006120de825190565b6120ec818560208601611d54565b9290920192915050565b600061210282856120d4565b915061144582846120d4565b600061211a82856120d4565b91506121268284611726565b5060200192915050565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150611a20565b60208082528101610ccf81612130565b60ff16600060fe198201611ee657611ee6611ead565b60ff918216919081169082820190811115610ccf57610ccf611ead565b600061137f82846120d4565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611c76565b60208082528101610ccf816121c9565b6000612217825190565b80845260208401935061222e818560208601611d54565b612237816115d2565b9093019392505050565b6020808252810161137f818461220d56fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be848e75ac144c711c67a93469d5bec4e14cae07b79b95fa7a99af559ead163364736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100b85760003560e01c80632620333e146100bd5780633659cfe6146100f35780634b06f57b146101155780634f1ef2861461014257806352d1902d14610155578063840febd9146101775780638a29e2de14610197578063aaf10f42146101b7578063af9863b3146101d9578063b83ab4f91461021c578063cff371ce14610249578063dd8fff9714610269578063e525feea14610289578063e9eade6f146102a9578063ead549eb146102c9575b600080fd5b3480156100c957600080fd5b50606c546100dd906001600160a01b031681565b6040516100ea91906114c1565b60405180910390f35b3480156100ff57600080fd5b5061011361010e3660046114f9565b6102e9565b005b34801561012157600080fd5b5061013561013036600461153a565b6103ba565b6040516100ea91906115c1565b6101136101503660046116cf565b61045d565b34801561016157600080fd5b5061016a610516565b6040516100ea919061172c565b34801561018357600080fd5b50606b546100dd906001600160a01b031681565b3480156101a357600080fd5b506101136101b236600461173a565b610573565b3480156101c357600080fd5b506101cc6106cb565b6040516100ea91906117f6565b3480156101e557600080fd5b5061020f6101f436600461153a565b6001600160401b031660009081526065602052604090205490565b6040516100ea9190611804565b34801561022857600080fd5b5061023c61023736600461153a565b6106da565b6040516100ea919061181a565b34801561025557600080fd5b50610113610264366004611828565b610771565b34801561027557600080fd5b50606d546100dd906001600160a01b031681565b34801561029557600080fd5b5061020f6102a436600461188c565b610bbc565b3480156102b557600080fd5b5061020f6102c436600461153a565b610cd5565b3480156102d557600080fd5b506101136102e4366004611961565b610de0565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361033a5760405162461bcd60e51b815260040161033190611a27565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661036c610e86565b6001600160a01b0316146103925760405162461bcd60e51b815260040161033190611a6e565b61039b81610ea2565b604080516000808252602082019092526103b791839190610f3b565b50565b6001600160401b0381166000908152606560209081526040918290208054835181840281018401909452808452606093919283919083018282801561045057602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161040d5790505b5050505050915050919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104a55760405162461bcd60e51b815260040161033190611a27565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104d7610e86565b6001600160a01b0316146104fd5760405162461bcd60e51b815260040161033190611a6e565b61050682610ea2565b61051282826001610f3b565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105605760405162461bcd60e51b815260040161033190611ad3565b5060008051602061227383398151915290565b600054610100900460ff16158080156105935750600054600160ff909116105b806105b457506105a23061101d565b1580156105b4575060005460ff166001145b6105d05760405162461bcd60e51b815260040161033190611b2e565b6000805460ff1916600117905580156105f3576000805461ff0019166101001790555b606680546001600160a01b03199081166001600160a01b038c8116919091179092556067805482168b84161790556068805482168a8416179055606980548216898416179055606a80548216888416179055606b80548216878416179055606c80548216868416179055606d805490911691841691909117905561067561102c565b80156106c0576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906106b790600190611b52565b60405180910390a15b505050505050505050565b60006106d5610e86565b905090565b6001600160401b038116600090815260656020526040808220606c5491516314bcfacf60e31b815290916001600160a01b03169063a5e7d67890610722908690600401611804565b600060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107679190810190611be0565b5190541492915050565b606d54604051636397640760e01b81526001600160a01b03909116906363976407906107a1908790600401611804565b602060405180830381865afa1580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e29190611c25565b336001600160a01b0382161461080a5760405162461bcd60e51b815260040161033190611c7d565b606a546040516357e926df60e01b81526001600160a01b03909116908490879083906357e926df906108429085908590600401611c8d565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611ca8565b6001600160401b0316156108ae578181604051637f579cdf60e01b8152600401610331929190611c8d565b606a54604051635ca64ded60e01b81526001600160a01b0390911690635ca64ded906108e09089908c90600401611c8d565b602060405180830381865afa1580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190611ce1565b600581111561093257610932611d02565b6001146109515760405162461bcd60e51b815260040161033190611d44565b6001600160401b038816600090815260656020526040808220606954915163ceb1a8cb60e01b81529092916001600160a01b03169063ceb1a8cb9061099c908c908b90600401611c8d565b6000604051808303816000875af11580156109bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e39190810190611dd0565b606a546040516326ca5a7160e01b81529192506000916001600160a01b03909116906326ca5a7190610a19908c90600401611804565b602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190611e1b565b90506000610a6782611055565b90508080519060200120838051906020012014610a965760405162461bcd60e51b815260040161033190611e5f565b836000018a90806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a8154816001600160401b0302191690836001600160401b03160217905550606a60009054906101000a90046001600160a01b03166001600160a01b03166391e3ce748b8e8c6040518463ffffffff1660e01b8152600401610b3193929190611e6f565b600060405180830381600087803b158015610b4b57600080fd5b505af1158015610b5f573d6000803e3d6000fd5b50505050896001600160401b03168c6001600160401b03167fa6c04d0af3a021b71a35f71b64f305d03cfdbb8e1c7de1d8f7ddb3020839c9c78b604051610ba69190611804565b60405180910390a3505050505050505050505050565b6001600160401b0382166000908152606560205260408120815b81546001600160401b0382161015610cc857836001600160401b031682600001826001600160401b031681548110610c1057610c10611e97565b6000918252602090912060048204015460039091166008026101000a90046001600160401b031603610cb657606a5460405163cf24e53b60e01b81526001600160a01b039091169063cf24e53b90610c6c908790600401611804565b602060405180830381865afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190611ca8565b92505050610ccf565b80610cc081611ec3565b915050610bd6565b5060009150505b92915050565b6001600160401b038116600090815260656020526040812081805b82546001600160401b0382161015610dd857606a5483546001600160a01b039091169063cf24e53b9085906001600160401b038516908110610d3457610d34611e97565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b03166040518263ffffffff1660e01b8152600401610d799190611804565b602060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190611ca8565b610dc49083611eed565b915080610dd081611ec3565b915050610cf0565b509392505050565b8051825114610e0857815181516040516379ef9bd560e01b8152600401610331929190611f20565b60005b8251816001600160401b03161015610e7f57610e6d858585846001600160401b031681518110610e3d57610e3d611e97565b602002602001015185856001600160401b031681518110610e6057610e60611e97565b6020026020010151610771565b80610e7781611ec3565b915050610e0b565b5050505050565b600080516020612273833981519152546001600160a01b031690565b606754604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610ed99084903390600401611f3b565b602060405180830381865afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190611f69565b610f365760405162461bcd60e51b815260040161033190611fbb565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610f6e57610f368361111c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610fc8575060408051601f3d908101601f19168201909252610fc591810190611e1b565b60015b610fe45760405162461bcd60e51b815260040161033190612016565b60008051602061227383398151915281146110115760405162461bcd60e51b81526004016103319061206c565b50610f36838383611170565b6001600160a01b03163b151590565b600054610100900460ff166110535760405162461bcd60e51b8152600401610331906120c4565b565b606061f1016110126000611069600161119b565b6110728461119b565b6040516020016110839291906120f6565b6040516020818303038152906040529050600061109f8361119b565b6110a9602061119b565b6040516020016110ba9291906120f6565b604051602081830303815290604052905080866040516020016110de92919061210e565b604051602081830303815290604052905081816040516020016111029291906120f6565b604051602081830303815290604052945050505050919050565b6111258161101d565b6111415760405162461bcd60e51b81526004016103319061217a565b60008051602061227383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6111798361131a565b6000825111806111865750805b15610f3657611195838361135a565b50505050565b60408051600a8082526101608201909252606091600091829160208201610140803683370190505090505b6080846001600160401b0316106112275783608017818360ff16815181106111f0576111f0611e97565b602002602001019060ff16908160ff16815250506007846001600160401b0316901c9350818061121f9061218a565b9250506111c6565b83818360ff168151811061123d5761123d611e97565b60ff90921660209283029190910190910152600061125c8360016121a0565b60ff166001600160401b03811115611276576112766115dc565b6040519080825280601f01601f1916602001820160405280156112a0576020820181803683370190505b50905060005b8360ff168160ff161161131157828160ff16815181106112c8576112c8611e97565b602002602001015160f81b828260ff16815181106112e8576112e8611e97565b60200101906001600160f81b031916908160001a905350806113098161218a565b9150506112a6565b50949350505050565b6113238161111c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061137f838360405180606001604052806027815260200161229360279139611386565b9392505050565b6060600080856001600160a01b0316856040516113a391906121bd565b600060405180830381855af49150503d80600081146113de576040519150601f19603f3d011682016040523d82523d6000602084013e6113e3565b606091505b50915091506113f4868383876113fe565b9695505050505050565b6060831561143b578251600003611434576114188561101d565b6114345760405162461bcd60e51b8152600401610331906121fd565b5081611445565b611445838361144d565b949350505050565b81511561145d5781518083602001fd5b8060405162461bcd60e51b81526004016103319190612241565b6001600160a01b031690565b6000610ccf61149761149484611477565b90565b611477565b6000610ccf82611483565b6000610ccf8261149c565b6114bb816114a7565b82525050565b60208101610ccf82846114b2565b6000610ccf82611477565b6114e3816114cf565b81146103b757600080fd5b8035610ccf816114da565b60006020828403121561150e5761150e600080fd5b600061144584846114ee565b6001600160401b031690565b6114e38161151a565b8035610ccf81611526565b60006020828403121561154f5761154f600080fd5b6000611445848461152f565b6114bb8161151a565b6000611570838361155b565b505060200190565b6000611582825190565b80845260209384019383018060005b838110156115b65781516115a58882611564565b975060208301925050600101611591565b509495945050505050565b6020808252810161137f8184611578565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6115fb826115d2565b81018181106001600160401b0382111715611618576116186115dc565b6040525050565b600061162a60405190565b905061163682826115f2565b919050565b60006001600160401b03821115611654576116546115dc565b61165d826115d2565b60200192915050565b82818337506000910152565b60006116856116808461163b565b61161f565b9050828152602081018484840111156116a0576116a0600080fd5b610dd8848285611666565b600082601f8301126116bf576116bf600080fd5b8135611445848260208601611672565b600080604083850312156116e5576116e5600080fd5b60006116f185856114ee565b92505060208301356001600160401b0381111561171057611710600080fd5b61171c858286016116ab565b9150509250929050565b806114bb565b60208101610ccf8284611726565b600080600080600080600080610100898b03121561175a5761175a600080fd5b60006117668b8b6114ee565b98505060206117778b828c016114ee565b97505060406117888b828c016114ee565b96505060606117998b828c016114ee565b95505060806117aa8b828c016114ee565b94505060a06117bb8b828c016114ee565b93505060c06117cc8b828c016114ee565b92505060e06117dd8b828c016114ee565b9150509295985092959890939650565b6114bb816114cf565b60208101610ccf82846117ed565b60208101610ccf828461155b565b8015156114bb565b60208101610ccf8284611812565b6000806000806080858703121561184157611841600080fd5b600061184d878761152f565b945050602061185e8782880161152f565b935050604061186f8782880161152f565b92505060606118808782880161152f565b91505092959194509250565b600080604083850312156118a2576118a2600080fd5b60006118ae858561152f565b925050602061171c8582860161152f565b60006001600160401b038211156118d8576118d86115dc565b5060209081020190565b60006118f0611680846118bf565b8381529050602080820190840283018581111561190f5761190f600080fd5b835b818110156119335780611924888261152f565b84525060209283019201611911565b5050509392505050565b600082601f83011261195157611951600080fd5b81356114458482602086016118e2565b6000806000806080858703121561197a5761197a600080fd5b6000611986878761152f565b94505060206119978782880161152f565b93505060408501356001600160401b038111156119b6576119b6600080fd5b6119c28782880161193d565b92505060608501356001600160401b038111156119e1576119e1600080fd5b6118808782880161193d565b602c815260006020820160008051602061225383398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b60208082528101610ccf816119ed565b602c815260006020820160008051602061225383398151915281526b6163746976652070726f787960a01b60208201529150611a20565b60208082528101610ccf81611a37565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150611a20565b60208082528101610ccf81611a7e565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611a20565b60208082528101610ccf81611ae3565b600060ff8216610ccf565b6114bb81611b3e565b60208101610ccf8284611b49565b8051610ccf81611526565b6000611b79611680846118bf565b83815290506020808201908402830185811115611b9857611b98600080fd5b835b818110156119335780611bad8882611b60565b84525060209283019201611b9a565b600082601f830112611bd057611bd0600080fd5b8151611445848260208601611b6b565b600060208284031215611bf557611bf5600080fd5b81516001600160401b03811115611c0e57611c0e600080fd5b61144584828501611bbc565b8051610ccf816114da565b600060208284031215611c3a57611c3a600080fd5b60006114458484611c1a565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c000000815291505b5060200190565b60208082528101610ccf81611c46565b60408101611c9b828561155b565b61137f602083018461155b565b600060208284031215611cbd57611cbd600080fd5b60006114458484611b60565b600681106103b757600080fd5b8051610ccf81611cc9565b600060208284031215611cf657611cf6600080fd5b60006114458484611cd6565b634e487b7160e01b600052602160045260246000fd5b6015815260006020820174496e76616c6964205265706c69636120537461746560581b81529150611c76565b60208082528101610ccf81611d18565b60005b83811015611d6f578181015183820152602001611d57565b50506000910152565b6000611d866116808461163b565b905082815260208101848484011115611da157611da1600080fd5b610dd8848285611d54565b600082601f830112611dc057611dc0600080fd5b8151611445848260208601611d78565b600060208284031215611de557611de5600080fd5b81516001600160401b03811115611dfe57611dfe600080fd5b61144584828501611dac565b806114e3565b8051610ccf81611e0a565b600060208284031215611e3057611e30600080fd5b60006114458484611e10565b600c81526000602082016b0c6d2c840dad2e6dac2e8c6d60a31b81529150611c76565b60208082528101610ccf81611e3c565b60608101611e7d828661155b565b611e8a602083018561155b565b611445604083018461155b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000611ece8261151a565b91506001600160401b038203611ee657611ee6611ead565b5060010190565b6000611ef88261151a565b9150611f038361151a565b9250508082016001600160401b03811115610ccf57610ccf611ead565b60408101611f2e8285611726565b61137f6020830184611726565b60408101611f498285611726565b61137f60208301846117ed565b8015156114e3565b8051610ccf81611f56565b600060208284031215611f7e57611f7e600080fd5b60006114458484611f5e565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150611c76565b60208082528101610ccf81611f8a565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150611a20565b60208082528101610ccf81611fcb565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150611a20565b60208082528101610ccf81612026565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611a20565b60208082528101610ccf8161207c565b60006120de825190565b6120ec818560208601611d54565b9290920192915050565b600061210282856120d4565b915061144582846120d4565b600061211a82856120d4565b91506121268284611726565b5060200192915050565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150611a20565b60208082528101610ccf81612130565b60ff16600060fe198201611ee657611ee6611ead565b60ff918216919081169082820190811115610ccf57610ccf611ead565b600061137f82846120d4565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611c76565b60208082528101610ccf816121c9565b6000612217825190565b80845260208401935061222e818560208601611d54565b612237816115d2565b9093019392505050565b6020808252810161137f818461220d56fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be848e75ac144c711c67a93469d5bec4e14cae07b79b95fa7a99af559ead163364736f6c63430008150033",
  "devdoc": {
    "details": "Manages the storage of matched data after successful matching with Filecoin storage deals.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "StorageClaimIdSubmitted(uint64,uint64,uint64)": {
        "details": "Submits a Filecoin claim ID for a matched store after successful matching.",
        "params": {
          "_claimId": "The Filecoin claim ID.",
          "_id": "The ID of the file.",
          "_matchingId": "The ID of the matching store."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "getStoredCarCount(uint64)": {
        "details": "Gets the count of done cars in the matchedstore."
      },
      "getStoredCarSize(uint64,uint64)": {
        "details": "Gets the car size in the matchedstore."
      },
      "getStoredCars(uint64)": {
        "details": "Gets the list of done cars in the matchedstore."
      },
      "getTotalStoredSize(uint64)": {
        "details": "Gets the stored size in the matchedstore."
      },
      "isAllStoredDone(uint64)": {
        "details": "Checks if all cars are done in the matchedstore."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "submitStorageClaimId(uint64,uint64,uint64,uint64)": {
        "details": "Submits a Filecoin claim Id for a matchedstore after successful matching.",
        "params": {
          "_claimId": "The ID of the successful Filecoin storage deal.",
          "_id": "The content identifier of the matched data.",
          "_matchingId": "The ID of the matching.",
          "_provider": "A provider of storage provider of matching."
        }
      },
      "submitStorageClaimIds(uint64,uint64,uint64[],uint64[])": {
        "details": "Submits multiple Filecoin claim Ids for a matchedstore after successful matching.",
        "params": {
          "_claimIds": "An array of IDs of successful Filecoin storage deals.",
          "_ids": "An array of content identifiers of the matched data.",
          "_matchingId": "The ID of the matching.",
          "_provider": "A provider of storage provider of matching."
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "storages",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ParamLengthMismatch(uint256,uint256)": [
        {
          "notice": "commmon errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "initialize(address,address,address,address,address,address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "matchings()": {
        "notice": "get matchings instance"
      },
      "matchingsBids()": {
        "notice": "get matchingsBids instance"
      },
      "matchingsTarget()": {
        "notice": "get matchingsTarget instance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31059,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "storages",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint64,t_struct(Storage)35487_storage)"
      },
      {
        "astId": 31061,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 31064,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "roles",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IRoles)20939"
      },
      {
        "astId": 31067,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "filplus",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IFilplus)20899"
      },
      {
        "astId": 31070,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "filecoin",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IFilecoin)20711"
      },
      {
        "astId": 31073,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "carstore",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ICarstore)20452"
      },
      {
        "astId": 31076,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "matchings",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IMatchings)21653"
      },
      {
        "astId": 31079,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "matchingsTarget",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IMatchingsTarget)21907"
      },
      {
        "astId": 31082,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "matchingsBids",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IMatchingsBids)21747"
      },
      {
        "astId": 31087,
        "contract": "src/v0.8/module/storage/Storages.sol:Storages",
        "label": "__gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICarstore)20452": {
        "encoding": "inplace",
        "label": "contract ICarstore",
        "numberOfBytes": "20"
      },
      "t_contract(IFilecoin)20711": {
        "encoding": "inplace",
        "label": "contract IFilecoin",
        "numberOfBytes": "20"
      },
      "t_contract(IFilplus)20899": {
        "encoding": "inplace",
        "label": "contract IFilplus",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchings)21653": {
        "encoding": "inplace",
        "label": "contract IMatchings",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsBids)21747": {
        "encoding": "inplace",
        "label": "contract IMatchingsBids",
        "numberOfBytes": "20"
      },
      "t_contract(IMatchingsTarget)21907": {
        "encoding": "inplace",
        "label": "contract IMatchingsTarget",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)20939": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_struct(Storage)35487_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StorageType.Storage)",
        "numberOfBytes": "32",
        "value": "t_struct(Storage)35487_storage"
      },
      "t_struct(Storage)35487_storage": {
        "encoding": "inplace",
        "label": "struct StorageType.Storage",
        "members": [
          {
            "astId": 35486,
            "contract": "src/v0.8/module/storage/Storages.sol:Storages",
            "label": "doneCars",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint64)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}