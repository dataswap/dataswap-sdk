{
  "address": "0x6AdaC620dfa32b11495E453757972E8868F4B918",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accessMethod",
          "type": "string"
        }
      ],
      "name": "DatasetMetadataAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "datasetId",
          "type": "uint64"
        }
      ],
      "name": "InvalidDatasetState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "DatasetApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "DatasetMetadataApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "DatasetMetadataRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "DatasetMetadataSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "DatasetRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_size",
          "type": "uint64"
        }
      ],
      "name": "addDatasetUsedSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "approveDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "approveDatasetMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "datasetsCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "getDatasetMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "industry",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "accessMethod",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "createdBlockNumber",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sizeInBytes",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "getDatasetMetadataSubmitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "getDatasetState",
      "outputs": [
        {
          "internalType": "enum DatasetType.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "getDatasetUsedSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_accessMethod",
          "type": "string"
        }
      ],
      "name": "hasDatasetMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_datasetsProof",
          "type": "address"
        }
      ],
      "name": "initDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "rejectDataset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "rejectDatasetMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "reportDatasetProofSubmitted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "reportDatasetReplicaRequirementSubmitted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "reportFundsEnough",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "reportFundsNotEnough",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_datasetId",
          "type": "uint64"
        }
      ],
      "name": "requireValidDatasetMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract IRoles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_industry",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_accessMethod",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_sizeInBytes",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_isPublic",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "_version",
          "type": "uint64"
        }
      ],
      "name": "submitDatasetMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9021cb8d818084f87f27b3e6df282435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accessMethod\",\"type\":\"string\"}],\"name\":\"DatasetMetadataAlreadyExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"datasetId\",\"type\":\"uint64\"}],\"name\":\"InvalidDatasetState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"DatasetApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"DatasetMetadataApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"DatasetMetadataRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"DatasetMetadataSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"DatasetRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_size\",\"type\":\"uint64\"}],\"name\":\"addDatasetUsedSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"approveDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"approveDatasetMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"datasetsCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"getDatasetMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accessMethod\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"createdBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sizeInBytes\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"getDatasetMetadataSubmitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"getDatasetState\",\"outputs\":[{\"internalType\":\"enum DatasetType.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"getDatasetUsedSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_accessMethod\",\"type\":\"string\"}],\"name\":\"hasDatasetMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_datasetsProof\",\"type\":\"address\"}],\"name\":\"initDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"rejectDataset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"rejectDatasetMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"reportDatasetProofSubmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"reportDatasetReplicaRequirementSubmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"reportFundsEnough\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"reportFundsNotEnough\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_datasetId\",\"type\":\"uint64\"}],\"name\":\"requireValidDatasetMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract IRoles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_accessMethod\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_sizeInBytes\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_version\",\"type\":\"uint64\"}],\"name\":\"submitDatasetMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is intended to be inherited by specific dataset-related contracts.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"approveDataset(uint64)\":{\"details\":\"This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\"},\"approveDatasetMetadata(uint64)\":{\"details\":\"This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\"},\"initDependencies(address)\":{\"details\":\"After the contract is deployed, this function needs to be called manually!\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rejectDataset(uint64)\":{\"details\":\"This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\"},\"rejectDatasetMetadata(uint64)\":{\"details\":\"This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Datasets Base Contract\",\"version\":1},\"userdoc\":{\"events\":{\"DatasetApproved(uint64)\":{\"notice\":\"Event emitted when a dataset is approved.\"},\"DatasetMetadataApproved(uint64)\":{\"notice\":\"Event emitted when metadata is approved for a dataset.\"},\"DatasetMetadataRejected(uint64)\":{\"notice\":\"Event emitted when metadata is rejected for a dataset.\"},\"DatasetMetadataSubmitted(uint64,address)\":{\"notice\":\"Event emitted when metadata is submitted for a new dataset.\"},\"DatasetRejected(uint64)\":{\"notice\":\"Event emitted when a dataset is rejected.\"}},\"kind\":\"user\",\"methods\":{\"addDatasetUsedSize(uint64,uint64)\":{\"notice\":\"Update dataset usedSizeInBytes. only called by matching contract. TODO: Need to add permission control\"},\"approveDataset(uint64)\":{\"notice\":\"Approve a dataset.\"},\"approveDatasetMetadata(uint64)\":{\"notice\":\"Approve the metadata of a dataset.\"},\"datasetsCount()\":{\"notice\":\"Default getter functions for public variables\"},\"getDatasetMetadata(uint64)\":{\"notice\":\"Get dataset metadata\"},\"getDatasetMetadataSubmitter(uint64)\":{\"notice\":\"Get submitter of dataset's metadata\"},\"getDatasetState(uint64)\":{\"notice\":\"Get dataset state\"},\"getDatasetUsedSize(uint64)\":{\"notice\":\"Get dataset usedSizeInBytes.\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"governanceAddress()\":{\"notice\":\"get  governance address\"},\"hasDatasetMetadata(string)\":{\"notice\":\"Check if a dataset has metadata\"},\"initDependencies(address)\":{\"notice\":\"initDependencies function to initialize the datasetsProof contract.\"},\"initialize(address,address,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"},\"rejectDataset(uint64)\":{\"notice\":\"Reject a dataset.\"},\"rejectDatasetMetadata(uint64)\":{\"notice\":\"Reject the metadata of a dataset.\"},\"reportDatasetProofSubmitted(uint64)\":{\"notice\":\"Report the dataset proof has already been submitted.\"},\"reportDatasetReplicaRequirementSubmitted(uint64)\":{\"notice\":\"Report the dataset replica has already been submitted.\"},\"reportFundsEnough(uint64)\":{\"notice\":\"Report the dataset has enough collateral.\"},\"reportFundsNotEnough(uint64)\":{\"notice\":\"Report the dataset has not enough collateral.\"},\"requireValidDatasetMetadata(uint64)\":{\"notice\":\"Checks if metadata fields are valid.\"},\"roles()\":{\"notice\":\"get  roles instance\"},\"submitDatasetMetadata(string,string,string,string,string,string,uint64,bool,uint64)\":{\"notice\":\"Submit metadata for a dataset        Note:anyone can submit dataset metadata\"}},\"notice\":\"This contract serves as the base for managing Dataset, metadata, state.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/module/dataset/Datasets.sol\":\"Datasets\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373031363738333234383532\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"src/v0.8/interfaces/core/ICarstore.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n\\n/// @title ICarstoreReadOnly\\n/// @notice This interface defines the functions for get car status.\\ninterface ICarstoreReadOnly {\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The car size of the car.\\n    function getCarSize(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the total size of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to calculate the size.\\n    /// @return The total size of cars.\\n    function getCarsSize(uint64[] memory _ids) external view returns (uint64);\\n\\n    /// @notice Get the dataset ID associated with a car.\\n    /// @param _id Car ID to check.\\n    /// @return The dataset ID of the car.\\n    /// NOTE: a car only belongs a datasets\\n    function getCarDatasetId(uint64 _id) external view returns (uint64);\\n\\n    /// @notice Get the matching ids of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @return The matching ids of the car's replica.\\n    function getCarMatchingIds(\\n        uint64 _id\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Get the replica details associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The dataset ID, state, and Filecoin claim ID of the replica.\\n    function getCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State, uint64);\\n\\n    /// @notice Get the count of replicas associated with a car.\\n    /// @param _id Car ID for which to retrieve the replica count.\\n    /// @return The count of replicas associated with the car.\\n    function getCarReplicasCount(uint64 _id) external view returns (uint16);\\n\\n    /// @notice Get the Filecoin claim ID associated with a specific replica of a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The Filecoin claim ID of the replica.\\n    function getCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (uint64);\\n\\n    /// @notice Get the state of a replica associated with a car.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @return The state of the replica.\\n    function getCarReplicaState(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (CarReplicaType.State);\\n\\n    /// @notice Get the hash of car based on the car id.\\n    /// @param _id Car ID which to get car hash.\\n    /// @return The hash of the car.\\n    function getCarHash(uint64 _id) external view returns (bytes32);\\n\\n    /// @notice Get the hashs of cars based on an array of car IDs.\\n    /// @param _ids An array of car IDs for which to get car hashs.\\n    /// @return The hashs of cars.\\n    function getCarsHashs(\\n        uint64[] memory _ids\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Get the car's id based on the car's hash.\\n    /// @param _hash The hash which to get car id.\\n    /// @return The id of the car.\\n    function getCarId(bytes32 _hash) external view returns (uint64);\\n\\n    /// @notice Get the ids of cars based on an array of car hashs.\\n    /// @param _hashs An array of car hashs for which to cat car hashs.\\n    /// @return The ids of cars.\\n    function getCarsIds(\\n        bytes32[] memory _hashs\\n    ) external view returns (uint64[] memory);\\n\\n    /// @notice Check if a car exists based on its Hash.\\n    /// @param _hash Car Hash to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarHash(bytes32 _hash) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its ID.\\n    /// @param _id Car ID to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCar(uint64 _id) external view returns (bool);\\n\\n    /// @notice Check if a replica exists within a car based on its matching ID.\\n    /// @param _id Car ID to check.\\n    /// @param _matchingId Matching ID of the replica to check.\\n    /// @return True if the replica exists, false otherwise.\\n    function hasCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) external view returns (bool);\\n\\n    /// @notice Check if a car exists based on its Hashs.\\n    /// @dev This function returns whether a car exists or not.\\n    /// @param _hashs  Array of car Hashs to check.\\n    /// @return True if the car exists, false otherwise.\\n    function hasCarsHashs(bytes32[] memory _hashs) external view returns (bool);\\n\\n    /// @notice Check if multiple cars exist based on their IDs.\\n    /// @param _ids Array of car IDs to check.\\n    /// @return True if all specified cars exist, false if any one does not exist.\\n    function hasCars(uint64[] memory _ids) external view returns (bool);\\n\\n    // Default getter functions for public variables\\n    function carsCount() external view returns (uint64);\\n\\n    /// @notice get filecoin object\\n    function filecoin() external view returns (IFilecoin);\\n\\n    /// @notice get filplus object\\n    function filplus() external view returns (IFilplus);\\n}\\n\\n/// @title ICarStore\\n/// @notice This interface defines the functions for managing car data and associated replicas.\\ninterface ICarstore is ICarstoreReadOnly {\\n    /// @dev Internal function to add a car based on its CID.\\n    ///      tips: diffent dataset has the same car is dones't matter,maybe need limit replicas count for a car.\\n    ///      filplus requires dataset replicas,but not limit for car replicas\\n    /// @param _cid Car CID to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _size car size.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The id of the car.\\n    function addCar(\\n        bytes32 _cid,\\n        uint64 _datasetId,\\n        uint64 _size,\\n        uint16 _replicaCount\\n    ) external returns (uint64);\\n\\n    /// @notice Add multiple cars to the storage.\\n    /// @dev This function allows the addition of multiple cars at once.\\n    /// @param _cids Array of car CIDs to be added.\\n    /// @param _datasetId dataset index of approved dataset.\\n    /// @param _sizes car size array.\\n    /// @param _replicaCount count of car's replicas.\\n    /// @return The ids of the cars and the size.\\n    function addCars(\\n        bytes32[] memory _cids,\\n        uint64 _datasetId,\\n        uint64[] memory _sizes,\\n        uint16 _replicaCount\\n    ) external returns (uint64[] memory, uint64);\\n\\n    /// @notice Regist a replica to a car.\\n    /// @dev This function allows adding a replica to an existing car.\\n    /// @param _id Car ID to which the replica will be added.\\n    /// @param _matchingId Matching ID for the new replica.\\n    /// @param _replicaIndex The index of the replica.\\n    function registCarReplica(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint16 _replicaIndex\\n    ) external;\\n\\n    /// @notice Report that matching's state for a replica.\\n    /// @dev This function allows reporting that the matching for a replica is failed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _matchingState Matching's state of the replica, true for success ,false for failed.\\n    function reportCarReplicaMatchingState(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        bool _matchingState\\n    ) external;\\n\\n    /// @notice Report that storage deal for a replica has expired.\\n    /// @dev This function allows reporting that the storage deal for a replica has expired.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaExpired(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Report that storage of a replica has been slashed.\\n    /// @dev This function allows reporting that the storage of a replica has been slashed.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    function reportCarReplicaSlashed(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n\\n    /// @notice Set the Filecoin claim ID for a replica's storage.\\n    /// @dev This function allows setting the Filecoin claim ID for a specific replica's storage.\\n    /// @param _id Car ID associated with the replica.\\n    /// @param _matchingId Matching ID of the replica.\\n    /// @param _claimId New Filecoin claim ID to set for the replica's storage.\\n    function setCarReplicaFilecoinClaimId(\\n        uint64 _id,\\n        uint64 _matchingId,\\n        uint64 _claimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc41c469d6b54a1e15f6e0a8c06ccb3f5980c49df88e704bb270c4f7365481917\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IEscrow.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\n\\n/// @title IEscrow Interface\\n/// @notice This interface defines the escrow-related functions within the system.\\ninterface IEscrow {\\n    /// @dev Records the sent amount as credit for future withdrawals.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Collateral} event upon successful credit recording.\\n    function collateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Redeem funds authorized for an address.\\n    /// Redeem the collateral funds after the collateral expires.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {UpdateCollateral} event upon successful credit recording.\\n    function collateralRedeem(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @notice Withdraw funds authorized for an address.\\n    /// @dev This function allows anyone to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {Withdrawn} event upon successful withdrawal.\\n    function withdraw(\\n        EscrowType.Type _type,\\n        address payable _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {Payment} event upon successful credit recording.\\n    function payment(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @dev Records the sent amount as credit for future payment withdraw.\\n    /// Note Called by the payer to store the sent amount as credit to be pulled.\\n    /// Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n    /// there is no danger of them being spent before withdrawal.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @param _amount The collateral funds.\\n    /// @notice Emits a {PaymentSingleBeneficiary} event upon successful credit recording.\\n    function paymentSingleBeneficiary(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Payment withdraw funds authorized for an address.\\n    /// @dev This function allows anyone to initiate a withdrawal of authorized funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    /// @notice Emits a {PaymentWithdrawn} event upon successful credit recording.\\n    function paymentWithdraw(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    ) external;\\n\\n    /// @notice Payment transfer funds from locked to unlocked.Only total data prepare fee allowed.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _amount The payment transfer credited funds.\\n    /// @notice Emits a {PaymentTransfer} event upon successful credit recording.\\n    function paymentTransfer(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Refund funds authorized for an address.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @notice Emits a {PaymentRefund} event upon successful credit recording.\\n    function paymentRefund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external;\\n\\n    /// @notice Post an update event for collateral type. Called by internal contract.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function emitCollateralUpdate(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        EscrowType.CollateralEvent _event\\n    ) external;\\n\\n    /// @notice Post an event for payment type. Called by internal contract\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function emitPaymentUpdate(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary,\\n        EscrowType.PaymentEvent _event\\n    ) external;\\n\\n    /// @notice Get owner created block number.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCreatedBlockNumber(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint64);\\n\\n    /// @notice Get owner collateral funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerCollateral(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner total funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerTotal(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner lock funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerLock(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get owner burned funds.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getOwnerBurned(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (uint256);\\n\\n    /// @notice Get beneficiariesList.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    function getBeneficiariesList(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get beneficiary fund.\\n    /// @param _type The Escrow type for the credited funds.\\n    /// @param _owner The destination address for the credited funds.\\n    /// @param _id The business id associated with the credited funds.\\n    /// @param _beneficiary The beneficiary address for the payment credited funds.\\n    function getBeneficiaryFund(\\n        EscrowType.Type _type,\\n        address _owner,\\n        uint64 _id,\\n        address _beneficiary\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total, // Total amount in fund account\\n            uint256 lock, // Lock amount in fund account for payment beneficiaries\\n            uint256 collateral, // Collateral amount in fund account for withdraw and punishment\\n            uint256 burned, // burned amount in fund account\\n            uint64 createdBlockNumber // Fund account created block number\\n        );\\n}\\n\",\"keccak256\":\"0x5354205979a1497f84f450308a04636bedb5ff0d38f0ee1fe953ee8afdaafc16\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb09fbb4ff74243480bfbf55be3a56a020220a915aebe48faca532462df096a06\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilplus.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IFilplus\\ninterface IFilplus {\\n    // Public getter function to access datasetRuleMaxReplicasInCountries\\n    function getDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode\\n    ) external view returns (uint16);\\n\\n    // Set functions for public variables\\n    function setDatasetRuleMinRegionsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleDefaultMaxReplicasPerCountry(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasInCountry(\\n        uint16 _countryCode,\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxReplicasPerCity(uint16 _newValue) external;\\n\\n    // set maximum proportion of dataset mapping files\\n    function setDatasetRuleMaxProportionOfMappingFilesToDataset(\\n        uint8 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMinSPsPerDataset(uint16 _newValue) external;\\n\\n    function setDatasetRuleMaxReplicasPerSP(uint16 _newValue) external;\\n\\n    function setDatasetRuleMinTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatasetRuleMaxTotalReplicasPerDataset(\\n        uint16 _newValue\\n    ) external;\\n\\n    function setDatacapRulesMaxAllocatedSizePerTime(uint64 _newValue) external;\\n\\n    function setDatacapRulesMaxRemainingPercentageForNext(\\n        uint8 _newValue\\n    ) external;\\n\\n    // Default getter functions for public variables\\n    function datasetRuleMinRegionsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleDefaultMaxReplicasPerCountry()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerCity() external view returns (uint16);\\n\\n    function datasetRuleMaxProportionOfMappingFilesToDataset()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function datasetRuleMinSPsPerDataset() external view returns (uint16);\\n\\n    function datasetRuleMaxReplicasPerSP() external view returns (uint16);\\n\\n    function datasetRuleMinTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datasetRuleMaxTotalReplicasPerDataset()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function datacapRulesMaxAllocatedSizePerTime()\\n        external\\n        view\\n        returns (uint64);\\n\\n    function datacapRulesMaxRemainingPercentageForNext()\\n        external\\n        view\\n        returns (uint8);\\n\\n    /// @notice Check if the storage area complies with filplus rules.\\n    function isCompliantRuleGeolocation(\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the mappingFiles percentage in the dataset complies with filplus rules.\\n    function isCompliantRuleMaxProportionOfMappingFilesToDataset(\\n        uint64 _mappingFilesSize,\\n        uint64 _sourceSize\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the total number of storage replicas complies with filplus rules.\\n    function isCompliantRuleTotalReplicasPerDataset(\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMinSPsPerDataset`.\\n    function isCompliantRuleMinSPsPerDataset(\\n        uint16 _requirementValue,\\n        uint16 _totalExists,\\n        uint16 _uniqueExists\\n    ) external view returns (bool);\\n\\n    /// @notice Check if the storage provider for each dataset complies with filplus rules `datasetRuleMaxReplicasPerSP`.\\n    function isCompliantRuleMaxReplicasPerSP(\\n        uint16 _value\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee080dc0e2c87242039aff68c3d2a30cece9afd59cd5260218efc6a4d4fad0a5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasets.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasets\\ninterface IDatasets {\\n    ///@notice Approve a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    function approveDataset(uint64 _datasetId) external;\\n\\n    ///@notice Approve the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    function approveDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Reject a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\\n    function rejectDataset(uint64 _datasetId) external;\\n\\n    ///@notice Reject the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    function rejectDatasetMetadata(uint64 _datasetId) external;\\n\\n    ///@notice Submit metadata for a dataset\\n    ///        Note:anyone can submit dataset metadata\\n    function submitDatasetMetadata(\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) external;\\n\\n    /// @notice Update dataset usedSizeInBytes. only called by matching contract. TODO: Need to add permission control\\n    function addDatasetUsedSize(uint64 _datasetId, uint64 _size) external;\\n\\n    /// @notice Get dataset usedSizeInBytes.\\n    function getDatasetUsedSize(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset metadata\\n    function getDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory title,\\n            string memory industry,\\n            string memory name,\\n            string memory description,\\n            string memory source,\\n            string memory accessMethod,\\n            address submitter,\\n            uint64 createdBlockNumber,\\n            uint64 sizeInBytes,\\n            bool isPublic,\\n            uint64 version\\n        );\\n\\n    /// @notice Get submitter of dataset's metadata\\n    function getDatasetMetadataSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset state\\n    function getDatasetState(\\n        uint64 _datasetId\\n    ) external view returns (DatasetType.State);\\n\\n    ///@notice Check if a dataset has metadata\\n    function hasDatasetMetadata(\\n        string memory _accessMethod\\n    ) external view returns (bool);\\n\\n    /// @notice Checks if metadata fields are valid.\\n    function requireValidDatasetMetadata(\\n        uint64 _datasetId\\n    ) external view returns (bool);\\n\\n    /// @notice Report the dataset has not enough collateral.\\n    function reportFundsNotEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset has enough collateral.\\n    function reportFundsEnough(uint64 _datasetId) external;\\n\\n    /// @notice Report the dataset replica has already been submitted.\\n    function reportDatasetReplicaRequirementSubmitted(\\n        uint64 _datasetId\\n    ) external;\\n\\n    /// @notice Report the dataset proof has already been submitted.\\n    function reportDatasetProofSubmitted(uint64 _datasetId) external;\\n\\n    /// @notice Default getter functions for public variables\\n    function datasetsCount() external view returns (uint64);\\n\\n    /// @notice get  roles instance\\n    function roles() external view returns (IRoles);\\n\\n    /// @notice get  governance address\\n    function governanceAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xefbbd972bf238a8ad40d5c4ea06027965d8c0535276939d5ede17cedce19edc1\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsChallenge.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsChallenge\\ninterface IDatasetsChallenge {\\n    ///@notice Submit challenge proof for a dataset\\n    /// Based on merkle proof challenge.\\n    /// random challenge method is used to reduce the amount of data and calculation while ensuring algorithm security.\\n    function submitDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        uint64 _randomSeed,\\n        bytes32[] memory _leaves,\\n        bytes32[][] memory _siblings,\\n        uint32[] memory _paths\\n    ) external;\\n\\n    ///@notice Get dataset challenge proofs\\n    function getDatasetChallengeProofs(\\n        uint64 _datasetId,\\n        address _auditor\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32[] memory,\\n            bytes32[][] memory _siblings,\\n            uint32[] memory _paths\\n        );\\n\\n    ///@notice Get count of dataset challenge proofs\\n    function getDatasetChallengeProofsCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Checking if duplicate verifications of the Dataset\\n    function isDatasetChallengeProofDuplicate(\\n        uint64 _datasetId,\\n        address _auditor,\\n        uint64 _randomSeed\\n    ) external view returns (bool);\\n\\n    /// @notice Get a dataset challenge count\\n    function getChallengeCount(\\n        uint64 _datasetId\\n    ) external view returns (uint64);\\n\\n    /// @notice get  merkle utils\\n    function merkleUtils() external view returns (IMerkleUtils);\\n}\\n\",\"keccak256\":\"0x81be54ccad5287408baa52cf615414ee7649cd7acb78c0057dff37793a95c470\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsProof.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IDatasetsChallenge} from \\\"src/v0.8/interfaces/module/IDatasetsChallenge.sol\\\";\\nimport {IDatasetsRequirement} from \\\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\\\";\\n\\n/// @title IDatasetsProof\\ninterface IDatasetsProof {\\n    ///@notice Submit proof root for a dataset\\n    function submitDatasetProofRoot(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        string calldata _mappingFilesAccessMethod,\\n        bytes32 _rootHash\\n    ) external;\\n\\n    ///@notice Submit proof for a dataset\\n    function submitDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        bytes32[] memory _leafHashes,\\n        uint64 _leafIndex,\\n        uint64[] memory _leafSizes,\\n        bool _completed\\n    ) external;\\n\\n    ///@notice Submit proof completed for a dataset\\n    function submitDatasetProofCompleted(uint64 _datasetId) external;\\n\\n    /// @notice Append dataset escrow funds. include datacap collateral and dataset auditor calculate fees.\\n    function appendDatasetFunds(\\n        uint64 _datasetId,\\n        uint256 _datacapCollateral,\\n        uint256 _dataAuditorFees\\n    ) external payable;\\n\\n    /// @notice Get dataset need append collateral funds\\n    function getDatasetAppendCollateral(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the dataset requires funding for dataset auditor fees\\n    function getDatasetDataAuditorFeesRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    /// @notice Get an audit fee\\n    function getDatasetDataAuditorFees(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetProof(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCars(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType,\\n        uint64 _index,\\n        uint64 _len\\n    ) external view returns (bytes32[] memory);\\n\\n    ///@notice Get dataset proof count\\n    function getDatasetProofCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset proof's submitter\\n    function getDatasetProofSubmitter(\\n        uint64 _datasetId\\n    ) external view returns (address);\\n\\n    ///@notice Get dataset source CIDs\\n    function getDatasetCarsCount(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset size\\n    function getDatasetSize(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (uint64);\\n\\n    ///@notice Get dataset minimum conditional\\n    function getDatasetCollateralRequirement(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n\\n    ///@notice Check if a dataset has a car id\\n    function isDatasetContainsCar(\\n        uint64 _datasetId,\\n        uint64 _id\\n    ) external returns (bool);\\n\\n    ///@notice Check if a dataset has car ids\\n    function isDatasetContainsCars(\\n        uint64 _datasetId,\\n        uint64[] memory _ids\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset has submitter\\n    function isDatasetProofSubmitter(\\n        uint64 _datasetId,\\n        address _submitter\\n    ) external view returns (bool);\\n\\n    ///@notice Check if a dataset proof all completed\\n    function isDatasetProofallCompleted(\\n        uint64 _datasetId,\\n        DatasetType.DataType _dataType\\n    ) external view returns (bool);\\n\\n    ///@notice get datasets instance\\n    function datasets() external view returns (IDatasets);\\n\\n    ///@notice get datasetsChallenge instance\\n    function datasetsChallenge() external view returns (IDatasetsChallenge);\\n\\n    ///@notice get datasetsRequirement instance\\n    function datasetsRequirement() external view returns (IDatasetsRequirement);\\n}\\n\",\"keccak256\":\"0xbd9f63bb5ffd68414620a3df8405438dc67e25599a18abcaa766b3c760c47b7a\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/module/IDatasetsRequirement.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IMerkleUtils} from \\\"src/v0.8/interfaces/utils/IMerkleUtils.sol\\\";\\n\\n/// @title IDatasetsRequirement\\ninterface IDatasetsRequirement {\\n    ///@notice Submit replica requirement for a dataset\\n    ///        Note: submmiter of dataset can submit dataset replica requirement\\n    /// @param _datasetId The ID of the dataset for which proof is submitted.\\n    /// @param _dataPreparers The client specified data preparer, which the client can either specify or not, but the parameter cannot be empty.\\n    /// @param _storageProviders The client specified storage provider, which the client can either specify or not, but the parameter cannot be empty.\\n    /// @param _regions The region specified by the client, and the client must specify a region for the replicas.\\n    /// @param _countrys The country specified by the client, and the client must specify a country for the replicas.\\n    /// @param _citys The citys specified by the client, when the country of a replica is duplicated, citys must be specified and cannot be empty.\\n    /// @param _amount The data preparer calculate fees.\\n    function submitDatasetReplicaRequirements(\\n        uint64 _datasetId,\\n        address[][] memory _dataPreparers,\\n        address[][] memory _storageProviders,\\n        uint16[] memory _regions,\\n        uint16[] memory _countrys,\\n        uint32[][] memory _citys,\\n        uint256 _amount\\n    ) external payable;\\n\\n    ///@notice Get dataset replicas count\\n    function getDatasetReplicasCount(\\n        uint64 _datasetId\\n    ) external view returns (uint16);\\n\\n    ///@notice Get dataset replica requirement\\n    function getDatasetReplicaRequirement(\\n        uint64 _datasetId,\\n        uint64 _index\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            address[] memory,\\n            uint16,\\n            uint16,\\n            uint32[] memory\\n        );\\n\\n    ///@notice Get dataset pre conditional\\n    function getDatasetPreCollateralRequirements(\\n        uint64 _datasetId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab86ce9c4ba0dd388c5329edc28380f265310f32ba94e1d45132ac159e66458a\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/utils/IMerkleUtils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title IMerkleUtils\\ninterface IMerkleUtils {\\n    /// @notice Validate a Merkle proof.\\n    /// @dev This function checks if a given Merkle proof is valid.\\n    function isValidMerkleProof(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        bytes32[] memory _siblings,\\n        uint32 _path\\n    ) external view returns (bool);\\n\\n    /// @notice Set mock valid state\\n    function setMockValidState(bool _state) external;\\n}\\n\",\"keccak256\":\"0xbd575f25c6eb78a215a4594e1506ffef15196c48b9666592155359492e9e34d5\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/Datasets.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IEscrow} from \\\"src/v0.8/interfaces/core/IEscrow.sol\\\";\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IDatasetsProof} from \\\"src/v0.8/interfaces/module/IDatasetsProof.sol\\\";\\n///shared\\nimport {DatasetsEvents} from \\\"src/v0.8/shared/events/DatasetsEvents.sol\\\";\\nimport {DatasetsModifiers} from \\\"src/v0.8/shared/modifiers/DatasetsModifiers.sol\\\";\\n/// library\\nimport {DatasetMetadataLIB} from \\\"src/v0.8/module/dataset/library/metadata/DatasetMetadataLIB.sol\\\";\\nimport {DatasetStateMachineLIB} from \\\"src/v0.8/module/dataset/library/metadata/DatasetStateMachineLIB.sol\\\";\\nimport {DatasetAuditLIB} from \\\"src/v0.8/module/dataset/library/metadata/DatasetAuditLIB.sol\\\";\\n\\n/// type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {EscrowType} from \\\"src/v0.8/types/EscrowType.sol\\\";\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Datasets Base Contract\\n/// @notice This contract serves as the base for managing Dataset, metadata, state.\\n/// @dev This contract is intended to be inherited by specific dataset-related contracts.\\ncontract Datasets is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IDatasets,\\n    DatasetsModifiers\\n{\\n    using DatasetMetadataLIB for DatasetType.Dataset;\\n    using DatasetAuditLIB for DatasetType.Dataset;\\n    using DatasetStateMachineLIB for DatasetType.Dataset;\\n\\n    uint64 public datasetsCount; // Total count of datasets\\n    mapping(uint64 => DatasetType.Dataset) private datasets; // Mapping of dataset ID to dataset details\\n\\n    address public governanceAddress;\\n    IRoles public roles;\\n    IEscrow public escrow;\\n    IDatasetsProof private datasetsProof;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    function initialize(\\n        address _governanceAddress,\\n        address _roles,\\n        address _escrow\\n    ) public initializer {\\n        governanceAddress = _governanceAddress;\\n        roles = IRoles(_roles);\\n        escrow = IEscrow(_escrow);\\n\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice initDependencies function to initialize the datasetsProof contract.\\n    /// @dev After the contract is deployed, this function needs to be called manually!\\n    function initDependencies(\\n        address _datasetsProof\\n    ) public onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) {\\n        datasetsProof = IDatasetsProof(_datasetsProof);\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    ///@notice Approve a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    function approveDataset(\\n        uint64 _datasetId\\n    )\\n        external\\n        onlyNotZero(_datasetId)\\n        onlyDatasetState(\\n            this,\\n            _datasetId,\\n            DatasetType.State.DatasetProofSubmitted\\n        )\\n        onlyAddress(governanceAddress)\\n    {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        uint256 funds = escrow.getOwnerTotal(\\n            EscrowType.Type.DatacapCollateral,\\n            dataset.metadata.submitter,\\n            _datasetId\\n        );\\n        if (\\n            funds >= datasetsProof.getDatasetCollateralRequirement(_datasetId)\\n        ) {\\n            // Update collateral funds to collateral requirement\\n            escrow.emitCollateralUpdate(\\n                EscrowType.Type.DatacapCollateral,\\n                dataset.metadata.submitter,\\n                _datasetId,\\n                EscrowType.CollateralEvent.SyncCollateral\\n            );\\n\\n            dataset.approveDataset();\\n            emit DatasetsEvents.DatasetApproved(_datasetId);\\n        } else {\\n            dataset.rejectDataset();\\n            emit DatasetsEvents.DatasetRejected(_datasetId);\\n        }\\n    }\\n\\n    ///@notice Approve the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    function approveDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        onlyNotZero(_datasetId)\\n        onlyDatasetState(this, _datasetId, DatasetType.State.MetadataSubmitted)\\n        onlyAddress(governanceAddress)\\n    {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n\\n        dataset.approveDatasetMetadata();\\n        emit DatasetsEvents.DatasetMetadataApproved(_datasetId);\\n    }\\n\\n    ///@notice Reject the metadata of a dataset.\\n    ///@dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    function rejectDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        external\\n        onlyNotZero(_datasetId)\\n        onlyDatasetState(this, _datasetId, DatasetType.State.MetadataSubmitted)\\n        onlyAddress(governanceAddress)\\n    {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset.rejectDatasetMetadata();\\n\\n        emit DatasetsEvents.DatasetMetadataRejected(_datasetId);\\n    }\\n\\n    ///@notice Reject a dataset.\\n    ///@dev This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event.\\n    function rejectDataset(\\n        uint64 _datasetId\\n    )\\n        external\\n        onlyNotZero(_datasetId)\\n        onlyDatasetState(\\n            this,\\n            _datasetId,\\n            DatasetType.State.DatasetProofSubmitted\\n        )\\n        onlyAddress(governanceAddress)\\n    {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset.rejectDataset();\\n\\n        emit DatasetsEvents.DatasetRejected(_datasetId);\\n    }\\n\\n    ///@notice Submit metadata for a dataset\\n    ///        Note:anyone can submit dataset metadata\\n    function submitDatasetMetadata(\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) external onlyDatasetMetadataNotExsits(this, _accessMethod) {\\n        //Note: params check in lib\\n        datasetsCount++;\\n\\n        DatasetType.Dataset storage dataset = datasets[datasetsCount];\\n        dataset.submitDatasetMetadata(\\n            _title,\\n            _industry,\\n            _name,\\n            _description,\\n            _source,\\n            _accessMethod,\\n            _sizeInBytes,\\n            _isPublic,\\n            _version\\n        );\\n\\n        emit DatasetsEvents.DatasetMetadataSubmitted(datasetsCount, msg.sender);\\n    }\\n\\n    /// @notice Update dataset usedSizeInBytes. only called by matching contract. TODO: Need to add permission control\\n    function addDatasetUsedSize(\\n        uint64 _datasetId,\\n        uint64 _size\\n    ) public onlyNotZero(_datasetId) {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset.usedSizeInBytes += _size;\\n    }\\n\\n    /// @notice Get dataset usedSizeInBytes.\\n    function getDatasetUsedSize(\\n        uint64 _datasetId\\n    ) public view onlyNotZero(_datasetId) returns (uint64) {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        return dataset.usedSizeInBytes;\\n    }\\n\\n    ///@notice Get dataset metadata\\n    function getDatasetMetadata(\\n        uint64 _datasetId\\n    )\\n        public\\n        view\\n        onlyNotZero(_datasetId)\\n        returns (\\n            string memory title,\\n            string memory industry,\\n            string memory name,\\n            string memory description,\\n            string memory source,\\n            string memory accessMethod,\\n            address submitter,\\n            uint64 createdBlockNumber,\\n            uint64 sizeInBytes,\\n            bool isPublic,\\n            uint64 version\\n        )\\n    {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        require(\\n            bytes(dataset.metadata.title).length > 0,\\n            \\\"Metadata does not exist\\\"\\n        );\\n        return (\\n            dataset.metadata.title,\\n            dataset.metadata.industry,\\n            dataset.metadata.name,\\n            dataset.metadata.description,\\n            dataset.metadata.source,\\n            dataset.metadata.accessMethod,\\n            dataset.metadata.submitter,\\n            dataset.metadata.createdBlockNumber,\\n            dataset.metadata.sizeInBytes,\\n            dataset.metadata.isPublic,\\n            dataset.metadata.version\\n        );\\n    }\\n\\n    /// @notice Get submitter of dataset's metadata\\n    function getDatasetMetadataSubmitter(\\n        uint64 _datasetId\\n    ) public view returns (address) {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        return dataset.getDatasetMetadataSubmitter();\\n    }\\n\\n    ///@notice Get dataset state\\n    function getDatasetState(\\n        uint64 _datasetId\\n    ) public view onlyNotZero(_datasetId) returns (DatasetType.State) {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        return dataset.getDatasetState();\\n    }\\n\\n    ///@notice Check if a dataset has metadata\\n    function hasDatasetMetadata(\\n        string memory _accessMethod\\n    ) public view returns (bool) {\\n        for (uint64 i = 1; i <= datasetsCount; i++) {\\n            DatasetType.Dataset storage dataset = datasets[i];\\n            if (dataset.hasDatasetMetadata(_accessMethod)) return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Checks if metadata fields are valid.\\n    function requireValidDatasetMetadata(\\n        uint64 _datasetId\\n    ) external view returns (bool) {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset.requireValidDatasetMetadata();\\n        return true;\\n    }\\n\\n    /// @notice Report the dataset replica has already been submitted.\\n    function reportDatasetReplicaRequirementSubmitted(\\n        uint64 _datasetId\\n    ) external {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset._emitDatasetEvent(DatasetType.Event.SubmitMetadata);\\n    }\\n\\n    /// @notice Report the dataset has not enough collateral.\\n    function reportFundsNotEnough(uint64 _datasetId) external {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset._emitDatasetEvent(DatasetType.Event.NotEnoughCollateral);\\n    }\\n\\n    /// @notice Report the dataset has enough collateral.\\n    function reportFundsEnough(uint64 _datasetId) external {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset._emitDatasetEvent(DatasetType.Event.EnoughCollateral);\\n    }\\n\\n    /// @notice Report the dataset proof has already been submitted.\\n    function reportDatasetProofSubmitted(uint64 _datasetId) external {\\n        DatasetType.Dataset storage dataset = datasets[_datasetId];\\n        dataset._emitDatasetEvent(DatasetType.Event.SubmitDatasetProof);\\n    }\\n}\\n\",\"keccak256\":\"0x45a4055943ca44af032a5a57f69116c91d888f2d2c99172fcdccf3836e0b6307\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/metadata/DatasetAuditLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {DatasetStateMachineLIB} from \\\"src/v0.8/module/dataset/library/metadata/DatasetStateMachineLIB.sol\\\";\\n\\n/// @title Dataset Library\\n/// @notice This library provides functions to manage datasets and their metadata, proofs, and verifications.\\n/// @dev This library is intended to be used in conjunction with the Dataset contract.\\n///       Note: only called by governance contract\\nlibrary DatasetAuditLIB {\\n    using DatasetStateMachineLIB for DatasetType.Dataset;\\n\\n    /// @notice Approve the metadata of a dataset.\\n    /// @dev This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event.\\n    /// @param self The dataset for which metadata is being approved.\\n    function approveDatasetMetadata(DatasetType.Dataset storage self) internal {\\n        require(\\n            self.state == DatasetType.State.MetadataSubmitted,\\n            \\\"Invalid state\\\"\\n        );\\n        self._emitDatasetEvent(DatasetType.Event.MetadataApproved);\\n    }\\n\\n    /// @notice Reject the metadata of a dataset.\\n    /// @dev This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event.\\n    /// @param self The dataset for which metadata is being rejected.\\n    function rejectDatasetMetadata(DatasetType.Dataset storage self) internal {\\n        require(\\n            self.state == DatasetType.State.MetadataSubmitted,\\n            \\\"Invalid state\\\"\\n        );\\n        self._emitDatasetEvent(DatasetType.Event.MetadataRejected);\\n    }\\n\\n    /// @notice Approve a dataset.\\n    /// @dev This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event.\\n    /// @param self The dataset to be approved.\\n    function approveDataset(DatasetType.Dataset storage self) internal {\\n        require(\\n            self.state == DatasetType.State.DatasetProofSubmitted,\\n            \\\"Invalid state\\\"\\n        );\\n        self._emitDatasetEvent(DatasetType.Event.DatasetApproved);\\n    }\\n\\n    /// @notice Reject a dataset.\\n    /// @dev This function changes the state of the dataset to MetadataApproved and emits the DatasetRejected event.\\n    /// @param self The dataset to be rejected.\\n    function rejectDataset(DatasetType.Dataset storage self) internal {\\n        require(\\n            self.state == DatasetType.State.DatasetProofSubmitted,\\n            \\\"Invalid state\\\"\\n        );\\n        self._emitDatasetEvent(DatasetType.Event.DatasetRejected);\\n    }\\n}\\n\",\"keccak256\":\"0xee6298296ddebf08ebacbc91b0d1e7c25feb040a7dd724b45d84de95dcbf0466\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/metadata/DatasetMetadataLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\nimport {DatasetStateMachineLIB} from \\\"src/v0.8/module/dataset/library/metadata/DatasetStateMachineLIB.sol\\\";\\n\\n/// @title DatasetMetadataLIB Library,,include add,get,verify.\\n/// @notice This library provides functions for managing metadata of datasets.\\nlibrary DatasetMetadataLIB {\\n    using DatasetStateMachineLIB for DatasetType.Dataset;\\n\\n    /// @notice Checks if metadata fields are valid.\\n    /// @param _title Title of the dataset.\\n    /// @param _industry Industry category of the dataset.\\n    /// @param _name Name of the dataset.\\n    /// @param _description Description of the dataset.\\n    /// @param _source Source of the dataset.\\n    /// @param _accessMethod Method of accessing the dataset (e.g., URL, API).\\n    /// @param _sizeInBytes Size of the dataset in bytes.\\n    function _requireValidDatasetMetadata(\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint256 _sizeInBytes\\n    ) private pure {\\n        require(\\n            bytes(_title).length > 0 &&\\n                bytes(_industry).length > 0 &&\\n                bytes(_name).length > 0 &&\\n                bytes(_description).length > 0 &&\\n                bytes(_source).length > 0 &&\\n                bytes(_accessMethod).length > 0 &&\\n                _sizeInBytes > 0,\\n            \\\"all params must be non-empty\\\"\\n        );\\n    }\\n\\n    /// @notice Checks if metadata fields are valid.\\n    /// @param self The metadata object to store the metadata details.\\n    function requireValidDatasetMetadata(\\n        DatasetType.Dataset storage self\\n    ) internal view {\\n        _requireValidDatasetMetadata(\\n            self.metadata.title,\\n            self.metadata.industry,\\n            self.metadata.name,\\n            self.metadata.description,\\n            self.metadata.source,\\n            self.metadata.accessMethod,\\n            self.metadata.sizeInBytes\\n        );\\n    }\\n\\n    /// @notice Submits metadata for a dataset.\\n    /// @dev This function allows submitting metadata for a dataset if it hasn't been submitted before.\\n    /// @param self The metadata object to store the metadata details.\\n    /// @param _title Title of the dataset.\\n    /// @param _industry Industry category of the dataset.\\n    /// @param _name Name of the dataset.\\n    /// @param _description Description of the dataset.\\n    /// @param _source Source of the dataset.\\n    /// @param _accessMethod Method of accessing the dataset (e.g., URL, API).\\n    /// @param _sizeInBytes Size of the dataset in bytes.\\n    /// @param _isPublic Boolean indicating if the dataset is public.\\n    /// @param _version Version number of the dataset.\\n    function submitDatasetMetadata(\\n        DatasetType.Dataset storage self,\\n        string memory _title,\\n        string memory _industry,\\n        string memory _name,\\n        string memory _description,\\n        string memory _source,\\n        string memory _accessMethod,\\n        uint64 _sizeInBytes,\\n        bool _isPublic,\\n        uint64 _version\\n    ) internal {\\n        _requireValidDatasetMetadata(\\n            _title,\\n            _industry,\\n            _name,\\n            _description,\\n            _source,\\n            _accessMethod,\\n            _sizeInBytes\\n        );\\n\\n        self.metadata.title = _title;\\n        self.metadata.industry = _industry;\\n        self.metadata.name = _name;\\n        self.metadata.description = _description;\\n        self.metadata.source = _source;\\n        self.metadata.accessMethod = _accessMethod;\\n        self.metadata.submitter = msg.sender;\\n        self.metadata.createdBlockNumber = uint64(block.number);\\n        self.metadata.sizeInBytes = _sizeInBytes;\\n        self.metadata.isPublic = _isPublic;\\n        self.metadata.version = _version;\\n    }\\n\\n    /// @notice Gets the submitter  for a dataset.\\n    /// @dev This function requires that metadata has been submitted before.\\n    /// @param self The metadata object to retrieve the metadata details from.\\n    function getDatasetMetadataSubmitter(\\n        DatasetType.Dataset storage self\\n    ) internal view returns (address submitter) {\\n        require(\\n            bytes(self.metadata.title).length > 0,\\n            \\\"Metadata does not exist\\\"\\n        );\\n\\n        return (self.metadata.submitter);\\n    }\\n\\n    /// @notice Checks if an access method for a dataset has been submitted.\\n    /// @param self The metadata object to check.\\n    /// @param _accessMethod The access method to check.\\n    /// @return True if the access method exists, false otherwise.\\n    function hasDatasetMetadata(\\n        DatasetType.Dataset storage self,\\n        string memory _accessMethod\\n    ) internal view returns (bool) {\\n        return\\n            keccak256(bytes(self.metadata.accessMethod)) ==\\n            keccak256(bytes(_accessMethod));\\n    }\\n}\\n\",\"keccak256\":\"0x3af2b96fb8a3d7b0ab1cf99e6d079bd0f3fb725d6978cc0c4069b9a470bd0915\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/module/dataset/library/metadata/DatasetStateMachineLIB.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title DatasetStateMachineLIB Library,include add,get,verify.\\n/// @notice This library defines the state machine for managing the states of datasets.\\nlibrary DatasetStateMachineLIB {\\n    /// @notice Post an event for a dataset.\\n    /// @dev This function updates the dataset's state based on the event and emits the corresponding event.\\n    /// @param self The dataset for which the event will be posted.\\n    /// @param _event The event to be posted.\\n    function _emitDatasetEvent(\\n        DatasetType.Dataset storage self,\\n        DatasetType.Event _event\\n    ) internal {\\n        DatasetType.State currentState = self.state;\\n        DatasetType.State newState;\\n        // Apply the state transition based on the event\\n        if (_event == DatasetType.Event.SubmitMetadata) {\\n            if (currentState == DatasetType.State.None) {\\n                newState = DatasetType.State.MetadataSubmitted;\\n            }\\n        } else if (_event == DatasetType.Event.MetadataApproved) {\\n            if (currentState == DatasetType.State.MetadataSubmitted) {\\n                newState = DatasetType.State.MetadataApproved;\\n            }\\n        } else if (_event == DatasetType.Event.MetadataRejected) {\\n            if (currentState == DatasetType.State.MetadataSubmitted) {\\n                newState = DatasetType.State.MetadataRejected;\\n            }\\n        } else if (_event == DatasetType.Event.NotEnoughCollateral) {\\n            if (currentState == DatasetType.State.MetadataApproved) {\\n                newState = DatasetType.State.FundsNotEnough;\\n            }\\n        } else if (_event == DatasetType.Event.EnoughCollateral) {\\n            if (currentState == DatasetType.State.FundsNotEnough) {\\n                newState = DatasetType.State.MetadataApproved;\\n            }\\n        } else if (_event == DatasetType.Event.SubmitDatasetProof) {\\n            if (currentState == DatasetType.State.MetadataApproved) {\\n                newState = DatasetType.State.DatasetProofSubmitted;\\n            }\\n        } else if (_event == DatasetType.Event.DatasetApproved) {\\n            if (currentState == DatasetType.State.DatasetProofSubmitted) {\\n                newState = DatasetType.State.DatasetApproved;\\n            }\\n        } else if (_event == DatasetType.Event.DatasetRejected) {\\n            if (currentState == DatasetType.State.DatasetProofSubmitted) {\\n                newState = DatasetType.State.MetadataApproved;\\n            }\\n        }\\n\\n        // Update the state if newState is not None (i.e., a valid transition)\\n        if (newState != DatasetType.State.None) {\\n            self.state = newState;\\n        }\\n    }\\n\\n    /// @notice Get the state of a dataset.\\n    /// @dev This function returns the current state of a dataset.\\n    /// @param self The dataset for which to retrieve the state.\\n    /// @return The current state of the dataset.\\n    function getDatasetState(\\n        DatasetType.Dataset storage self\\n    ) internal view returns (DatasetType.State) {\\n        return self.state;\\n    }\\n}\\n\",\"keccak256\":\"0x359dd609d7180b26830846428a4f7e4635b6a1e09a9d99f77123819dcba93268\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/errors/Errors.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {MatchingType} from \\\"src/v0.8/types/MatchingType.sol\\\";\\n\\nlibrary Errors {\\n    /// @notice commmon errors\\n    error ParamLengthMismatch(uint256 _expectedLength, uint256 _actualLength);\\n\\n    /// @notice car errors\\n    error CarNotExist(uint64 _id);\\n    error CarAlreadyExists(uint64 _id, bytes32 _hash);\\n    error ReplicaNotExist(uint64 _id, uint64 _matchingId);\\n    error ReplicaAlreadyExists(uint64 _id, uint64 _matchingId);\\n    error ReplicaFilecoinClaimIdExists(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaState(uint64 _id, uint64 _matchingId);\\n    error InvalidReplicaFilecoinDealState(uint64 _id, uint64 _filecoinId);\\n\\n    /// @notice Dataset errors\\n    error DatasetMetadataNotExist(string accessMethod);\\n    error DatasetMetadataAlreadyExist(string accessMethod);\\n    error InvalidDatasetState(uint64 datasetId);\\n    error InvalidDatasetProofsSubmitter(uint64 datasetId, address submitter);\\n\\n    /// @notice matching errors\\n    error InvalidMatchingState(\\n        uint64 matchingId,\\n        MatchingType.State expectedState,\\n        MatchingType.State actualState\\n    );\\n    error NotMatchingInitiator(\\n        uint64 matchingId,\\n        address expectedInitiator,\\n        address actualInitiator\\n    );\\n\\n    error NotMatchingsTarget(uint64 _matchingId, address actualAddress);\\n    error NotMatchingsBids(uint64 _matchingId, address actualAddress);\\n\\n    /// @notice storage errors\\n    error StorageDealNotSuccessful(uint64 _claimId);\\n    error StorageClaimIdAlreadySet(\\n        uint64 _matchingId,\\n        bytes32 _cid,\\n        uint64 _claimId\\n    );\\n\\n    /// @notice datacap errors\\n    error AllocatedDatacapExceedsTotalRequirement(\\n        uint64 _allocatedDatacap,\\n        uint64 _totalDatacapAllocationRequirement\\n    );\\n    error AvailableDatacapExceedAllocationThreshold(\\n        uint64 availableDatacap,\\n        uint64 allocationThreshold\\n    );\\n    error NextDatacapAllocationInvalid(uint64 _matchingId);\\n    error StoredExceedsAllocatedDatacap(\\n        uint64 reallyStored,\\n        uint64 allocatedDatacap\\n    );\\n    error NotCompliantRuleMaxReplicasPerSP(address winner, bytes32 cid);\\n    error NotCompliantRuleMatchingTargetMeetsFilPlusRequirements(\\n        uint64 matchingId,\\n        address winner\\n    );\\n\\n    /// @notice escrow errors\\n    error ExceedValidPaymentAmount(uint256 total, uint256 payment);\\n    error ExceedValidTransferAmount(uint256 total, uint256 transfer);\\n    error ExceedValidRefundAmount(uint256 total, uint256 refund);\\n    error ExceedValidBurnAmount(uint256 total, uint256 burn);\\n    error ExceedValidCollateralAmount(uint256 total, uint256 collateral);\\n    error BeneficiaryAlreadyExist(address);\\n    error BeneficiaryIsInvalid(address);\\n    error OnlySpecifyTypeAllowedTransfer();\\n    error SubAccountAlreadyExist(address);\\n    error NotRefundableAmount();\\n}\\n\",\"keccak256\":\"0x97305fe742822eef7e1dba0b8146f91dae07189f14bbdb8c73a5fcb115eff302\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/events/DatasetsEvents.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary DatasetsEvents {\\n    /// @notice Event emitted when metadata is approved for a dataset.\\n    event DatasetMetadataApproved(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when metadata is rejected for a dataset.\\n    event DatasetMetadataRejected(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when a dataset is approved.\\n    event DatasetApproved(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when a dataset is rejected.\\n    event DatasetRejected(uint64 indexed _datasetId);\\n\\n    /// @notice Event emitted when metadata is submitted for a new dataset.\\n    event DatasetMetadataSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when replica requirement is submitted for a new dataset.\\n    event DatasetReplicaRequirementSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a dataset has not enough collateral.\\n    event FundsNotEnough(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a dataset has enough collateral.\\n    event FundsEnough(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a proof is submitted for a dataset.\\n    event DatasetProofSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _provider\\n    );\\n\\n    /// @notice Event emitted when a dataset is verified.\\n    event DatasetChallengeProofsSubmitted(\\n        uint64 indexed _datasetId,\\n        address indexed _verifier\\n    );\\n}\\n\",\"keccak256\":\"0x8d76b1ec00975a338779b9427b0c473c7ed62f686d2a544b1c6f38c3060b4ceb\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\nimport {ICarstore} from \\\"src/v0.8/interfaces/core/ICarstore.sol\\\";\\n///shared\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {FilplusModifiers} from \\\"src/v0.8/shared/modifiers/FilplusModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n///types\\nimport {CarReplicaType} from \\\"src/v0.8/types/CarReplicaType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract CarstoreModifiers is RolesModifiers, FilplusModifiers {\\n    /// @dev Modifier to ensure that a car with the given ID exists.\\n    modifier onlyCarExist(ICarstore _carstore, uint64 _id) {\\n        if (!_carstore.hasCar(_id)) {\\n            revert Errors.CarNotExist(_id);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a car with the given hash does not exist.\\n    modifier onlyCarNotExist(ICarstore _carstore, bytes32 _hash) {\\n        if (_carstore.hasCarHash(_hash)) {\\n            revert Errors.CarAlreadyExists(_carstore.getCarId(_hash), _hash);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyCarReplicaExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (!_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaNotExist(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car not exists.\\n    modifier onlyCarReplicaNotExist(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.hasCarReplica(_id, _matchingId)) {\\n            revert Errors.ReplicaAlreadyExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica of a car exists.\\n    modifier onlyUnsetCarReplicaFilecoinClaimId(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId\\n    ) {\\n        if (_carstore.getCarReplicaFilecoinClaimId(_id, _matchingId) != 0) {\\n            revert Errors.ReplicaFilecoinClaimIdExists(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica state before function do.\\n    modifier onlyCarReplicaState(\\n        ICarstore _carstore,\\n        uint64 _id,\\n        uint64 _matchingId,\\n        CarReplicaType.State _state\\n    ) {\\n        if (_state != _carstore.getCarReplicaState(_id, _matchingId)) {\\n            revert Errors.InvalidReplicaState(_id, _matchingId);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a replica filecoin deal state before function do.\\n    modifier onlyCarReplicaFilecoinDealState(\\n        ICarstore _carstore,\\n        IFilecoin _filecoin,\\n        uint64 _id,\\n        uint64 _claimId,\\n        FilecoinType.DealState _filecoinDealState\\n    ) {\\n        if (\\n            _filecoinDealState !=\\n            _filecoin.getReplicaDealState(_carstore.getCarHash(_id), _claimId)\\n        ) {\\n            revert Errors.InvalidReplicaFilecoinDealState(_id, _claimId);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a01638b6d8ca801f9af67cf728e40038ab5dc0d3374899243fdfc4d8a97f3c\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/DatasetsModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IDatasets} from \\\"src/v0.8/interfaces/module/IDatasets.sol\\\";\\nimport {IDatasetsProof} from \\\"src/v0.8/interfaces/module/IDatasetsProof.sol\\\";\\n///shared\\nimport {CarstoreModifiers} from \\\"src/v0.8/shared/modifiers/CarstoreModifiers.sol\\\";\\nimport {Errors} from \\\"src/v0.8/shared/errors/Errors.sol\\\";\\n\\n///types\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract DatasetsModifiers is CarstoreModifiers {\\n    /// @dev Modifier to ensure that a dataset metadata  with the given accessMethod exists.\\n    modifier onlyDatasetMetadataExsits(\\n        IDatasets _datasets,\\n        string memory _accessMethod\\n    ) {\\n        if (!_datasets.hasDatasetMetadata(_accessMethod)) {\\n            revert Errors.DatasetMetadataNotExist(_accessMethod);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that a dataset metadata with the given accessMethod not exists.\\n    modifier onlyDatasetMetadataNotExsits(\\n        IDatasets _datasets,\\n        string memory _accessMethod\\n    ) {\\n        if (_datasets.hasDatasetMetadata(_accessMethod)) {\\n            revert Errors.DatasetMetadataAlreadyExist(_accessMethod);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that dataset has the special state\\n    modifier onlyDatasetState(\\n        IDatasets _datasets,\\n        uint64 _datasetId,\\n        DatasetType.State _state\\n    ) {\\n        if (_state != _datasets.getDatasetState(_datasetId)) {\\n            revert Errors.InvalidDatasetState(_datasetId);\\n        }\\n        _;\\n    }\\n\\n    /// @notice The sender of the dataset proof transaction must be the submitter of the proof.\\n    modifier onlyDatasetProofSubmitterOrSubmitterNotExsits(\\n        IDatasetsProof _datasetsProof,\\n        uint64 _datasetId,\\n        address _sender\\n    ) {\\n        if (\\n            _datasetsProof.getDatasetProofCount(\\n                _datasetId,\\n                DatasetType.DataType.Source\\n            ) !=\\n            0 ||\\n            _datasetsProof.getDatasetProofCount(\\n                _datasetId,\\n                DatasetType.DataType.MappingFiles\\n            ) !=\\n            0\\n        ) {\\n            if (\\n                _datasetsProof.isDatasetProofSubmitter(_datasetId, _sender) !=\\n                true\\n            ) {\\n                revert Errors.InvalidDatasetProofsSubmitter(\\n                    _datasetId,\\n                    _sender\\n                );\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf28c27366123751064e0f13b4d7ac9e03abd7da9d6fa4137ee23563b1af2c8da\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/FilplusModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n///interface\\nimport {IFilplus} from \\\"src/v0.8/interfaces/core/IFilplus.sol\\\";\\n///shared\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title storages\\n/// @dev Manages the storage of matched data after successful matching with Filecoin storage deals.\\ncontract FilplusModifiers is CommonModifiers {\\n\\n}\\n\",\"keccak256\":\"0x7bbe3eebb23a2b4315765aff340b2a38bdbde846734ded1a983536075ce92548\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/CarReplicaType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title CarReplicaType Library\\n/// @notice This library defines data structures and enums related to car replicas and their states.\\n/// @dev This library provides enums for different states and events related to car replicas.\\nlibrary CarReplicaType {\\n    /// @notice Enum representing the possible states of a car replica.\\n    enum State {\\n        None, //justify if Replica exsits\\n        Matched, // Replica has been matched for storage\\n        Stored, // Replica has been successfully stored\\n        StorageFailed, // The filecoin claim id's verification failed.\\n        Slashed, // The filecoin storage has been slashed.\\n        Expired // The filecoin storage has expired.\\n    }\\n\\n    /// @notice Enum representing the events associated with car replicas.\\n    enum Event {\\n        MatchingFailed, // Matching for a replica has been failed\\n        MatchingCompleted, // Matching for a replica has been completed\\n        StorageCompleted, // Storage for a replica has been completed\\n        StorageFailed, // Storage for a replica has failed\\n        StorageDealExpired, // Storage for a replica has expired\\n        StorageSlashed // Storage for a replica has been slashed\\n    }\\n\\n    /// @notice Struct representing a car replica.\\n    struct Replica {\\n        uint64 matchingId; // The matchingId associated with the replica.\\n        uint64 filecoinClaimId; // ID of the Filecoin claim associated with the replica's storage\\n        State state; // Current state of the replica\\n    }\\n\\n    /// @notice Struct representing a car and its associated replicas.\\n    struct Car {\\n        uint64 id; // The id associated with the car.\\n        uint64 datasetId; // Index of approved dataset\\n        uint64 size; //car size\\n        mapping(uint64 => uint16) replicaIndex; // Mapping from matchingId => Replica index\\n        Replica[] replicas; // replicas associated with the car.\\n    }\\n}\\n\",\"keccak256\":\"0xce0e57f8acd81e6dbe4c6d7efddad660792420c0c0cca028d040f82749506aa0\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/DatasetType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {GeolocationType} from \\\"src/v0.8/types/GeolocationType.sol\\\";\\n\\n/// @title DatasetType Library\\n/// @notice This library defines data structures for managing datasets, their metadata, states, and events.\\nlibrary DatasetType {\\n    /// @notice Enum representing the possible states of a dataset.\\n    enum State {\\n        None, // No specific state.\\n        MetadataSubmitted, // Metadata submitted but not approved.\\n        MetadataApproved, // Metadata has been approved.\\n        MetadataRejected, // Metadata submission has been rejected.\\n        FundsNotEnough, // Not enough collateral when submit proof or challenge proof.\\n        DatasetProofSubmitted, // Proof of dataset submitted.\\n        DatasetApproved // Dataset has been approved.\\n    }\\n\\n    /// @notice Enum representing the events related to dataset management.\\n    enum Event {\\n        SubmitMetadata, // Metadata submission event.\\n        MetadataApproved, // Metadata approval event.\\n        MetadataRejected, // Metadata rejection event.\\n        NotEnoughCollateral, // Dataset not enough collateral event.\\n        EnoughCollateral, // Dataset enough collateral event.\\n        SubmitDatasetProof, // Dataset proof submission event.\\n        DatasetApproved, // Dataset approval event.\\n        DatasetRejected // Dataset rejection event.\\n    }\\n\\n    /// @notice Enum representing the type of data associated with a matching.\\n    enum DataType {\\n        Source, // Matching is associated with a dataset\\n        MappingFiles // Matching is associated with mapping files\\n    }\\n\\n    /// @notice Struct representing metadata associated with a dataset.\\n    struct Metadata {\\n        string title; // Title of the dataset.\\n        string industry; // Industry category of the dataset.\\n        string name; // Name of the dataset.\\n        string description; // Description of the dataset.\\n        string source; // Source of the dataset.\\n        string accessMethod; // Method of accessing the dataset (e.g., URL, API).\\n        address submitter; // Address of the dataset's submitter.\\n        uint64 createdBlockNumber; // Block number at which the dataset was created.\\n        uint64 sizeInBytes; // Size of the dataset in bytes.\\n        bool isPublic; // Boolean indicating if the dataset is public.\\n        uint64 version; // Version number of the dataset.\\n    }\\n\\n    struct Dataset {\\n        Metadata metadata;\\n        uint64 usedSizeInBytes; // Already matching size.\\n        State state; // Current state of the dataset.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Proof {\\n        uint64 datasetSize;\\n        bytes32 rootHash; // Root hash of the data's Merkle tree.\\n        bool allCompleted;\\n        uint64 leafHashesCount;\\n        uint64[] leafHashes; // Proof associated with the dataset.\\n    }\\n\\n    struct DatasetProof {\\n        //proof\\n        string mappingFilesAccessMethod; // Method of accessing data (e.g., URL, API).\\n        Proof sourceProof; // Proof associated with the dataset.\\n        Proof mappingFilesProof; // Note:mappingFiles includes mappingFiles and CarMerkleTree,Proof associated with the dataset.\\n        address proofSubmitter; // Address of the dataset proof's submitter.\\n    }\\n\\n    /// @notice Struct representing proofs associated with a dataset challenge submitted by reviewers.\\n    struct Challenge {\\n        bytes32 leaf;\\n        bytes32[] siblings;\\n        uint32 path;\\n    }\\n\\n    /// @notice Struct representing verification details of a dataset.\\n    struct ChallengeProof {\\n        uint64 randomSeed; // Random seed used for verification. This seed determines which nodes need to be challenged.\\n        Challenge[] challenges; // Merkle proof provided by the auditor to support their challenge.\\n    }\\n\\n    struct DatasetChallengeProof {\\n        // challenges\\n        uint16 challengesCount;\\n        mapping(address => ChallengeProof) challengeProofs; // Address of the auditor who submits challenges.\\n        address[] auditors; // Records of auditors submitting verifications.\\n    }\\n\\n    /// @notice The struct describes the storage requirements specified by the client.\\n    struct ReplicaRequirement {\\n        address[] dataPreparers; // The client can specify DP or choose not to specify\\n        address[] storageProviders; //The client can specify SP or choose not to specify.\\n        GeolocationType.Geolocation geolocations; // Geolocation requested by the client.\\n    }\\n\\n    struct DatasetReplicasRequirement {\\n        ReplicaRequirement[] replicasRequirement; // Replica requirements requested by the client.\\n    }\\n}\\n\",\"keccak256\":\"0x37374caed842596d4f4fad36b66805caa76c4cb2659170c7bd42f202f2ff9376\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/EscrowType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title EscrowType Library\\n/// @notice This library defines escrow type within the system.\\nlibrary EscrowType {\\n    /// @notice Enum escrow object types.\\n    enum Type {\\n        DatacapCollateral, // The storage client collateral.\\n        DatacapChunkCollateral, // The storage provider collateral.\\n        DataAuditCollateral, // The dataset auditor collateral, for dispute\\n        DataPrepareCollateral, // The data preparer collateral,for dispute\\n        DatasetAuditFee, // The dataset auditor calculate fees.\\n        TotalDataPrepareFeeByClient, // The data preparer calculate fees of dataset paid by storage client.\\n        DataPrepareFeeByClient, // The data preparer calculate fees of matching paid by storage client.\\n        DataPrepareFeeByProvider // The data preparer calculate fees paid by storage provider.\\n    }\\n\\n    /// @notice Enum representing the events related to collateral management.Triggered by business contract\\n    enum CollateralEvent {\\n        SyncBurn, // Escrow synchronize collateral burn amount.\\n        SyncCollateral // Escrow synchronize collateral amount.\\n    }\\n\\n    /// @notice Enum representing the events related to payment management.Triggered by business contract\\n    enum PaymentEvent {\\n        SyncPaymentLock, // Escrow synchronize allow payment amount.\\n        SyncPaymentBeneficiary, // Escrow synchronize payment beneficiaries list.\\n        AddPaymentSubAccount // Escrow synchronize sub payment account.\\n    }\\n\\n    /// @notice Struct the beneficiary of escrow\\n    struct Fund {\\n        uint256 total; // Total amount in fund account\\n        uint256 lock; // Lock amount in fund account for payment beneficiaries\\n        uint256 collateral; // Collateral amount in fund account for withdraw and punishment\\n        uint256 burned; // burned amount in fund account\\n        uint64 createdBlockNumber; // Fund account created block number\\n    }\\n\\n    /// @notice Struct the escrow\\n    struct Escrow {\\n        Fund owner; // fund owner\\n        address[] beneficiariesList; // Retrieves beneficiaries list\\n        mapping(address beneficiary => Fund) beneficiaries; // Beneficiaries information\\n    }\\n}\\n\",\"keccak256\":\"0x277d1c16e2b2da9ab128fb551c203359faf8817e57ea5192d142669c2029e6aa\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/GeolocationType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title GeolocationType Library\\n/// @notice This library defines common data structures used for geolocation information.\\n/// @dev This library provides structs to represent geolocation details.\\nlibrary GeolocationType {\\n    /// @notice Struct representing geolocation information.\\n    struct Geolocation {\\n        uint16 regionCode; // Code representing the region\\n        uint16 countryCode; // Code representing the country\\n        uint32[] cityCodes; // Code representing the city\\n    }\\n}\\n\",\"keccak256\":\"0xe8eb4cc7d0e2a6390faa4c3d0634781b768440ea8cc5ce65aaa842bf17cf347f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/MatchingType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {DatasetType} from \\\"src/v0.8/types/DatasetType.sol\\\";\\n\\n/// @title MatchingType Library\\n/// @notice This library defines data structures and enums related to dataset matching and their states.\\nlibrary MatchingType {\\n    /// @notice Enum representing the possible states of a dataset matching.\\n    enum State {\\n        None,\\n        Published, // Matching is published and open for bids\\n        InProgress, // Matching is currently in progress\\n        Paused, // Matching is paused\\n        Closed, // Matching is closed and no longer accepting bids\\n        Completed, // Matching is completed\\n        Cancelled, // Matching is cancelled\\n        Failed // Matching has failed\\n    }\\n\\n    /// @notice Enum representing the events associated with dataset matching.\\n    enum Event {\\n        Publish, // Matching is published\\n        FilPlusCheckSuccessed, // Fil+ check succeeded\\n        FilPlusCheckFailed, // Fil+ check failed\\n        Pause, // Matching is paused\\n        PauseExpired, // Pause period expired\\n        Resume, // Matching is resumed\\n        Cancel, // Matching is cancelled\\n        Close, // Matching is closed\\n        HasWinner, // Matching has a winner\\n        NoWinner // No winner in the matching\\n    }\\n\\n    /// @notice Enum representing the rules for determining the winning bid.\\n    enum BidSelectionRule {\\n        HighestBid, // Note: Auction, Winner is determined by the highest bid\\n        LowestBid, // Note: Tender, Winner is determined by the lowest bid\\n        ImmediateAtLeast, // Note: Auction Immediate winning condition: Bid amount is at least the threshold\\n        ImmediateAtMost // Note: Render Immediate winning condition: Bid amount is at most the threshold\\n    }\\n\\n    /// @notice Struct representing a dataset matching.\\n    struct Matching {\\n        BidSelectionRule bidSelectionRule;\\n        uint64 biddingDelayBlockCount; // Number of blocks to delay bidding\\n        uint64 biddingPeriodBlockCount; // Number of blocks for bidding period\\n        uint64 storageCompletionPeriodBlocks; // Number of blocks for storage period, representing the duration of the storage completion time period.\\n        uint256 biddingThreshold; // Threshold for bidding\\n        uint64 createdBlockNumber; // Block number at which the matching was created\\n        string additionalInfo; // Additional information about the matching\\n        address initiator; // Address of the initiator of the matching\\n        uint64 pausedBlockCount; // Number of blocks to paused\\n        State state; // Current state of the matching\\n    }\\n\\n    /// @notice Struct representing the target of a matching.\\n    struct MatchingTarget {\\n        uint64 datasetId; // ID of the dataset associated with the matching\\n        uint64[] cars; // Array of car IDs associated with the matching\\n        uint64 size; // Size of the matching target\\uff0cNote:total datacap size that this matching need allocate\\n        DatasetType.DataType dataType; // Type of data associated with the matching\\n        uint64 associatedMappingFilesMatchingID; // ID of the matching associated with mapping files\\n        uint16 replicaIndex; // index of dataset's replica\\n        uint256 subsidy; // subsidy amount\\n    }\\n\\n    /// @notice Struct representing a bid in a matching.\\n    struct Bid {\\n        address bidder; // Address of the bidder\\n        uint256 bid; // Bid amount\\n        bool complyFilplusRule; //If the bidder comply with filplus rules\\n    }\\n\\n    /// @notice Struct representing a bids of matching.\\n    struct MatchingBids {\\n        Bid[] bids; // Array of bids in the matching\\n        address winner; // Address of the winner in the matching\\n    }\\n}\\n\",\"keccak256\":\"0xaada4a7a4f23284bffe0ca9cf885002d6a7589d3751e44dde5b20e439b7535dc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161339761004c60003960008181610558015281816105980152818161076f015281816107af01526109b001526133976000f3fe6080604052600436106101315760003560e01c80632b6a6d7a1461013657806333ff64491461016c5780633659cfe61461018e578063379c131e146101ae578063392f5f64146101db57806349421e6b146102085780634f1ef2861461022857806350cc54ab1461023b578063527535021461025b57806352d1902d146102885780635756d84a146102aa57806363d763ac146102ca57806368832a6b146102ea578063795053d3146103175780637c5705fb146103375780639c45216214610357578063a31e767114610377578063aaf10f4214610397578063ae3c1a6e146103ac578063c0c53b8b146103cc578063c33ff2a0146103ec578063cc07f20314610423578063e2fdcc1714610443578063e4714ed814610463578063ee03e10e14610483578063ef377d1d146104a3575b600080fd5b34801561014257600080fd5b506101566101513660046123cf565b6104c3565b604051610163919061243f565b60405180910390f35b34801561017857600080fd5b5061018c6101873660046123cf565b610527565b005b34801561019a57600080fd5b5061018c6101a9366004612478565b61054e565b3480156101ba57600080fd5b506065546101ce906001600160401b031681565b60405161016391906124a2565b3480156101e757600080fd5b506068546101fb906001600160a01b031681565b60405161016391906124e8565b34801561021457600080fd5b5061018c6102233660046123cf565b610616565b61018c6102363660046125f6565b610765565b34801561024757600080fd5b5061018c6102563660046123cf565b61081a565b34801561026757600080fd5b5061027b6102763660046123cf565b61097b565b6040516101639190612656565b34801561029457600080fd5b5061029d6109a3565b604051610163919061266a565b3480156102b657600080fd5b5061018c6102c53660046123cf565b610a00565b3480156102d657600080fd5b5061018c6102e5366004612678565b610a23565b3480156102f657600080fd5b5061030a6103053660046123cf565b610aa8565b60405161016391906126b3565b34801561032357600080fd5b5060675461027b906001600160a01b031681565b34801561034357600080fd5b5061018c6103523660046123cf565b610ad2565b34801561036357600080fd5b5061018c610372366004612478565b610af5565b34801561038357600080fd5b5061018c6103923660046126d4565b610bad565b3480156103a357600080fd5b5061027b610cda565b3480156103b857600080fd5b5061018c6103c73660046123cf565b610ce9565b3480156103d857600080fd5b5061018c6103e7366004612836565b610d0d565b3480156103f857600080fd5b5061040c6104073660046123cf565b610e23565b6040516101639b9a999897969594939291906128de565b34801561042f57600080fd5b5061030a61043e3660046129aa565b611273565b34801561044f57600080fd5b506069546101fb906001600160a01b031681565b34801561046f57600080fd5b5061018c61047e3660046123cf565b6112db565b34801561048f57600080fd5b506101ce61049e3660046123cf565b61143c565b3480156104af57600080fd5b5061018c6104be3660046123cf565b61148b565b600081806001600160401b03166000036104f85760405162461bcd60e51b81526004016104ef90612a14565b60405180910390fd5b6001600160401b038316600090815260666020526040902060080154600160401b900460ff1691505b50919050565b6001600160401b038116600090815260666020526040902061054a816004611785565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105965760405162461bcd60e51b81526004016104ef90612a5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105c8611994565b6001600160a01b0316146105ee5760405162461bcd60e51b81526004016104ef90612aa5565b6105f7816119b0565b6040805160008082526020820190925261061391839190611a49565b50565b80806001600160401b03166000036106405760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906005908390632b6a6d7a9061066a9085906004016124a2565b602060405180830381865afa158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190612acd565b60068111156106bc576106bc6123f0565b8160068111156106ce576106ce6123f0565b146106ee57816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b03163381146107195760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b038616600090815260666020526040902061073a81611b2b565b6040516001600160401b038816906000805160206132db83398151915290600090a250505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107ad5760405162461bcd60e51b81526004016104ef90612a5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107df611994565b6001600160a01b0316146108055760405162461bcd60e51b81526004016104ef90612aa5565b61080e826119b0565b61054a82826001611a49565b80806001600160401b03166000036108445760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906001908390632b6a6d7a9061086e9085906004016124a2565b602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612acd565b60068111156108c0576108c06123f0565b8160068111156108d2576108d26123f0565b146108f257816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b031633811461091d5760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b038616600090815260666020526040902061093e81611b75565b6040516001600160401b038816907fc6542258ba8401255b1fd15ee4fab37bb91a180b999e1c3f40a5ca63a58af50f90600090a250505050505050565b6001600160401b038116600090815260666020526040812061099c81611bbf565b9392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ed5760405162461bcd60e51b81526004016104ef90612b87565b5060008051602061331b83398151915290565b6001600160401b038116600090815260666020526040902061054a816005611785565b81806001600160401b0316600003610a4d5760405162461bcd60e51b81526004016104ef90612a14565b6001600160401b038084166000908152606660205260408120600881018054919386939192610a7e91859116612bad565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b6001600160401b0381166000908152606660205260408120610ac981611c01565b50600192915050565b6001600160401b038116600090815260666020526040902061054a816003611785565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610b2c9084903390600401612be0565b602060405180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190612c06565b610b895760405162461bcd60e51b81526004016104ef90612c58565b5050606a80546001600160a01b0319166001600160a01b0392909216919091179055565b60405163cc07f20360e01b815230908590829063cc07f20390610bd4908490600401612c68565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190612c06565b15610c35578060405163972de51960e01b81526004016104ef9190612c68565b606580546001600160401b0316906000610c4e83612c79565b82546101009290920a6001600160401b038181021990931691831602179091556065541660009081526066602052604090209050610c94818d8d8d8d8d8d8d8d8d611f74565b60655460405133916001600160401b0316907fdbef5fb8ee173d73266166645e184e7fefac6651f7b7adc1e7985a0f46d2be4390600090a3505050505050505050505050565b6000610ce4611994565b905090565b6001600160401b03811660009081526066602052604081209061054a908290611785565b600054610100900460ff1615808015610d2d5750600054600160ff909116105b80610d4e5750610d3c30612069565b158015610d4e575060005460ff166001145b610d6a5760405162461bcd60e51b81526004016104ef90612cee565b6000805460ff191660011790558015610d8d576000805461ff0019166101001790555b606780546001600160a01b038087166001600160a01b031992831617909255606880548684169083161790556069805492851692909116919091179055610dd2612078565b8015610e1d576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610e1490600190612d12565b60405180910390a15b50505050565b60608060608060608060008060008060008b806001600160401b0316600003610e5e5760405162461bcd60e51b81526004016104ef90612a14565b6001600160401b038d16600090815260666020526040812080549091908290610e8690612d36565b905011610ea55760405162461bcd60e51b81526004016104ef90612d8a565b6006810154600782015482548392600184019260028501926003860192600487019260058801926001600160a01b038316926001600160401b03600160a01b9091048116928082169260ff600160401b83041692600160481b909204909116908b90610f1090612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3c90612d36565b8015610f895780601f10610f5e57610100808354040283529160200191610f89565b820191906000526020600020905b815481529060010190602001808311610f6c57829003601f168201915b50505050509a50898054610f9c90612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc890612d36565b80156110155780601f10610fea57610100808354040283529160200191611015565b820191906000526020600020905b815481529060010190602001808311610ff857829003601f168201915b5050505050995088805461102890612d36565b80601f016020809104026020016040519081016040528092919081815260200182805461105490612d36565b80156110a15780601f10611076576101008083540402835291602001916110a1565b820191906000526020600020905b81548152906001019060200180831161108457829003601f168201915b505050505098508780546110b490612d36565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090612d36565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b5050505050975086805461114090612d36565b80601f016020809104026020016040519081016040528092919081815260200182805461116c90612d36565b80156111b95780601f1061118e576101008083540402835291602001916111b9565b820191906000526020600020905b81548152906001019060200180831161119c57829003601f168201915b505050505096508580546111cc90612d36565b80601f01602080910402602001604051908101604052809291908181526020018280546111f890612d36565b80156112455780601f1061121a57610100808354040283529160200191611245565b820191906000526020600020905b81548152906001019060200180831161122857829003601f168201915b505050505095509c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b600060015b6065546001600160401b03908116908216116112d2576001600160401b03811660009081526066602052604090206112b081856120a1565b156112bf575060019392505050565b50806112ca81612c79565b915050611278565b50600092915050565b80806001600160401b03166000036113055760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906001908390632b6a6d7a9061132f9085906004016124a2565b602060405180830381865afa15801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113709190612acd565b6006811115611381576113816123f0565b816006811115611393576113936123f0565b146113b357816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b03163381146113de5760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b03861660009081526066602052604090206113ff816120cf565b6040516001600160401b038816907fd4d52f4d2ee1c7789e6771c84aacb4e5610db8c7a725caeaeff18e8c1b988a4990600090a250505050505050565b600081806001600160401b03166000036114685760405162461bcd60e51b81526004016104ef90612a14565b50506001600160401b039081166000908152606660205260409020600801541690565b80806001600160401b03166000036114b55760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906005908390632b6a6d7a906114df9085906004016124a2565b602060405180830381865afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190612acd565b6006811115611531576115316123f0565b816006811115611543576115436123f0565b1461156357816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b031633811461158e5760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b03861660009081526066602052604080822060695460068201549251632093cf7160e11b81529193926001600160a01b03918216926341279ee2926115e39286929116908d90600401612dc8565b602060405180830381865afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116249190612e01565b606a546040516305ce199d60e31b81529192506001600160a01b031690632e70cce890611655908b906004016124a2565b602060405180830381865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190612e01565b811061174f576069546006830154604051630cad8cc560e31b81526001600160a01b039283169263656c6628926116db92600092909116908d90600190600401612e50565b600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b5050505061171682612119565b6040516001600160401b038916907f41556162b6fcd672c4c54031c35825457e7e0f6887389d5e51ce62142de955f990600090a261177b565b61175882611b2b565b6040516001600160401b038916906000805160206132db83398151915290600090a25b5050505050505050565b6008820154600160401b900460ff166000808360078111156117a9576117a96123f0565b036117d05760008260068111156117c2576117c26123f0565b036117cb575060015b611949565b60018360078111156117e4576117e46123f0565b0361180b5760015b8260068111156117fe576117fe6123f0565b036117cb57506002611949565b600283600781111561181f5761181f6123f0565b03611845576001826006811115611838576118386123f0565b036117cb57506003611949565b6003836007811115611859576118596123f0565b0361187f576002826006811115611872576118726123f0565b036117cb57506004611949565b6004836007811115611893576118936123f0565b0361189f5760046117ec565b60058360078111156118b3576118b36123f0565b036118d95760028260068111156118cc576118cc6123f0565b036117cb57506005611949565b60068360078111156118ed576118ed6123f0565b03611913576005826006811115611906576119066123f0565b036117cb57506006611949565b6007836007811115611927576119276123f0565b03611949576005826006811115611940576119406123f0565b03611949575060025b600081600681111561195d5761195d6123f0565b14610e1d5760088401805482919060ff60401b1916600160401b836006811115611989576119896123f0565b021790555050505050565b60008051602061331b833981519152546001600160a01b031690565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d14854906119e79084903390600401612be0565b602060405180830381865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190612c06565b611a445760405162461bcd60e51b81526004016104ef90612c58565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a7c57611a4483612163565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ad6575060408051601f3d908101601f19168201909252611ad391810190612e01565b60015b611af25760405162461bcd60e51b81526004016104ef90612ed9565b60008051602061331b8339815191528114611b1f5760405162461bcd60e51b81526004016104ef90612f2f565b50611a448383836121b7565b60056008820154600160401b900460ff166006811115611b4d57611b4d6123f0565b14611b6a5760405162461bcd60e51b81526004016104ef90612f63565b610613816007611785565b60016008820154600160401b900460ff166006811115611b9757611b976123f0565b14611bb45760405162461bcd60e51b81526004016104ef90612f63565b610613816002611785565b805460009081908390611bd190612d36565b905011611bf05760405162461bcd60e51b81526004016104ef90612d8a565b50600601546001600160a01b031690565b8054610613908290611c1290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3e90612d36565b8015611c8b5780601f10611c6057610100808354040283529160200191611c8b565b820191906000526020600020905b815481529060010190602001808311611c6e57829003601f168201915b5050505050826000016001018054611ca290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611cce90612d36565b8015611d1b5780601f10611cf057610100808354040283529160200191611d1b565b820191906000526020600020905b815481529060010190602001808311611cfe57829003601f168201915b5050505050836000016002018054611d3290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5e90612d36565b8015611dab5780601f10611d8057610100808354040283529160200191611dab565b820191906000526020600020905b815481529060010190602001808311611d8e57829003601f168201915b5050505050846000016003018054611dc290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611dee90612d36565b8015611e3b5780601f10611e1057610100808354040283529160200191611e3b565b820191906000526020600020905b815481529060010190602001808311611e1e57829003601f168201915b5050505050856000016004018054611e5290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7e90612d36565b8015611ecb5780601f10611ea057610100808354040283529160200191611ecb565b820191906000526020600020905b815481529060010190602001808311611eae57829003601f168201915b5050505050866000016005018054611ee290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e90612d36565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b5050505060078901546001600160401b031690506121dc565b611f8c898989898989896001600160401b03166121dc565b89611f978a82613037565b5060018a01611fa68982613037565b5060028a01611fb58882613037565b5060038a01611fc48782613037565b5060048a01611fd38682613037565b5060058a01611fe28582613037565b5060068a0180546001600160401b03438116600160a01b02600160a01b600160e01b031933166001600160e01b031990931692909217919091179091556007909a018054918b16600160481b02600160481b600160881b0319931515600160401b026001600160481b031990931694909b1693909317171697909717909655505050505050565b6001600160a01b03163b151590565b600054610100900460ff1661209f5760405162461bcd60e51b81526004016104ef9061313d565b565b80516020820120604051600091906120bd9060058601906131bf565b60405180910390201490505b92915050565b60016008820154600160401b900460ff1660068111156120f1576120f16123f0565b1461210e5760405162461bcd60e51b81526004016104ef90612f63565b610613816001611785565b60056008820154600160401b900460ff16600681111561213b5761213b6123f0565b146121585760405162461bcd60e51b81526004016104ef90612f63565b610613816006611785565b61216c81612069565b6121885760405162461bcd60e51b81526004016104ef90613215565b60008051602061331b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6121c083612253565b6000825111806121cd5750805b15611a4457610e1d8383612293565b600087511180156121ee575060008651115b80156121fb575060008551115b8015612208575060008451115b8015612215575060008351115b8015612222575060008251115b801561222e5750600081115b61224a5760405162461bcd60e51b81526004016104ef90613258565b50505050505050565b61225c81612163565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061099c838360405180606001604052806027815260200161333b602791396060600080856001600160a01b0316856040516122d0919061328a565b600060405180830381855af49150503d806000811461230b576040519150601f19603f3d011682016040523d82523d6000602084013e612310565b606091505b50915091506123218683838761232b565b9695505050505050565b606083156123685782516000036123615761234585612069565b6123615760405162461bcd60e51b81526004016104ef906132ca565b5081612372565b612372838361237a565b949350505050565b81511561238a5781518083602001fd5b8060405162461bcd60e51b81526004016104ef9190612c68565b6001600160401b031690565b6123b9816123a4565b811461061357600080fd5b80356120c9816123b0565b6000602082840312156123e4576123e4600080fd5b600061237284846123c4565b634e487b7160e01b600052602160045260246000fd5b60078110610613576106136123f0565b8061242081612406565b919050565b60006120c982612416565b61243981612425565b82525050565b602081016120c98284612430565b6001600160a01b031690565b60006120c98261244d565b6123b981612459565b80356120c981612464565b60006020828403121561248d5761248d600080fd5b6000612372848461246d565b612439816123a4565b602081016120c98284612499565b60006120c96124c46124c18461244d565b90565b61244d565b60006120c9826124b0565b60006120c9826124c9565b612439816124d4565b602081016120c982846124df565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61251f826124f6565b81018181106001600160401b038211171561253c5761253c612500565b6040525050565b600061254e60405190565b90506124208282612516565b60006001600160401b0382111561257357612573612500565b61257c826124f6565b60200192915050565b82818337506000910152565b60006125a461259f8461255a565b612543565b9050828152602081018484840111156125bf576125bf600080fd5b6125ca848285612585565b509392505050565b600082601f8301126125e6576125e6600080fd5b8135612372848260208601612591565b6000806040838503121561260c5761260c600080fd5b6000612618858561246d565b92505060208301356001600160401b0381111561263757612637600080fd5b612643858286016125d2565b9150509250929050565b61243981612459565b602081016120c9828461264d565b80612439565b602081016120c98284612664565b6000806040838503121561268e5761268e600080fd5b600061269a85856123c4565b9250506020612643858286016123c4565b801515612439565b602081016120c982846126ab565b8015156123b9565b80356120c9816126c1565b60008060008060008060008060006101208a8c0312156126f6576126f6600080fd5b89356001600160401b0381111561270f5761270f600080fd5b61271b8c828d016125d2565b99505060208a01356001600160401b0381111561273a5761273a600080fd5b6127468c828d016125d2565b98505060408a01356001600160401b0381111561276557612765600080fd5b6127718c828d016125d2565b97505060608a01356001600160401b0381111561279057612790600080fd5b61279c8c828d016125d2565b96505060808a01356001600160401b038111156127bb576127bb600080fd5b6127c78c828d016125d2565b95505060a08a01356001600160401b038111156127e6576127e6600080fd5b6127f28c828d016125d2565b94505060c06128038c828d016123c4565b93505060e06128148c828d016126c9565b9250506101006128268c828d016123c4565b9150509295985092959850929598565b60008060006060848603121561284e5761284e600080fd5b600061285a868661246d565b935050602061286b8682870161246d565b925050604061287c8682870161246d565b9150509250925092565b60005b838110156128a1578181015183820152602001612889565b50506000910152565b60006128b4825190565b8084526020840193506128cb818560208601612886565b6128d4816124f6565b9093019392505050565b61016080825281016128f0818e6128aa565b90508181036020830152612904818d6128aa565b90508181036040830152612918818c6128aa565b9050818103606083015261292c818b6128aa565b90508181036080830152612940818a6128aa565b905081810360a083015261295481896128aa565b905061296360c083018861264d565b61297060e0830187612499565b61297e610100830186612499565b61298c6101208301856126ab565b61299a610140830184612499565b9c9b505050505050505050505050565b6000602082840312156129bf576129bf600080fd5b81356001600160401b038111156129d8576129d8600080fd5b612372848285016125d2565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b815291505b5060200190565b602080825281016120c9816129e4565b602c81526000602082016000805160206132fb83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016120c981612a24565b602c81526000602082016000805160206132fb83398151915281526b6163746976652070726f787960a01b60208201529150612a57565b602080825281016120c981612a6e565b6007811061061357600080fd5b80516120c981612ab5565b600060208284031215612ae257612ae2600080fd5b60006123728484612ac2565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c00000081529150612a0d565b602080825281016120c981612aee565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612a57565b602080825281016120c981612b32565b634e487b7160e01b600052601160045260246000fd5b6000612bb8826123a4565b9150612bc3836123a4565b9250508082016001600160401b038111156120c9576120c9612b97565b60408101612bee8285612664565b61099c602083018461264d565b80516120c9816126c1565b600060208284031215612c1b57612c1b600080fd5b60006123728484612bfb565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612a0d565b602080825281016120c981612c27565b6020808252810161099c81846128aa565b6000612c84826123a4565b91506001600160401b038203612c9c57612c9c612b97565b5060010190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612a57565b602080825281016120c981612ca3565b600060ff82166120c9565b61243981612cfe565b602081016120c98284612d09565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612d4a57607f821691505b60208210810361052157610521612d20565b601781526000602082017613595d1859185d1848191bd95cc81b9bdd08195e1a5cdd604a1b81529150612a0d565b602080825281016120c981612d5c565b60088110610613576106136123f0565b8061242081612d9a565b60006120c982612daa565b61243981612db4565b60608101612dd68286612dbf565b612de3602083018561264d565b6123726040830184612499565b806123b9565b80516120c981612df0565b600060208284031215612e1657612e16600080fd5b60006123728484612df6565b60028110610613576106136123f0565b8061242081612e22565b60006120c982612e32565b61243981612e3c565b60808101612e5e8287612dbf565b612e6b602083018661264d565b612e786040830185612499565b612e856060830184612e47565b95945050505050565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612a57565b602080825281016120c981612e8e565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612a57565b602080825281016120c981612ee9565b600d81526000602082016c496e76616c696420737461746560981b81529150612a0d565b602080825281016120c981612f3f565b60006120c96124c18381565b612f8883612f73565b815460001960089490940293841b1916921b91909117905550565b6000611a44818484612f7f565b8181101561054a57612fc3600082612fa3565b600101612fb0565b601f821115611a44576000818152602090206020601f85010481016020851015612ff25750805b6130046020601f860104830182612fb0565b5050505050565b6000196008929092029190911c191690565b6000613029838361300b565b600290930290921792915050565b81516001600160401b0381111561305057613050612500565b61305a8254612d36565b613065828285612fcb565b6020601f83116001811461309357600084156130815750858201515b61308b858261301d565b8655506130ed565b600085815260208120601f198616915b828110156130c357888501518255602094850194600190920191016130a3565b868310156130e057848901516130dc601f89168261300b565b8355505b6001600288020188555050505b505050505050565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612a57565b602080825281016120c9816130f5565b6000815461315a81612d36565b6001821680156131715760018114613186576131b6565b60ff19831686528115158202860193506131b6565b60008581526020902060005b838110156131ae57815488820152600190910190602001613192565b838801955050505b50505092915050565b600061099c828461314d565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612a57565b602080825281016120c9816131cb565b601c81526000602082017b616c6c20706172616d73206d757374206265206e6f6e2d656d70747960201b81529150612a0d565b602080825281016120c981613225565b6000613272825190565b613280818560208601612886565b9290920192915050565b600061099c8284613268565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612a0d565b602080825281016120c98161329656fe571b4e518ce1c666c0cfdad09d8001b252f51f088e4c54ebde3bd2a4d9d2ed5c46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f2f08cc8f289bf250002a9a1b6488e6e23dcad239310ea32d3525d91dfbaea5464736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101315760003560e01c80632b6a6d7a1461013657806333ff64491461016c5780633659cfe61461018e578063379c131e146101ae578063392f5f64146101db57806349421e6b146102085780634f1ef2861461022857806350cc54ab1461023b578063527535021461025b57806352d1902d146102885780635756d84a146102aa57806363d763ac146102ca57806368832a6b146102ea578063795053d3146103175780637c5705fb146103375780639c45216214610357578063a31e767114610377578063aaf10f4214610397578063ae3c1a6e146103ac578063c0c53b8b146103cc578063c33ff2a0146103ec578063cc07f20314610423578063e2fdcc1714610443578063e4714ed814610463578063ee03e10e14610483578063ef377d1d146104a3575b600080fd5b34801561014257600080fd5b506101566101513660046123cf565b6104c3565b604051610163919061243f565b60405180910390f35b34801561017857600080fd5b5061018c6101873660046123cf565b610527565b005b34801561019a57600080fd5b5061018c6101a9366004612478565b61054e565b3480156101ba57600080fd5b506065546101ce906001600160401b031681565b60405161016391906124a2565b3480156101e757600080fd5b506068546101fb906001600160a01b031681565b60405161016391906124e8565b34801561021457600080fd5b5061018c6102233660046123cf565b610616565b61018c6102363660046125f6565b610765565b34801561024757600080fd5b5061018c6102563660046123cf565b61081a565b34801561026757600080fd5b5061027b6102763660046123cf565b61097b565b6040516101639190612656565b34801561029457600080fd5b5061029d6109a3565b604051610163919061266a565b3480156102b657600080fd5b5061018c6102c53660046123cf565b610a00565b3480156102d657600080fd5b5061018c6102e5366004612678565b610a23565b3480156102f657600080fd5b5061030a6103053660046123cf565b610aa8565b60405161016391906126b3565b34801561032357600080fd5b5060675461027b906001600160a01b031681565b34801561034357600080fd5b5061018c6103523660046123cf565b610ad2565b34801561036357600080fd5b5061018c610372366004612478565b610af5565b34801561038357600080fd5b5061018c6103923660046126d4565b610bad565b3480156103a357600080fd5b5061027b610cda565b3480156103b857600080fd5b5061018c6103c73660046123cf565b610ce9565b3480156103d857600080fd5b5061018c6103e7366004612836565b610d0d565b3480156103f857600080fd5b5061040c6104073660046123cf565b610e23565b6040516101639b9a999897969594939291906128de565b34801561042f57600080fd5b5061030a61043e3660046129aa565b611273565b34801561044f57600080fd5b506069546101fb906001600160a01b031681565b34801561046f57600080fd5b5061018c61047e3660046123cf565b6112db565b34801561048f57600080fd5b506101ce61049e3660046123cf565b61143c565b3480156104af57600080fd5b5061018c6104be3660046123cf565b61148b565b600081806001600160401b03166000036104f85760405162461bcd60e51b81526004016104ef90612a14565b60405180910390fd5b6001600160401b038316600090815260666020526040902060080154600160401b900460ff1691505b50919050565b6001600160401b038116600090815260666020526040902061054a816004611785565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105965760405162461bcd60e51b81526004016104ef90612a5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105c8611994565b6001600160a01b0316146105ee5760405162461bcd60e51b81526004016104ef90612aa5565b6105f7816119b0565b6040805160008082526020820190925261061391839190611a49565b50565b80806001600160401b03166000036106405760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906005908390632b6a6d7a9061066a9085906004016124a2565b602060405180830381865afa158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190612acd565b60068111156106bc576106bc6123f0565b8160068111156106ce576106ce6123f0565b146106ee57816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b03163381146107195760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b038616600090815260666020526040902061073a81611b2b565b6040516001600160401b038816906000805160206132db83398151915290600090a250505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107ad5760405162461bcd60e51b81526004016104ef90612a5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107df611994565b6001600160a01b0316146108055760405162461bcd60e51b81526004016104ef90612aa5565b61080e826119b0565b61054a82826001611a49565b80806001600160401b03166000036108445760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906001908390632b6a6d7a9061086e9085906004016124a2565b602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612acd565b60068111156108c0576108c06123f0565b8160068111156108d2576108d26123f0565b146108f257816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b031633811461091d5760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b038616600090815260666020526040902061093e81611b75565b6040516001600160401b038816907fc6542258ba8401255b1fd15ee4fab37bb91a180b999e1c3f40a5ca63a58af50f90600090a250505050505050565b6001600160401b038116600090815260666020526040812061099c81611bbf565b9392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ed5760405162461bcd60e51b81526004016104ef90612b87565b5060008051602061331b83398151915290565b6001600160401b038116600090815260666020526040902061054a816005611785565b81806001600160401b0316600003610a4d5760405162461bcd60e51b81526004016104ef90612a14565b6001600160401b038084166000908152606660205260408120600881018054919386939192610a7e91859116612bad565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b6001600160401b0381166000908152606660205260408120610ac981611c01565b50600192915050565b6001600160401b038116600090815260666020526040902061054a816003611785565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d1485490610b2c9084903390600401612be0565b602060405180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190612c06565b610b895760405162461bcd60e51b81526004016104ef90612c58565b5050606a80546001600160a01b0319166001600160a01b0392909216919091179055565b60405163cc07f20360e01b815230908590829063cc07f20390610bd4908490600401612c68565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190612c06565b15610c35578060405163972de51960e01b81526004016104ef9190612c68565b606580546001600160401b0316906000610c4e83612c79565b82546101009290920a6001600160401b038181021990931691831602179091556065541660009081526066602052604090209050610c94818d8d8d8d8d8d8d8d8d611f74565b60655460405133916001600160401b0316907fdbef5fb8ee173d73266166645e184e7fefac6651f7b7adc1e7985a0f46d2be4390600090a3505050505050505050505050565b6000610ce4611994565b905090565b6001600160401b03811660009081526066602052604081209061054a908290611785565b600054610100900460ff1615808015610d2d5750600054600160ff909116105b80610d4e5750610d3c30612069565b158015610d4e575060005460ff166001145b610d6a5760405162461bcd60e51b81526004016104ef90612cee565b6000805460ff191660011790558015610d8d576000805461ff0019166101001790555b606780546001600160a01b038087166001600160a01b031992831617909255606880548684169083161790556069805492851692909116919091179055610dd2612078565b8015610e1d576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610e1490600190612d12565b60405180910390a15b50505050565b60608060608060608060008060008060008b806001600160401b0316600003610e5e5760405162461bcd60e51b81526004016104ef90612a14565b6001600160401b038d16600090815260666020526040812080549091908290610e8690612d36565b905011610ea55760405162461bcd60e51b81526004016104ef90612d8a565b6006810154600782015482548392600184019260028501926003860192600487019260058801926001600160a01b038316926001600160401b03600160a01b9091048116928082169260ff600160401b83041692600160481b909204909116908b90610f1090612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3c90612d36565b8015610f895780601f10610f5e57610100808354040283529160200191610f89565b820191906000526020600020905b815481529060010190602001808311610f6c57829003601f168201915b50505050509a50898054610f9c90612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc890612d36565b80156110155780601f10610fea57610100808354040283529160200191611015565b820191906000526020600020905b815481529060010190602001808311610ff857829003601f168201915b5050505050995088805461102890612d36565b80601f016020809104026020016040519081016040528092919081815260200182805461105490612d36565b80156110a15780601f10611076576101008083540402835291602001916110a1565b820191906000526020600020905b81548152906001019060200180831161108457829003601f168201915b505050505098508780546110b490612d36565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090612d36565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b5050505050975086805461114090612d36565b80601f016020809104026020016040519081016040528092919081815260200182805461116c90612d36565b80156111b95780601f1061118e576101008083540402835291602001916111b9565b820191906000526020600020905b81548152906001019060200180831161119c57829003601f168201915b505050505096508580546111cc90612d36565b80601f01602080910402602001604051908101604052809291908181526020018280546111f890612d36565b80156112455780601f1061121a57610100808354040283529160200191611245565b820191906000526020600020905b81548152906001019060200180831161122857829003601f168201915b505050505095509c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b600060015b6065546001600160401b03908116908216116112d2576001600160401b03811660009081526066602052604090206112b081856120a1565b156112bf575060019392505050565b50806112ca81612c79565b915050611278565b50600092915050565b80806001600160401b03166000036113055760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906001908390632b6a6d7a9061132f9085906004016124a2565b602060405180830381865afa15801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113709190612acd565b6006811115611381576113816123f0565b816006811115611393576113936123f0565b146113b357816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b03163381146113de5760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b03861660009081526066602052604090206113ff816120cf565b6040516001600160401b038816907fd4d52f4d2ee1c7789e6771c84aacb4e5610db8c7a725caeaeff18e8c1b988a4990600090a250505050505050565b600081806001600160401b03166000036114685760405162461bcd60e51b81526004016104ef90612a14565b50506001600160401b039081166000908152606660205260409020600801541690565b80806001600160401b03166000036114b55760405162461bcd60e51b81526004016104ef90612a14565b6040516315b536bd60e11b8152309083906005908390632b6a6d7a906114df9085906004016124a2565b602060405180830381865afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190612acd565b6006811115611531576115316123f0565b816006811115611543576115436123f0565b1461156357816040516311bc7abb60e21b81526004016104ef91906124a2565b6067546001600160a01b031633811461158e5760405162461bcd60e51b81526004016104ef90612b22565b6001600160401b03861660009081526066602052604080822060695460068201549251632093cf7160e11b81529193926001600160a01b03918216926341279ee2926115e39286929116908d90600401612dc8565b602060405180830381865afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116249190612e01565b606a546040516305ce199d60e31b81529192506001600160a01b031690632e70cce890611655908b906004016124a2565b602060405180830381865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190612e01565b811061174f576069546006830154604051630cad8cc560e31b81526001600160a01b039283169263656c6628926116db92600092909116908d90600190600401612e50565b600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b5050505061171682612119565b6040516001600160401b038916907f41556162b6fcd672c4c54031c35825457e7e0f6887389d5e51ce62142de955f990600090a261177b565b61175882611b2b565b6040516001600160401b038916906000805160206132db83398151915290600090a25b5050505050505050565b6008820154600160401b900460ff166000808360078111156117a9576117a96123f0565b036117d05760008260068111156117c2576117c26123f0565b036117cb575060015b611949565b60018360078111156117e4576117e46123f0565b0361180b5760015b8260068111156117fe576117fe6123f0565b036117cb57506002611949565b600283600781111561181f5761181f6123f0565b03611845576001826006811115611838576118386123f0565b036117cb57506003611949565b6003836007811115611859576118596123f0565b0361187f576002826006811115611872576118726123f0565b036117cb57506004611949565b6004836007811115611893576118936123f0565b0361189f5760046117ec565b60058360078111156118b3576118b36123f0565b036118d95760028260068111156118cc576118cc6123f0565b036117cb57506005611949565b60068360078111156118ed576118ed6123f0565b03611913576005826006811115611906576119066123f0565b036117cb57506006611949565b6007836007811115611927576119276123f0565b03611949576005826006811115611940576119406123f0565b03611949575060025b600081600681111561195d5761195d6123f0565b14610e1d5760088401805482919060ff60401b1916600160401b836006811115611989576119896123f0565b021790555050505050565b60008051602061331b833981519152546001600160a01b031690565b606854604051632474521560e21b81526001600160a01b039091169060009082906391d14854906119e79084903390600401612be0565b602060405180830381865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190612c06565b611a445760405162461bcd60e51b81526004016104ef90612c58565b505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a7c57611a4483612163565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ad6575060408051601f3d908101601f19168201909252611ad391810190612e01565b60015b611af25760405162461bcd60e51b81526004016104ef90612ed9565b60008051602061331b8339815191528114611b1f5760405162461bcd60e51b81526004016104ef90612f2f565b50611a448383836121b7565b60056008820154600160401b900460ff166006811115611b4d57611b4d6123f0565b14611b6a5760405162461bcd60e51b81526004016104ef90612f63565b610613816007611785565b60016008820154600160401b900460ff166006811115611b9757611b976123f0565b14611bb45760405162461bcd60e51b81526004016104ef90612f63565b610613816002611785565b805460009081908390611bd190612d36565b905011611bf05760405162461bcd60e51b81526004016104ef90612d8a565b50600601546001600160a01b031690565b8054610613908290611c1290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3e90612d36565b8015611c8b5780601f10611c6057610100808354040283529160200191611c8b565b820191906000526020600020905b815481529060010190602001808311611c6e57829003601f168201915b5050505050826000016001018054611ca290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611cce90612d36565b8015611d1b5780601f10611cf057610100808354040283529160200191611d1b565b820191906000526020600020905b815481529060010190602001808311611cfe57829003601f168201915b5050505050836000016002018054611d3290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5e90612d36565b8015611dab5780601f10611d8057610100808354040283529160200191611dab565b820191906000526020600020905b815481529060010190602001808311611d8e57829003601f168201915b5050505050846000016003018054611dc290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611dee90612d36565b8015611e3b5780601f10611e1057610100808354040283529160200191611e3b565b820191906000526020600020905b815481529060010190602001808311611e1e57829003601f168201915b5050505050856000016004018054611e5290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7e90612d36565b8015611ecb5780601f10611ea057610100808354040283529160200191611ecb565b820191906000526020600020905b815481529060010190602001808311611eae57829003601f168201915b5050505050866000016005018054611ee290612d36565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e90612d36565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b5050505060078901546001600160401b031690506121dc565b611f8c898989898989896001600160401b03166121dc565b89611f978a82613037565b5060018a01611fa68982613037565b5060028a01611fb58882613037565b5060038a01611fc48782613037565b5060048a01611fd38682613037565b5060058a01611fe28582613037565b5060068a0180546001600160401b03438116600160a01b02600160a01b600160e01b031933166001600160e01b031990931692909217919091179091556007909a018054918b16600160481b02600160481b600160881b0319931515600160401b026001600160481b031990931694909b1693909317171697909717909655505050505050565b6001600160a01b03163b151590565b600054610100900460ff1661209f5760405162461bcd60e51b81526004016104ef9061313d565b565b80516020820120604051600091906120bd9060058601906131bf565b60405180910390201490505b92915050565b60016008820154600160401b900460ff1660068111156120f1576120f16123f0565b1461210e5760405162461bcd60e51b81526004016104ef90612f63565b610613816001611785565b60056008820154600160401b900460ff16600681111561213b5761213b6123f0565b146121585760405162461bcd60e51b81526004016104ef90612f63565b610613816006611785565b61216c81612069565b6121885760405162461bcd60e51b81526004016104ef90613215565b60008051602061331b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6121c083612253565b6000825111806121cd5750805b15611a4457610e1d8383612293565b600087511180156121ee575060008651115b80156121fb575060008551115b8015612208575060008451115b8015612215575060008351115b8015612222575060008251115b801561222e5750600081115b61224a5760405162461bcd60e51b81526004016104ef90613258565b50505050505050565b61225c81612163565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061099c838360405180606001604052806027815260200161333b602791396060600080856001600160a01b0316856040516122d0919061328a565b600060405180830381855af49150503d806000811461230b576040519150601f19603f3d011682016040523d82523d6000602084013e612310565b606091505b50915091506123218683838761232b565b9695505050505050565b606083156123685782516000036123615761234585612069565b6123615760405162461bcd60e51b81526004016104ef906132ca565b5081612372565b612372838361237a565b949350505050565b81511561238a5781518083602001fd5b8060405162461bcd60e51b81526004016104ef9190612c68565b6001600160401b031690565b6123b9816123a4565b811461061357600080fd5b80356120c9816123b0565b6000602082840312156123e4576123e4600080fd5b600061237284846123c4565b634e487b7160e01b600052602160045260246000fd5b60078110610613576106136123f0565b8061242081612406565b919050565b60006120c982612416565b61243981612425565b82525050565b602081016120c98284612430565b6001600160a01b031690565b60006120c98261244d565b6123b981612459565b80356120c981612464565b60006020828403121561248d5761248d600080fd5b6000612372848461246d565b612439816123a4565b602081016120c98284612499565b60006120c96124c46124c18461244d565b90565b61244d565b60006120c9826124b0565b60006120c9826124c9565b612439816124d4565b602081016120c982846124df565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61251f826124f6565b81018181106001600160401b038211171561253c5761253c612500565b6040525050565b600061254e60405190565b90506124208282612516565b60006001600160401b0382111561257357612573612500565b61257c826124f6565b60200192915050565b82818337506000910152565b60006125a461259f8461255a565b612543565b9050828152602081018484840111156125bf576125bf600080fd5b6125ca848285612585565b509392505050565b600082601f8301126125e6576125e6600080fd5b8135612372848260208601612591565b6000806040838503121561260c5761260c600080fd5b6000612618858561246d565b92505060208301356001600160401b0381111561263757612637600080fd5b612643858286016125d2565b9150509250929050565b61243981612459565b602081016120c9828461264d565b80612439565b602081016120c98284612664565b6000806040838503121561268e5761268e600080fd5b600061269a85856123c4565b9250506020612643858286016123c4565b801515612439565b602081016120c982846126ab565b8015156123b9565b80356120c9816126c1565b60008060008060008060008060006101208a8c0312156126f6576126f6600080fd5b89356001600160401b0381111561270f5761270f600080fd5b61271b8c828d016125d2565b99505060208a01356001600160401b0381111561273a5761273a600080fd5b6127468c828d016125d2565b98505060408a01356001600160401b0381111561276557612765600080fd5b6127718c828d016125d2565b97505060608a01356001600160401b0381111561279057612790600080fd5b61279c8c828d016125d2565b96505060808a01356001600160401b038111156127bb576127bb600080fd5b6127c78c828d016125d2565b95505060a08a01356001600160401b038111156127e6576127e6600080fd5b6127f28c828d016125d2565b94505060c06128038c828d016123c4565b93505060e06128148c828d016126c9565b9250506101006128268c828d016123c4565b9150509295985092959850929598565b60008060006060848603121561284e5761284e600080fd5b600061285a868661246d565b935050602061286b8682870161246d565b925050604061287c8682870161246d565b9150509250925092565b60005b838110156128a1578181015183820152602001612889565b50506000910152565b60006128b4825190565b8084526020840193506128cb818560208601612886565b6128d4816124f6565b9093019392505050565b61016080825281016128f0818e6128aa565b90508181036020830152612904818d6128aa565b90508181036040830152612918818c6128aa565b9050818103606083015261292c818b6128aa565b90508181036080830152612940818a6128aa565b905081810360a083015261295481896128aa565b905061296360c083018861264d565b61297060e0830187612499565b61297e610100830186612499565b61298c6101208301856126ab565b61299a610140830184612499565b9c9b505050505050505050505050565b6000602082840312156129bf576129bf600080fd5b81356001600160401b038111156129d8576129d8600080fd5b612372848285016125d2565b601681526000602082017556616c7565206d757374206e6f74206265207a65726f60501b815291505b5060200190565b602080825281016120c9816129e4565b602c81526000602082016000805160206132fb83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016120c981612a24565b602c81526000602082016000805160206132fb83398151915281526b6163746976652070726f787960a01b60208201529150612a57565b602080825281016120c981612a6e565b6007811061061357600080fd5b80516120c981612ab5565b600060208284031215612ae257612ae2600080fd5b60006123728484612ac2565b601d81526000602082017f4f6e6c7920616c6c6f77656420616464726573732063616e2063616c6c00000081529150612a0d565b602080825281016120c981612aee565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612a57565b602080825281016120c981612b32565b634e487b7160e01b600052601160045260246000fd5b6000612bb8826123a4565b9150612bc3836123a4565b9250508082016001600160401b038111156120c9576120c9612b97565b60408101612bee8285612664565b61099c602083018461264d565b80516120c9816126c1565b600060208284031215612c1b57612c1b600080fd5b60006123728484612bfb565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b81529150612a0d565b602080825281016120c981612c27565b6020808252810161099c81846128aa565b6000612c84826123a4565b91506001600160401b038203612c9c57612c9c612b97565b5060010190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612a57565b602080825281016120c981612ca3565b600060ff82166120c9565b61243981612cfe565b602081016120c98284612d09565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612d4a57607f821691505b60208210810361052157610521612d20565b601781526000602082017613595d1859185d1848191bd95cc81b9bdd08195e1a5cdd604a1b81529150612a0d565b602080825281016120c981612d5c565b60088110610613576106136123f0565b8061242081612d9a565b60006120c982612daa565b61243981612db4565b60608101612dd68286612dbf565b612de3602083018561264d565b6123726040830184612499565b806123b9565b80516120c981612df0565b600060208284031215612e1657612e16600080fd5b60006123728484612df6565b60028110610613576106136123f0565b8061242081612e22565b60006120c982612e32565b61243981612e3c565b60808101612e5e8287612dbf565b612e6b602083018661264d565b612e786040830185612499565b612e856060830184612e47565b95945050505050565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612a57565b602080825281016120c981612e8e565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612a57565b602080825281016120c981612ee9565b600d81526000602082016c496e76616c696420737461746560981b81529150612a0d565b602080825281016120c981612f3f565b60006120c96124c18381565b612f8883612f73565b815460001960089490940293841b1916921b91909117905550565b6000611a44818484612f7f565b8181101561054a57612fc3600082612fa3565b600101612fb0565b601f821115611a44576000818152602090206020601f85010481016020851015612ff25750805b6130046020601f860104830182612fb0565b5050505050565b6000196008929092029190911c191690565b6000613029838361300b565b600290930290921792915050565b81516001600160401b0381111561305057613050612500565b61305a8254612d36565b613065828285612fcb565b6020601f83116001811461309357600084156130815750858201515b61308b858261301d565b8655506130ed565b600085815260208120601f198616915b828110156130c357888501518255602094850194600190920191016130a3565b868310156130e057848901516130dc601f89168261300b565b8355505b6001600288020188555050505b505050505050565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612a57565b602080825281016120c9816130f5565b6000815461315a81612d36565b6001821680156131715760018114613186576131b6565b60ff19831686528115158202860193506131b6565b60008581526020902060005b838110156131ae57815488820152600190910190602001613192565b838801955050505b50505092915050565b600061099c828461314d565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612a57565b602080825281016120c9816131cb565b601c81526000602082017b616c6c20706172616d73206d757374206265206e6f6e2d656d70747960201b81529150612a0d565b602080825281016120c981613225565b6000613272825190565b613280818560208601612886565b9290920192915050565b600061099c8284613268565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612a0d565b602080825281016120c98161329656fe571b4e518ce1c666c0cfdad09d8001b252f51f088e4c54ebde3bd2a4d9d2ed5c46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f2f08cc8f289bf250002a9a1b6488e6e23dcad239310ea32d3525d91dfbaea5464736f6c63430008150033",
  "devdoc": {
    "details": "This contract is intended to be inherited by specific dataset-related contracts.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "approveDataset(uint64)": {
        "details": "This function changes the state of the dataset to DatasetApproved and emits the DatasetApproved event."
      },
      "approveDatasetMetadata(uint64)": {
        "details": "This function changes the state of the dataset to MetadataApproved and emits the MetadataApproved event."
      },
      "initDependencies(address)": {
        "details": "After the contract is deployed, this function needs to be called manually!"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rejectDataset(uint64)": {
        "details": "This function changes the state of the dataset to DatasetRejected and emits the DatasetRejected event."
      },
      "rejectDatasetMetadata(uint64)": {
        "details": "This function changes the state of the dataset to MetadataRejected and emits the MetadataRejected event."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Datasets Base Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DatasetApproved(uint64)": {
        "notice": "Event emitted when a dataset is approved."
      },
      "DatasetMetadataApproved(uint64)": {
        "notice": "Event emitted when metadata is approved for a dataset."
      },
      "DatasetMetadataRejected(uint64)": {
        "notice": "Event emitted when metadata is rejected for a dataset."
      },
      "DatasetMetadataSubmitted(uint64,address)": {
        "notice": "Event emitted when metadata is submitted for a new dataset."
      },
      "DatasetRejected(uint64)": {
        "notice": "Event emitted when a dataset is rejected."
      }
    },
    "kind": "user",
    "methods": {
      "addDatasetUsedSize(uint64,uint64)": {
        "notice": "Update dataset usedSizeInBytes. only called by matching contract. TODO: Need to add permission control"
      },
      "approveDataset(uint64)": {
        "notice": "Approve a dataset."
      },
      "approveDatasetMetadata(uint64)": {
        "notice": "Approve the metadata of a dataset."
      },
      "datasetsCount()": {
        "notice": "Default getter functions for public variables"
      },
      "getDatasetMetadata(uint64)": {
        "notice": "Get dataset metadata"
      },
      "getDatasetMetadataSubmitter(uint64)": {
        "notice": "Get submitter of dataset's metadata"
      },
      "getDatasetState(uint64)": {
        "notice": "Get dataset state"
      },
      "getDatasetUsedSize(uint64)": {
        "notice": "Get dataset usedSizeInBytes."
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "governanceAddress()": {
        "notice": "get  governance address"
      },
      "hasDatasetMetadata(string)": {
        "notice": "Check if a dataset has metadata"
      },
      "initDependencies(address)": {
        "notice": "initDependencies function to initialize the datasetsProof contract."
      },
      "initialize(address,address,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      },
      "rejectDataset(uint64)": {
        "notice": "Reject a dataset."
      },
      "rejectDatasetMetadata(uint64)": {
        "notice": "Reject the metadata of a dataset."
      },
      "reportDatasetProofSubmitted(uint64)": {
        "notice": "Report the dataset proof has already been submitted."
      },
      "reportDatasetReplicaRequirementSubmitted(uint64)": {
        "notice": "Report the dataset replica has already been submitted."
      },
      "reportFundsEnough(uint64)": {
        "notice": "Report the dataset has enough collateral."
      },
      "reportFundsNotEnough(uint64)": {
        "notice": "Report the dataset has not enough collateral."
      },
      "requireValidDatasetMetadata(uint64)": {
        "notice": "Checks if metadata fields are valid."
      },
      "roles()": {
        "notice": "get  roles instance"
      },
      "submitDatasetMetadata(string,string,string,string,string,string,uint64,bool,uint64)": {
        "notice": "Submit metadata for a dataset        Note:anyone can submit dataset metadata"
      }
    },
    "notice": "This contract serves as the base for managing Dataset, metadata, state.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31824,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "datasetsCount",
        "offset": 0,
        "slot": "101",
        "type": "t_uint64"
      },
      {
        "astId": 31829,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "datasets",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint64,t_struct(Dataset)44946_storage)"
      },
      {
        "astId": 31831,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "governanceAddress",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 31834,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "roles",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IRoles)29558"
      },
      {
        "astId": 31837,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "escrow",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IEscrow)29288"
      },
      {
        "astId": 31840,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "datasetsProof",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IDatasetsProof)30135"
      },
      {
        "astId": 31845,
        "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDatasetsProof)30135": {
        "encoding": "inplace",
        "label": "contract IDatasetsProof",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)29288": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IRoles)29558": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_enum(State)44899": {
        "encoding": "inplace",
        "label": "enum DatasetType.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint64,t_struct(Dataset)44946_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct DatasetType.Dataset)",
        "numberOfBytes": "32",
        "value": "t_struct(Dataset)44946_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Dataset)44946_storage": {
        "encoding": "inplace",
        "label": "struct DatasetType.Dataset",
        "members": [
          {
            "astId": 44940,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Metadata)44937_storage"
          },
          {
            "astId": 44942,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "usedSizeInBytes",
            "offset": 0,
            "slot": "8",
            "type": "t_uint64"
          },
          {
            "astId": 44945,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "state",
            "offset": 8,
            "slot": "8",
            "type": "t_enum(State)44899"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Metadata)44937_storage": {
        "encoding": "inplace",
        "label": "struct DatasetType.Metadata",
        "members": [
          {
            "astId": 44916,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "title",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 44918,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "industry",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 44920,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 44922,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 44924,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "source",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 44926,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "accessMethod",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 44928,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "submitter",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 44930,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "createdBlockNumber",
            "offset": 20,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 44932,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "sizeInBytes",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 44934,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "isPublic",
            "offset": 8,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 44936,
            "contract": "src/v0.8/module/dataset/Datasets.sol:Datasets",
            "label": "version",
            "offset": 9,
            "slot": "7",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}