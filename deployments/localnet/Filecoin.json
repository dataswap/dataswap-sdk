{
  "address": "0x0FCf4bB33D831A76d9e139Ab663A8EFB1081b277",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "errorCode",
          "type": "int256"
        }
      ],
      "name": "ActorError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ActorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailToCallActor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "InvalidCodec",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidResponseLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_provider",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "getReplicaClaimData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_claimId",
          "type": "uint64"
        }
      ],
      "name": "getReplicaDealState",
      "outputs": [
        {
          "internalType": "enum FilecoinType.DealState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FilecoinType.Network",
          "name": "_network",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "network",
      "outputs": [
        {
          "internalType": "enum FilecoinType.Network",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "claimId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setMockClaimData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FilecoinType.DealState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setMockDealState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9021cb8d818084f87f27b3e6df282435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"errorCode\",\"type\":\"int256\"}],\"name\":\"ActorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"InvalidCodec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResponseLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_provider\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"getReplicaClaimData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_claimId\",\"type\":\"uint64\"}],\"name\":\"getReplicaDealState\",\"outputs\":[{\"internalType\":\"enum FilecoinType.DealState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FilecoinType.Network\",\"name\":\"_network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"network\",\"outputs\":[{\"internalType\":\"enum FilecoinType.Network\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"claimId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setMockClaimData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FilecoinType.DealState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setMockDealState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"getReplicaDealState(bytes32,uint64)\":{\"details\":\"TODO:check _claimId belongs to the _cid, now filecoin-solidity is not support           https://github.com/dataswap/core/issues/41\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"setMockClaimData(uint64,bytes)\":{\"details\":\"mock the filecoin claim data\"},\"setMockDealState(uint8)\":{\"details\":\"do nothing,just for mock\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new\"}},\"title\":\"Filecoin\",\"version\":1},\"userdoc\":{\"errors\":{\"ActorError(int256)\":[{\"notice\":\"the called actor returned an error as part of its expected behaviour\"}],\"ActorNotFound()\":[{\"notice\":\"the actor is not found\"}],\"FailToCallActor()\":[{\"notice\":\"an error happened trying to call the actor\"}],\"InvalidCodec(uint64)\":[{\"notice\":\"the codec received is not valid\"}],\"InvalidResponseLength()\":[{\"notice\":\"the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\"}],\"NotEnoughBalance(uint256,uint256)\":[{\"notice\":\"the smart contract has no enough balance to transfer\"}]},\"kind\":\"user\",\"methods\":{\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getReplicaClaimData(uint64,uint64)\":{\"notice\":\"Internal function to get the claim of a Filecoin storage for a replica.\"},\"getReplicaDealState(bytes32,uint64)\":{\"notice\":\"Internal function to get the state of a Filecoin storage deal for a replica.\"},\"initialize(uint8,address)\":{\"notice\":\"initialize function to initialize the contract and grant the default admin role to the deployer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/core/filecoin/Filecoin.sol\":\"Filecoin\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373031363738333234383532\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@zondax/filecoin-solidity/contracts/v0.8/MarketAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./types/MarketTypes.sol\\\";\\nimport \\\"./cbor/MarketCbor.sol\\\";\\nimport \\\"./cbor/BytesCbor.sol\\\";\\nimport \\\"./cbor/FilecoinCbor.sol\\\";\\n\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\n\\n/// @title This library is a proxy to the singleton Storage Market actor (address: f05). Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary MarketAPI {\\n    using BytesCBOR for bytes;\\n    using MarketCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice Deposits the received value into the balance held in escrow.\\n    function addBalance(CommonTypes.FilAddress memory providerOrClient, uint256 value) internal {\\n        bytes memory raw_request = providerOrClient.serializeAddress();\\n\\n        bytes memory data = Actor.callByID(MarketTypes.ActorID, MarketTypes.AddBalanceMethodNum, Misc.CBOR_CODEC, raw_request, value, false);\\n        if (data.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @notice Attempt to withdraw the specified amount from the balance held in escrow.\\n    /// @notice If less than the specified amount is available, yields the entire available balance.\\n    function withdrawBalance(MarketTypes.WithdrawBalanceParams memory params) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = params.serializeWithdrawBalanceParams();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.WithdrawBalanceMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n\\n    /// @notice Return the escrow balance and locked amount for an address.\\n    /// @return the escrow balance and locked amount for an address.\\n    function getBalance(CommonTypes.FilAddress memory addr) internal returns (MarketTypes.GetBalanceReturn memory) {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetBalanceMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetBalanceReturn();\\n    }\\n\\n    /// @notice This will be available after the deal is published (whether or not is is activated) and up until some undefined period after it is terminated.\\n    /// @return the data commitment and size of a deal proposal.\\n    function getDealDataCommitment(uint64 dealID) internal returns (MarketTypes.GetDealDataCommitmentReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealDataCommitmentMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetDealDataCommitmentReturn();\\n    }\\n\\n    /// @notice get the client of the deal proposal.\\n    /// @return the client of a deal proposal.\\n    function getDealClient(uint64 dealID) internal returns (uint64) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealClientMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeUint64();\\n    }\\n\\n    /// @notice get the provider of a deal proposal.\\n    /// @return the provider of a deal proposal.\\n    function getDealProvider(uint64 dealID) internal returns (uint64) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealProviderMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeUint64();\\n    }\\n\\n    /// @notice Get the label of a deal proposal.\\n    /// @return the label of a deal proposal.\\n    function getDealLabel(uint64 dealID) internal returns (CommonTypes.DealLabel memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealLabelMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeDealLabel();\\n    }\\n\\n    /// @notice Get the start epoch and duration(in epochs) of a deal proposal.\\n    /// @return the start epoch and duration (in epochs) of a deal proposal.\\n    function getDealTerm(uint64 dealID) internal returns (MarketTypes.GetDealTermReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealTermMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetDealTermReturn();\\n    }\\n\\n    /// @notice get the total price that will be paid from the client to the provider for this deal.\\n    /// @return the per-epoch price of a deal proposal.\\n    function getDealTotalPrice(uint64 dealID) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealTotalPriceMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n\\n    /// @notice get the client collateral requirement for a deal proposal.\\n    /// @return the client collateral requirement for a deal proposal.\\n    function getDealClientCollateral(uint64 dealID) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealClientCollateralMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n\\n    /// @notice get the provide collateral requirement for a deal proposal.\\n    /// @return the provider collateral requirement for a deal proposal.\\n    function getDealProviderCollateral(uint64 dealID) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealProviderCollateralMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n\\n    /// @notice get the verified flag for a deal proposal.\\n    /// @notice Note that the source of truth for verified allocations and claims is the verified registry actor.\\n    /// @return the verified flag for a deal proposal.\\n    function getDealVerified(uint64 dealID) internal returns (bool) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealVerifiedMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBool();\\n    }\\n\\n    /// @notice Fetches activation state for a deal.\\n    /// @notice This will be available from when the proposal is published until an undefined period after the deal finishes (either normally or by termination).\\n    /// @return USR_NOT_FOUND if the deal doesn't exist (yet), or EX_DEAL_EXPIRED if the deal has been removed from state.\\n    function getDealActivation(uint64 dealID) internal returns (MarketTypes.GetDealActivationReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.GetDealActivationMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetDealActivationReturn();\\n    }\\n\\n    /// @notice Publish a new set of storage deals (not yet included in a sector).\\n    function publishStorageDeals(MarketTypes.PublishStorageDealsParams memory params) internal returns (MarketTypes.PublishStorageDealsReturn memory) {\\n        bytes memory raw_request = params.serializePublishStorageDealsParams();\\n\\n        bytes memory result = Actor.callByID(MarketTypes.ActorID, MarketTypes.PublishStorageDealsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializePublishStorageDealsReturn();\\n    }\\n}\\n\",\"keccak256\":\"0xe2adcdda00cc16069016580c9ecfff6062f98315c40e4e584924d5808c4704fc\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/Utils.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./cbor/AccountCbor.sol\\\";\\nimport \\\"./cbor/BytesCbor.sol\\\";\\nimport \\\"./cbor/FilecoinCbor.sol\\\";\\n\\nimport \\\"./types/AccountTypes.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./types/DataCapTypes.sol\\\";\\n\\nimport \\\"./utils/Actor.sol\\\";\\n\\n/// @title This library compiles a bunch of helper functions.\\n/// @author Zondax AG\\nlibrary Utils {\\n    using AccountCBOR for *;\\n    using FilecoinCBOR for *;\\n    using BytesCBOR for bytes;\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice filecoin method not handled\\n    error MethodNotHandled(uint64);\\n\\n    /// @notice utility function meant to handle calls from other builtin actors. Arguments are passed as cbor serialized data (in filecoin native format)\\n    /// @param method the filecoin method id that is being called\\n    /// @param params raw data (in bytes) passed as arguments to the method call\\n    function handleFilecoinMethod(uint64 method, uint64 codec, bytes calldata params) internal pure returns (CommonTypes.UniversalReceiverParams memory) {\\n        if (method == CommonTypes.UniversalReceiverHookMethodNum) {\\n            if (codec != Misc.CBOR_CODEC) {\\n                revert InvalidCodec(codec);\\n            }\\n\\n            return params.deserializeUniversalReceiverParams();\\n        } else {\\n            revert MethodNotHandled(method);\\n        }\\n    }\\n\\n    /// @param target The actor id you want to interact with\\n    function universalReceiverHook(CommonTypes.FilActorId target, CommonTypes.UniversalReceiverParams memory params) internal returns (bytes memory) {\\n        bytes memory raw_request = params.serializeUniversalReceiverParams();\\n\\n        bytes memory result = Actor.callByID(target, CommonTypes.UniversalReceiverHookMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x71268a34a8be6110c999f465587d72a3f9527dc4d7674bd1d6083eb18040ef76\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/VerifRegAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./types/VerifRegTypes.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./cbor/VerifRegCbor.sol\\\";\\n\\nimport \\\"./utils/Actor.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// @title This library is a proxy to a built-in VerifReg actor. Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary VerifRegAPI {\\n    using VerifRegCBOR for *;\\n\\n    /// @notice get a list of claims corresponding to the requested claim ID for specific provider.\\n    function getClaims(VerifRegTypes.GetClaimsParams memory params) internal returns (VerifRegTypes.GetClaimsReturn memory) {\\n        bytes memory raw_request = params.serializeGetClaimsParams();\\n\\n        bytes memory result = Actor.callByID(VerifRegTypes.ActorID, VerifRegTypes.GetClaimsMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetClaimsReturn();\\n    }\\n\\n    /// @notice add a verified Client address to Filecoin Plus program.\\n    function addVerifiedClient(VerifRegTypes.AddVerifiedClientParams memory params) internal {\\n        bytes memory raw_request = params.serializeAddVerifiedClientParams();\\n\\n        bytes memory result = Actor.callByID(VerifRegTypes.ActorID, VerifRegTypes.AddVerifiedClientMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @notice remove the expired DataCap allocations and reclaimed those DataCap token back to Client. If the allocation amount is not specified, all expired DataCap allocation will be removed.\\n    function removeExpiredAllocations(\\n        VerifRegTypes.RemoveExpiredAllocationsParams memory params\\n    ) internal returns (VerifRegTypes.RemoveExpiredAllocationsReturn memory) {\\n        bytes memory raw_request = params.serializeRemoveExpiredAllocationsParams();\\n\\n        bytes memory result = Actor.callByID(VerifRegTypes.ActorID, VerifRegTypes.RemoveExpiredAllocationsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializeRemoveExpiredAllocationsReturn();\\n    }\\n\\n    /// @notice extends the  maximum term of some claims up to the largest value they could have been originally allocated. This method can only be called by the claims' client.\\n    function extendClaimTerms(VerifRegTypes.ExtendClaimTermsParams memory params) internal returns (CommonTypes.BatchReturn memory) {\\n        bytes memory raw_request = params.serializeExtendClaimTermsParams();\\n\\n        bytes memory result = Actor.callByID(VerifRegTypes.ActorID, VerifRegTypes.ExtendClaimTermsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializeBatchReturn();\\n    }\\n\\n    /// @notice remove a claim with its maximum term has elapsed.\\n    function removeExpiredClaims(VerifRegTypes.RemoveExpiredClaimsParams memory params) internal returns (VerifRegTypes.RemoveExpiredClaimsReturn memory) {\\n        bytes memory raw_request = params.serializeRemoveExpiredClaimsParams();\\n\\n        bytes memory result = Actor.callByID(VerifRegTypes.ActorID, VerifRegTypes.RemoveExpiredClaimsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializeRemoveExpiredClaimsReturn();\\n    }\\n}\\n\",\"keccak256\":\"0x1af68ba52a04eba445cedc53e9f89451080b36358c4f50aa66a98dc6203a52a2\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/AccountCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../types/AccountTypes.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Account actor exported methods.\\n/// @author Zondax AG\\nlibrary AccountCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n\\n    /// @notice serialize AuthenticateMessageParams struct to cbor in order to pass as arguments to an account actor\\n    /// @param params AuthenticateMessageParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeAuthenticateMessageParams(AccountTypes.AuthenticateMessageParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.signature);\\n        capacity += Misc.getBytesSize(params.message);\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.signature);\\n        buf.writeBytes(params.message);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize AuthenticateMessageParams struct from cbor encoded bytes coming from an account actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of AuthenticateMessageParams created based on parsed data\\n    function deserializeAuthenticateMessageParams(bytes memory rawResp) internal pure returns (AccountTypes.AuthenticateMessageParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.signature, byteIdx) = rawResp.readBytes(byteIdx);\\n        (ret.message, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0xbc15538954ef494595fa3916532574ba00805ce09d8679d6bcebf59b5dc069cc\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/BigIntCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\\n/// @author Zondax AG\\nlibrary BigIntCBOR {\\n    /// @notice serialize BigInt instance to bytes\\n    /// @param num BigInt instance to serialize\\n    /// @return serialized BigInt as bytes\\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\\n        bytes memory raw = new bytes(num.val.length + 1);\\n\\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\\n\\n        uint index = 1;\\n        for (uint i = 0; i < num.val.length; i++) {\\n            raw[index] = num.val[i];\\n            index++;\\n        }\\n\\n        return raw;\\n    }\\n\\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\\n    /// @param raw as bytes to parse\\n    /// @return parsed BigInt instance\\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\\n        if (raw.length == 0) {\\n            return CommonTypes.BigInt(hex\\\"00\\\", false);\\n        }\\n\\n        bytes memory val = new bytes(raw.length - 1);\\n        bool neg = false;\\n\\n        if (raw[0] == 0x01) {\\n            neg = true;\\n        }\\n\\n        for (uint i = 1; i < raw.length; i++) {\\n            val[i - 1] = raw[i];\\n        }\\n\\n        return CommonTypes.BigInt(val, neg);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9eb7f33f943e12a2ca6d8a02178c30cef91f8c9db1c1b50f88a77e31784ac4\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/BytesCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\\n/// @author Zondax AG\\nlibrary BytesCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for bytes;\\n\\n    /// @notice serialize raw bytes as cbor bytes string encoded\\n    /// @param data raw data in bytes\\n    /// @return encoded cbor bytes\\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(data);\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\\n    /// @param addr raw address in bytes\\n    /// @return encoded address as cbor bytes\\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\\n        return serializeBytes(addr);\\n    }\\n\\n    /// @notice encoded null value as cbor\\n    /// @return cbor encoded null\\n    function serializeNull() internal pure returns (bytes memory) {\\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\\n\\n        buf.writeNull();\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize cbor encoded filecoin address to bytes\\n    /// @param ret cbor encoded filecoin address\\n    /// @return raw bytes representing a filecoin address\\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\\n        bytes memory addr;\\n        uint byteIdx = 0;\\n\\n        (addr, byteIdx) = ret.readBytes(byteIdx);\\n\\n        return addr;\\n    }\\n\\n    /// @notice deserialize cbor encoded string\\n    /// @param ret cbor encoded string (in bytes)\\n    /// @return decoded string\\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\\n        string memory response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readString(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded bool\\n    /// @param ret cbor encoded bool (in bytes)\\n    /// @return decoded bool\\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\\n        bool response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readBool(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded BigInt\\n    /// @param ret cbor encoded BigInt (in bytes)\\n    /// @return decoded BigInt\\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n\\n        if (ret.length > 0) {\\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                return tmp.deserializeBigInt();\\n            }\\n        }\\n\\n        return CommonTypes.BigInt(new bytes(0), false);\\n    }\\n\\n    /// @notice deserialize cbor encoded uint64\\n    /// @param rawResp cbor encoded uint64 (in bytes)\\n    /// @return decoded uint64\\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\\n        uint byteIdx = 0;\\n        uint64 value;\\n\\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return value;\\n    }\\n\\n    /// @notice deserialize cbor encoded int64\\n    /// @param rawResp cbor encoded int64 (in bytes)\\n    /// @return decoded int64\\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\\n        uint byteIdx = 0;\\n        int64 value;\\n\\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x092be34452eead511a33e8d5c0a0878bf53ac5747ada8788099a81bdf888eccf\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/FilecoinCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\\n/// @author Zondax AG\\nlibrary FilecoinCBOR {\\n    using Buffer for Buffer.buffer;\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for *;\\n    using BigIntCBOR for *;\\n\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\\n\\n    /// @notice Write a CID into a CBOR buffer.\\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\\n    /// @param buf buffer containing the actual CBOR serialization process\\n    /// @param value CID value to serialize as CBOR\\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\\n        buf.writeBytes(bytes.concat(hex'00', value));\\n    }\\n\\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\\n        require(maj == MAJOR_TYPE_TAG, \\\"expected major type tag when parsing cid\\\");\\n        require(value == TAG_TYPE_CID_CODE, \\\"expected tag 42 when parsing cid\\\");\\n\\n        bytes memory raw;\\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\\n        require(raw[0] == 0x00, \\\"expected first byte to be 0 when parsing cid\\\");\\n\\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\\n        CommonTypes.Cid memory ret;\\n        ret.data = new bytes(raw.length - 1);\\n        for (uint256 i = 1; i < raw.length; i++) {\\n            ret.data[i-1] = raw[i];\\n        }\\n\\n        return (ret, byteIdx);\\n    }\\n\\n    /// @notice serialize filecoin address to cbor encoded\\n    /// @param addr filecoin address to serialize\\n    /// @return cbor serialized data as bytes\\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\\n    /// @param value BigInt to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory valueBigInt = value.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(valueBigInt);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(value.serializeBigInt());\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\\n    /// @param addr FilAddress to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of FilAddress created based on parsed data\\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 1, \\\"Wrong numbers of parameters (should find 1)\\\");\\n\\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of BigInt created based on parsed data\\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        return tmp.deserializeBigInt();\\n    }\\n\\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\\n    /// @param params UniversalReceiverParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getPrefixSize(params.type_);\\n        capacity += Misc.getBytesSize(params.payload);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeUInt64(params.type_);\\n        buf.writeBytes(params.payload);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 2, \\\"Wrong numbers of parameters (should find 2)\\\");\\n\\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\\n    }\\n\\n    /// @notice attempt to read a FilActorId value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\\n        uint64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write FilActorId into a cbor buffer\\n    /// @dev FilActorId is just wrapping a uint64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id FilActorId to serialize as cbor\\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\\n    }\\n\\n    /// @notice attempt to read a ChainEpoch value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\\n        int64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write ChainEpoch into a cbor buffer\\n    /// @dev ChainEpoch is just wrapping a int64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id ChainEpoch to serialize as cbor\\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\\n    }\\n\\n    /// @notice write DealLabel into a cbor buffer\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param label DealLabel to serialize as cbor\\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\\n    }\\n\\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of DealLabel created based on parsed data\\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\\n        uint byteIdx = 0;\\n        CommonTypes.DealLabel memory label;\\n\\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\\n        return label;\\n    }\\n\\n    /// @notice attempt to read a DealLabel value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\\n        require(maj == MajByteString || maj == MajTextString, \\\"invalid maj (expected MajByteString or MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = rawResp[i];\\n            slice_index++;\\n        }\\n\\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\\n    }\\n}\\n\",\"keccak256\":\"0x9c73c2969df5325f1f86c401b05b8983e633e8bd21c1c72b2b9039a731174098\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/MarketCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../types/MarketTypes.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../utils/Misc.sol\\\";\\nimport \\\"../utils/FilAddresses.sol\\\";\\nimport \\\"../utils/CborDecode.sol\\\";\\n\\nimport \\\"./FilecoinCbor.sol\\\";\\nimport \\\"./BigIntCbor.sol\\\";\\nimport \\\"./FilecoinCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Market actor exported methods.\\n/// @author Zondax AG\\nlibrary MarketCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice serialize WithdrawBalanceParams struct to cbor in order to pass as arguments to the market actor\\n    /// @param params WithdrawBalanceParams to serialize as cbor\\n    /// @return response cbor serialized data as bytes\\n    function serializeWithdrawBalanceParams(MarketTypes.WithdrawBalanceParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory tokenAmount = params.tokenAmount.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.provider_or_client.data);\\n        capacity += Misc.getBytesSize(tokenAmount);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.provider_or_client.data);\\n        buf.writeBytes(tokenAmount);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetBalanceReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetBalanceReturn created based on parsed data\\n    function deserializeGetBalanceReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetBalanceReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.balance = tmp.deserializeBigInt();\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.locked = tmp.deserializeBigInt();\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealDataCommitmentReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealDataCommitmentReturn created based on parsed data\\n    function deserializeGetDealDataCommitmentReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealDataCommitmentReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n\\n        if (len > 0) {\\n            (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n            (ret.size, byteIdx) = rawResp.readUInt64(byteIdx);\\n        } else {\\n            ret.data = new bytes(0);\\n            ret.size = 0;\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealTermReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealTermReturn created based on parsed data\\n    function deserializeGetDealTermReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealTermReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.start, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.end, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealActivationReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealActivationReturn created based on parsed data\\n    function deserializeGetDealActivationReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealActivationReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.activated, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.terminated, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize PublishStorageDealsParams struct to cbor in order to pass as arguments to the market actor\\n    /// @param params PublishStorageDealsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializePublishStorageDealsParams(MarketTypes.PublishStorageDealsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getPrefixSize(params.deals.length);\\n\\n        for (uint64 i = 0; i < params.deals.length; i++) {\\n            capacity += Misc.getPrefixSize(2);\\n            capacity += Misc.getPrefixSize(11);\\n\\n            capacity += Misc.getCidSize(params.deals[i].proposal.piece_cid.data);\\n            capacity += Misc.getPrefixSize(params.deals[i].proposal.piece_size);\\n            capacity += Misc.getBoolSize();\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.client.data);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.provider.data);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.label.data);\\n            capacity += Misc.getChainEpochSize(params.deals[i].proposal.start_epoch);\\n            capacity += Misc.getChainEpochSize(params.deals[i].proposal.end_epoch);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.storage_price_per_epoch.serializeBigInt());\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.provider_collateral.serializeBigInt());\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.client_collateral.serializeBigInt());\\n\\n            capacity += Misc.getBytesSize(params.deals[i].client_signature);\\n        }\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.startFixedArray(uint64(params.deals.length));\\n\\n        for (uint64 i = 0; i < params.deals.length; i++) {\\n            buf.startFixedArray(2);\\n\\n            buf.startFixedArray(11);\\n\\n            buf.writeCid(params.deals[i].proposal.piece_cid.data);\\n            buf.writeUInt64(params.deals[i].proposal.piece_size);\\n            buf.writeBool(params.deals[i].proposal.verified_deal);\\n            buf.writeBytes(params.deals[i].proposal.client.data);\\n            buf.writeBytes(params.deals[i].proposal.provider.data);\\n            buf.writeDealLabel(params.deals[i].proposal.label);\\n            buf.writeChainEpoch(params.deals[i].proposal.start_epoch);\\n            buf.writeChainEpoch(params.deals[i].proposal.end_epoch);\\n            buf.writeBytes(params.deals[i].proposal.storage_price_per_epoch.serializeBigInt());\\n            buf.writeBytes(params.deals[i].proposal.provider_collateral.serializeBigInt());\\n            buf.writeBytes(params.deals[i].proposal.client_collateral.serializeBigInt());\\n\\n            buf.writeBytes(params.deals[i].client_signature);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize PublishStorageDealsReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of PublishStorageDealsReturn created based on parsed data\\n    function deserializePublishStorageDealsReturn(bytes memory rawResp) internal pure returns (MarketTypes.PublishStorageDealsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.ids = new uint64[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.ids[i], byteIdx) = rawResp.readUInt64(byteIdx);\\n        }\\n\\n        (ret.valid_deals, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize deal id (uint64) to cbor in order to pass as arguments to the market actor\\n    /// @param id deal id to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeDealID(uint64 id) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getPrefixSize(uint256(id));\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeUInt64(id);\\n\\n        return buf.data();\\n    }\\n\\n    function deserializeMarketDealNotifyParams(bytes memory rawResp) internal pure returns (MarketTypes.MarketDealNotifyParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.dealProposal, byteIdx) = rawResp.readBytes(byteIdx);\\n        (ret.dealId, byteIdx) = rawResp.readUInt64(byteIdx);\\n    }\\n\\n    function serializeDealProposal(MarketTypes.DealProposal memory dealProposal) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory storage_price_per_epoch = dealProposal.storage_price_per_epoch.serializeBigInt();\\n        bytes memory provider_collateral = dealProposal.provider_collateral.serializeBigInt();\\n        bytes memory client_collateral = dealProposal.client_collateral.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(11);\\n        capacity += Misc.getCidSize(dealProposal.piece_cid.data);\\n        capacity += Misc.getPrefixSize(dealProposal.piece_size);\\n        capacity += Misc.getBoolSize();\\n        capacity += Misc.getBytesSize(dealProposal.client.data);\\n        capacity += Misc.getBytesSize(dealProposal.provider.data);\\n        capacity += Misc.getBytesSize(dealProposal.label.data);\\n        capacity += Misc.getChainEpochSize(dealProposal.start_epoch);\\n        capacity += Misc.getChainEpochSize(dealProposal.end_epoch);\\n        capacity += Misc.getBytesSize(storage_price_per_epoch);\\n        capacity += Misc.getBytesSize(provider_collateral);\\n        capacity += Misc.getBytesSize(client_collateral);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(11);\\n\\n        buf.writeCid(dealProposal.piece_cid.data);\\n        buf.writeUInt64(dealProposal.piece_size);\\n        buf.writeBool(dealProposal.verified_deal);\\n        buf.writeBytes(dealProposal.client.data);\\n        buf.writeBytes(dealProposal.provider.data);\\n        buf.writeDealLabel(dealProposal.label);\\n        buf.writeChainEpoch(dealProposal.start_epoch);\\n        buf.writeChainEpoch(dealProposal.end_epoch);\\n        buf.writeBytes(storage_price_per_epoch);\\n        buf.writeBytes(provider_collateral);\\n        buf.writeBytes(client_collateral);\\n\\n        return buf.data();\\n    }\\n\\n    function deserializeDealProposal(bytes memory rawResp) internal pure returns (MarketTypes.DealProposal memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 11);\\n\\n        (ret.piece_cid, byteIdx) = rawResp.readCid(byteIdx);\\n        (ret.piece_size, byteIdx) = rawResp.readUInt64(byteIdx);\\n        (ret.verified_deal, byteIdx) = rawResp.readBool(byteIdx);\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.client = FilAddresses.fromBytes(tmp);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.provider = FilAddresses.fromBytes(tmp);\\n\\n        (ret.label, byteIdx) = rawResp.readDealLabel(byteIdx);\\n\\n        (ret.start_epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.end_epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        bytes memory storage_price_per_epoch_bytes;\\n        (storage_price_per_epoch_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.storage_price_per_epoch = storage_price_per_epoch_bytes.deserializeBigInt();\\n\\n        bytes memory provider_collateral_bytes;\\n        (provider_collateral_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.provider_collateral = provider_collateral_bytes.deserializeBigInt();\\n\\n        bytes memory client_collateral_bytes;\\n        (client_collateral_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.client_collateral = client_collateral_bytes.deserializeBigInt();\\n    }\\n}\\n\",\"keccak256\":\"0x181e7688efec53b7b300ac9423ff0211dab43e1092340f4905f6528fbd30023a\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/cbor/VerifRegCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../types/VerifRegTypes.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\nimport \\\"./FilecoinCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for VerifReg actor exported methods.\\n/// @author Zondax AG\\nlibrary VerifRegCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice serialize GetClaimsParams struct to cbor in order to pass as arguments to the verified registry actor\\n    /// @param params GetClaimsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeGetClaimsParams(VerifRegTypes.GetClaimsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        uint claimIdsLen = params.claim_ids.length;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getFilActorIdSize(params.provider);\\n        capacity += Misc.getPrefixSize(claimIdsLen);\\n        for (uint i = 0; i < claimIdsLen; i++) {\\n            capacity += Misc.getFilActorIdSize(params.claim_ids[i]);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeFilActorId(params.provider);\\n        buf.startFixedArray(uint64(claimIdsLen));\\n        for (uint i = 0; i < claimIdsLen; i++) {\\n            buf.writeFilActorId(params.claim_ids[i]);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetClaimsReturn struct from cbor encoded bytes coming from a verified registry actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetClaimsReturn created based on parsed data\\n    function deserializeGetClaimsReturn(bytes memory rawResp) internal pure returns (VerifRegTypes.GetClaimsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.batch_info.success_count, byteIdx) = rawResp.readUInt32(byteIdx);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.batch_info.fail_codes = new CommonTypes.FailCode[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 2);\\n\\n            (ret.batch_info.fail_codes[i].idx, byteIdx) = rawResp.readUInt32(byteIdx);\\n            (ret.batch_info.fail_codes[i].code, byteIdx) = rawResp.readUInt32(byteIdx);\\n        }\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.claims = new VerifRegTypes.Claim[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 8);\\n\\n            (ret.claims[i].provider, byteIdx) = rawResp.readFilActorId(byteIdx);\\n            (ret.claims[i].client, byteIdx) = rawResp.readFilActorId(byteIdx);\\n            (ret.claims[i].data, byteIdx) = rawResp.readBytes(byteIdx);\\n            (ret.claims[i].size, byteIdx) = rawResp.readUInt64(byteIdx);\\n            (ret.claims[i].term_min, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (ret.claims[i].term_max, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (ret.claims[i].term_start, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (ret.claims[i].sector, byteIdx) = rawResp.readFilActorId(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize AddVerifiedClientParams struct to cbor in order to pass as arguments to the verified registry actor\\n    /// @param params AddVerifiedClientParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeAddVerifiedClientParams(VerifRegTypes.AddVerifiedClientParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory allowance = params.allowance.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.addr.data);\\n        capacity += Misc.getBytesSize(allowance);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.addr.data);\\n        buf.writeBytes(allowance);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize RemoveExpiredAllocationsParams struct to cbor in order to pass as arguments to the verified registry actor\\n    /// @param params RemoveExpiredAllocationsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeRemoveExpiredAllocationsParams(VerifRegTypes.RemoveExpiredAllocationsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        uint allocationIdsLen = params.allocation_ids.length;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getFilActorIdSize(params.client);\\n        capacity += Misc.getPrefixSize(allocationIdsLen);\\n        for (uint i = 0; i < allocationIdsLen; i++) {\\n            capacity += Misc.getFilActorIdSize(params.allocation_ids[i]);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeFilActorId(params.client);\\n        buf.startFixedArray(uint64(allocationIdsLen));\\n        for (uint i = 0; i < allocationIdsLen; i++) {\\n            buf.writeFilActorId(params.allocation_ids[i]);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize RemoveExpiredAllocationsReturn struct from cbor encoded bytes coming from a verified registry actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of RemoveExpiredAllocationsReturn created based on parsed data\\n    function deserializeRemoveExpiredAllocationsReturn(bytes memory rawResp) internal pure returns (VerifRegTypes.RemoveExpiredAllocationsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 3);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.considered = new CommonTypes.FilActorId[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.considered[i], byteIdx) = rawResp.readFilActorId(byteIdx);\\n        }\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.results.success_count, byteIdx) = rawResp.readUInt32(byteIdx);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.results.fail_codes = new CommonTypes.FailCode[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 2);\\n\\n            (ret.results.fail_codes[i].idx, byteIdx) = rawResp.readUInt32(byteIdx);\\n            (ret.results.fail_codes[i].code, byteIdx) = rawResp.readUInt32(byteIdx);\\n        }\\n\\n        bytes memory tmp;\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.datacap_recovered = tmp.deserializeBigInt();\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize ExtendClaimTermsParams struct to cbor in order to pass as arguments to the verified registry actor\\n    /// @param params ExtendClaimTermsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeExtendClaimTermsParams(VerifRegTypes.ExtendClaimTermsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        uint termsLen = params.terms.length;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getPrefixSize(termsLen);\\n        for (uint i = 0; i < termsLen; i++) {\\n            capacity += Misc.getFilActorIdSize(params.terms[i].provider);\\n            capacity += Misc.getFilActorIdSize(params.terms[i].claim_id);\\n            capacity += Misc.getChainEpochSize(params.terms[i].term_max);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.startFixedArray(uint64(termsLen));\\n        for (uint i = 0; i < termsLen; i++) {\\n            buf.startFixedArray(3);\\n            buf.writeFilActorId(params.terms[i].provider);\\n            buf.writeFilActorId(params.terms[i].claim_id);\\n            buf.writeChainEpoch(params.terms[i].term_max);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize BatchReturn struct from cbor encoded bytes coming from a verified registry actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of BatchReturn created based on parsed data\\n    function deserializeBatchReturn(bytes memory rawResp) internal pure returns (CommonTypes.BatchReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.success_count, byteIdx) = rawResp.readUInt32(byteIdx);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.fail_codes = new CommonTypes.FailCode[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 2);\\n\\n            (ret.fail_codes[i].idx, byteIdx) = rawResp.readUInt32(byteIdx);\\n            (ret.fail_codes[i].code, byteIdx) = rawResp.readUInt32(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize RemoveExpiredClaimsParams struct to cbor in order to pass as arguments to the verified registry actor\\n    /// @param params RemoveExpiredClaimsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeRemoveExpiredClaimsParams(VerifRegTypes.RemoveExpiredClaimsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        uint claimIdsLen = params.claim_ids.length;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getFilActorIdSize(params.provider);\\n        capacity += Misc.getPrefixSize(claimIdsLen);\\n        for (uint i = 0; i < claimIdsLen; i++) {\\n            capacity += Misc.getFilActorIdSize(params.claim_ids[i]);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeFilActorId(params.provider);\\n        buf.startFixedArray(uint64(claimIdsLen));\\n        for (uint i = 0; i < claimIdsLen; i++) {\\n            buf.writeFilActorId(params.claim_ids[i]);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize RemoveExpiredClaimsReturn struct from cbor encoded bytes coming from a verified registry actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of RemoveExpiredClaimsReturn created based on parsed data\\n    function deserializeRemoveExpiredClaimsReturn(bytes memory rawResp) internal pure returns (VerifRegTypes.RemoveExpiredClaimsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.considered = new CommonTypes.FilActorId[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.considered[i], byteIdx) = rawResp.readFilActorId(byteIdx);\\n        }\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.results.success_count, byteIdx) = rawResp.readUInt32(byteIdx);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.results.fail_codes = new CommonTypes.FailCode[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 2);\\n\\n            (ret.results.fail_codes[i].idx, byteIdx) = rawResp.readUInt32(byteIdx);\\n            (ret.results.fail_codes[i].code, byteIdx) = rawResp.readUInt32(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0x70597cf1bd8788651484b6da522a6ff5ae84ccfd6240277ef151c4dbfd66ed18\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/AccountTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin account actor types for Solidity.\\n/// @author Zondax AG\\nlibrary AccountTypes {\\n    uint constant AuthenticateMessageMethodNum = 2643134072;\\n\\n    /// @param it should be a raw byte of signature, NOT a serialized signature object with a signatureType.\\n    /// @param message The message which is signed by the corresponding account address.\\n    struct AuthenticateMessageParams {\\n        bytes signature;\\n        bytes message;\\n    }\\n}\\n\",\"keccak256\":\"0x87555cec6962a4b6bd761a2390a24d66e01119d5b761048a27d1df0673a71263\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/DataCapTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title Filecoin datacap actor types for Solidity.\\n/// @author Zondax AG\\nlibrary DataCapTypes {\\n    CommonTypes.FilActorId constant ActorID = CommonTypes.FilActorId.wrap(7);\\n    uint constant NameMethodNum = 48890204;\\n    uint constant SymbolMethodNum = 2061153854;\\n    uint constant TotalSupplyMethodNum = 114981429;\\n    uint constant BalanceOfMethodNum = 3261979605;\\n    uint constant TransferMethodNum = 80475954;\\n    uint constant TransferFromMethodNum = 3621052141;\\n    uint constant IncreaseAllowanceMethodNum = 1777121560;\\n    uint constant DecreaseAllowanceMethodNum = 1529376545;\\n    uint constant RevokeAllowanceMethodNum = 2765635761;\\n    uint constant BurnMethodNum = 1434719642;\\n    uint constant BurnFromMethodNum = 2979674018;\\n    uint constant AllowanceMethodNum = 4205072950;\\n\\n    /// @param owner the wallet address of the owner.\\n    /// @param operator the wallet address of the owner.\\n    struct GetAllowanceParams {\\n        CommonTypes.FilAddress owner;\\n        CommonTypes.FilAddress operator;\\n    }\\n\\n    /// @param to the address to receive DataCap token.\\n    /// @param amount a non-negative amount to transfer.\\n    /// @param operator_data Arbitrary data to pass on via the receiver hook.\\n    struct TransferParams {\\n        CommonTypes.FilAddress to;\\n        CommonTypes.BigInt amount;\\n        bytes operator_data;\\n    }\\n\\n    /// @param from_balance the balance of from_address.\\n    /// @param to_balance the balance of to_address.\\n    /// @param recipient_data data returned from receive hook.\\n    struct TransferReturn {\\n        CommonTypes.BigInt from_balance;\\n        CommonTypes.BigInt to_balance;\\n        bytes recipient_data;\\n    }\\n\\n    /// @param from the address to send DataCap Token.\\n    /// @param to the address to receive DataCap Token.\\n    /// @param amount a non-negative amount to transfer.\\n    /// @param operator_data arbitrary data to pass on via the receiver hook.\\n    struct TransferFromParams {\\n        CommonTypes.FilAddress from;\\n        CommonTypes.FilAddress to;\\n        CommonTypes.BigInt amount;\\n        bytes operator_data;\\n    }\\n\\n    /// @param from_balance the balance of from_address.\\n    /// @param to_balance the balance of to_address.\\n    /// @param allowance the remaining allowance of owner address.\\n    /// @param recipient_data data returned from receive hook.\\n    struct TransferFromReturn {\\n        CommonTypes.BigInt from_balance;\\n        CommonTypes.BigInt to_balance;\\n        CommonTypes.BigInt allowance;\\n        bytes recipient_data;\\n    }\\n\\n    /// @param operator the  wallet address of the operator.\\n    /// @param increase increase DataCap token allowance for the operator address.\\n    struct IncreaseAllowanceParams {\\n        CommonTypes.FilAddress operator;\\n        CommonTypes.BigInt increase;\\n    }\\n\\n    /// @param operator the wallet address of the operator.\\n    /// @param decrease the decreased DataCap token allowance of the operator address.\\n    struct DecreaseAllowanceParams {\\n        CommonTypes.FilAddress operator;\\n        CommonTypes.BigInt decrease;\\n    }\\n\\n    /// @param owner the wallet address of the owner.\\n    /// @param amount the amount of DataCap token to be burned.\\n    struct BurnFromParams {\\n        CommonTypes.FilAddress owner;\\n        CommonTypes.BigInt amount;\\n    }\\n\\n    /// @param balance new balance in the account after the successful burn.\\n    /// @param allowance new remaining allowance between the owner and operator (caller)\\n    struct BurnFromReturn {\\n        CommonTypes.BigInt balance;\\n        CommonTypes.BigInt allowance;\\n    }\\n}\\n\",\"keccak256\":\"0x3cc3bf016e52161336f6e163e1f985ac1b535b8a75bf771a3feb5949ff06ee97\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/MarketTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin market actor types for Solidity.\\n/// @author Zondax AG\\nlibrary MarketTypes {\\n    CommonTypes.FilActorId constant ActorID = CommonTypes.FilActorId.wrap(5);\\n    uint constant AddBalanceMethodNum = 822473126;\\n    uint constant WithdrawBalanceMethodNum = 2280458852;\\n    uint constant GetBalanceMethodNum = 726108461;\\n    uint constant GetDealDataCommitmentMethodNum = 1157985802;\\n    uint constant GetDealClientMethodNum = 128053329;\\n    uint constant GetDealProviderMethodNum = 935081690;\\n    uint constant GetDealLabelMethodNum = 46363526;\\n    uint constant GetDealTermMethodNum = 163777312;\\n    uint constant GetDealTotalPriceMethodNum = 4287162428;\\n    uint constant GetDealClientCollateralMethodNum = 200567895;\\n    uint constant GetDealProviderCollateralMethodNum = 2986712137;\\n    uint constant GetDealVerifiedMethodNum = 2627389465;\\n    uint constant GetDealActivationMethodNum = 2567238399;\\n    uint constant PublishStorageDealsMethodNum = 2236929350;\\n\\n    /// @param provider_or_client the address of provider or client.\\n    /// @param tokenAmount the token amount to withdraw.\\n    struct WithdrawBalanceParams {\\n        CommonTypes.FilAddress provider_or_client;\\n        CommonTypes.BigInt tokenAmount;\\n    }\\n\\n    /// @param balance the escrow balance for this address.\\n    /// @param locked the escrow locked amount for this address.\\n    struct GetBalanceReturn {\\n        CommonTypes.BigInt balance;\\n        CommonTypes.BigInt locked;\\n    }\\n\\n    /// @param data the data commitment of this deal.\\n    /// @param size the size of this deal.\\n    struct GetDealDataCommitmentReturn {\\n        bytes data;\\n        uint64 size;\\n    }\\n\\n    /// @param start the chain epoch to start the deal.\\n    /// @param endthe chain epoch to end the deal.\\n    struct GetDealTermReturn {\\n        CommonTypes.ChainEpoch start;\\n        CommonTypes.ChainEpoch end;\\n    }\\n\\n    /// @param activated Epoch at which the deal was activated, or -1.\\n    /// @param terminated Epoch at which the deal was terminated abnormally, or -1.\\n    struct GetDealActivationReturn {\\n        CommonTypes.ChainEpoch activated;\\n        CommonTypes.ChainEpoch terminated;\\n    }\\n\\n    /// @param deals list of deal proposals signed by a client\\n    struct PublishStorageDealsParams {\\n        ClientDealProposal[] deals;\\n    }\\n\\n    /// @param ids returned storage deal IDs.\\n    /// @param valid_deals represent all the valid deals.\\n    struct PublishStorageDealsReturn {\\n        uint64[] ids;\\n        bytes valid_deals;\\n    }\\n\\n    /// @param piece_cid PieceCID.\\n    /// @param piece_size the size of the piece.\\n    /// @param verified_deal if the deal is verified or not.\\n    /// @param client the address of the storage client.\\n    /// @param provider the address of the storage provider.\\n    /// @param label any label that client choose for the deal.\\n    /// @param start_epoch the chain epoch to start the deal.\\n    /// @param end_epoch the chain epoch to end the deal.\\n    /// @param storage_price_per_epoch the token amount to pay to provider per epoch.\\n    /// @param provider_collateral the token amount as collateral paid by the provider.\\n    /// @param client_collateral the token amount as collateral paid by the client.\\n    struct DealProposal {\\n        CommonTypes.Cid piece_cid;\\n        uint64 piece_size;\\n        bool verified_deal;\\n        CommonTypes.FilAddress client;\\n        CommonTypes.FilAddress provider;\\n        CommonTypes.DealLabel label;\\n        CommonTypes.ChainEpoch start_epoch;\\n        CommonTypes.ChainEpoch end_epoch;\\n        CommonTypes.BigInt storage_price_per_epoch;\\n        CommonTypes.BigInt provider_collateral;\\n        CommonTypes.BigInt client_collateral;\\n    }\\n\\n    /// @param proposal Proposal\\n    /// @param client_signature the signature signed by the client.\\n    struct ClientDealProposal {\\n        DealProposal proposal;\\n        bytes client_signature;\\n    }\\n\\n    struct MarketDealNotifyParams {\\n        bytes dealProposal;\\n        uint64 dealId;\\n    }\\n}\\n\",\"keccak256\":\"0xcbffb585561b6057c72c1e1cfea6090d918341cc347e785a988ee9c3c70533be\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/types/VerifRegTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin Verified Registry actor types for Solidity.\\n/// @author Zondax AG\\nlibrary VerifRegTypes {\\n    CommonTypes.FilActorId constant ActorID = CommonTypes.FilActorId.wrap(6);\\n    uint constant GetClaimsMethodNum = 2199871187;\\n    uint constant AddVerifiedClientMethodNum = 3916220144;\\n    uint constant RemoveExpiredAllocationsMethodNum = 2421068268;\\n    uint constant ExtendClaimTermsMethodNum = 1752273514;\\n    uint constant RemoveExpiredClaimsMethodNum = 2873373899;\\n\\n    /// @param provider the provider address.\\n    /// @param  claim_ids a list of Claim IDs for specific provider.\\n    struct GetClaimsParams {\\n        CommonTypes.FilActorId provider;\\n        CommonTypes.FilActorId[] claim_ids;\\n    }\\n\\n    /// @param  claims list of Claims returned.\\n    /// @param  batch_info total success and failures of the batch process\\n    struct GetClaimsReturn {\\n        CommonTypes.BatchReturn batch_info;\\n        Claim[] claims;\\n    }\\n\\n    /// @param addr the verified client address\\n    /// @param allowance approved DataCap for this verified client\\n    struct AddVerifiedClientParams {\\n        CommonTypes.FilAddress addr;\\n        CommonTypes.BigInt allowance;\\n    }\\n\\n    /// @param client the client address for which to expired allocations.\\n    /// @param allocation_ids list of allocation IDs to attempt to remove. If empty, will remove all eligible expired allocations.\\n    struct RemoveExpiredAllocationsParams {\\n        CommonTypes.FilActorId client;\\n        CommonTypes.FilActorId[] allocation_ids;\\n    }\\n\\n    /// @param considered Allocation IDs are either specified by the caller or discovered to be expired.\\n    /// @param results results for each processed allocation.\\n    /// @param datacap_recovered the amount of DataCap token reclaimed for the client.\\n    struct RemoveExpiredAllocationsReturn {\\n        CommonTypes.FilActorId[] considered;\\n        CommonTypes.BatchReturn results;\\n        CommonTypes.BigInt datacap_recovered;\\n    }\\n\\n    /// @param provider the provider address (need not be the caller)\\n    /// @param claim_ids a list of Claim IDs with expired term. If no claims are specified, all eligible claims will be removed.\\n    struct RemoveExpiredClaimsParams {\\n        CommonTypes.FilActorId provider;\\n        CommonTypes.FilActorId[] claim_ids;\\n    }\\n\\n    /// @param considered a list of IDs of the claims that were either specified by the caller or discovered to be expired.\\n    /// @param results results for each processed claim.\\n    struct RemoveExpiredClaimsReturn {\\n        CommonTypes.FilActorId[] considered;\\n        CommonTypes.BatchReturn results;\\n    }\\n\\n    /// @param terms list of claim terms to extend\\n    struct ExtendClaimTermsParams {\\n        ClaimTerm[] terms;\\n    }\\n\\n    /// @param provider the provider address which storing the data.\\n    /// @param claim_id claim ID.\\n    /// @param term_max the max chain epoch to extend.\\n    struct ClaimTerm {\\n        CommonTypes.FilActorId provider;\\n        CommonTypes.FilActorId claim_id;\\n        CommonTypes.ChainEpoch term_max;\\n    }\\n\\n    /// @param provider the provider storing the data.\\n    /// @param client the client which allocated the DataCap.\\n    /// @param data identifier for the data committed.\\n    /// @param size the size of the data.\\n    /// @param term_min the min period after term started which the provider must commit to storing data.\\n    /// @param term_max the max period after term started for which the provider can earn QA-power for the data.\\n    /// @param term_start the epoch at which the piece was committed.\\n    /// @param sector ID of the provider's sector in which the data is committed.\\n    struct Claim {\\n        CommonTypes.FilActorId provider;\\n        CommonTypes.FilActorId client;\\n        bytes data;\\n        uint64 size;\\n        CommonTypes.ChainEpoch term_min;\\n        CommonTypes.ChainEpoch term_max;\\n        CommonTypes.ChainEpoch term_start;\\n        CommonTypes.FilActorId sector;\\n    }\\n}\\n\",\"keccak256\":\"0xd09f86b3a9a466f4206efa62a51d10659ab540daa26b173ae0ccbe08d6176811\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        if (exit != 0) {\\n            revert ActorError(exit);\\n        }\\n\\n        return return_value;\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/CborDecode.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// \\tMajUnsignedInt = 0\\n// \\tMajSignedInt   = 1\\n// \\tMajByteString  = 2\\n// \\tMajTextString  = 3\\n// \\tMajArray       = 4\\n// \\tMajMap         = 5\\n// \\tMajTag         = 6\\n// \\tMajOther       = 7\\n\\nuint8 constant MajUnsignedInt = 0;\\nuint8 constant MajSignedInt = 1;\\nuint8 constant MajByteString = 2;\\nuint8 constant MajTextString = 3;\\nuint8 constant MajArray = 4;\\nuint8 constant MajMap = 5;\\nuint8 constant MajTag = 6;\\nuint8 constant MajOther = 7;\\n\\nuint8 constant TagTypeBigNum = 2;\\nuint8 constant TagTypeNegativeBigNum = 3;\\n\\nuint8 constant True_Type = 21;\\nuint8 constant False_Type = 20;\\n\\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\\n/// @author Zondax AG\\nlibrary CBORDecoder {\\n    /// @notice check if next value on the cbor encoded data is null\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\\n        return cborData[byteIdx] == hex\\\"f6\\\";\\n    }\\n\\n    /// @notice attempt to read a bool value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajOther, \\\"invalid maj (expected MajOther)\\\");\\n        assert(value == True_Type || value == False_Type);\\n\\n        return (value != False_Type, byteIdx);\\n    }\\n\\n    /// @notice attempt to read the length of a fixed array\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajArray, \\\"invalid maj (expected MajArray)\\\");\\n\\n        return (len, byteIdx);\\n    }\\n\\n    /// @notice attempt to read an arbitrary length string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTextString, \\\"invalid maj (expected MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (string(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read an arbitrary byte string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajByteString, \\\"invalid maj (expected MajTag or MajByteString)\\\");\\n\\n        if (maj == MajTag) {\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            assert(maj == MajByteString);\\n        }\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (slice, byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a bytes32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(32);\\n        uint slice_index = 32 - len;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (bytes32(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a uint256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\\n        uint8 maj;\\n        uint256 value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajUnsignedInt, \\\"invalid maj (expected MajTag or MajUnsignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            require(value == TagTypeBigNum, \\\"invalid tag (expected TagTypeBigNum)\\\");\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (value, byteIdx + len);\\n        }\\n\\n        return (value, byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajSignedInt, \\\"invalid maj (expected MajTag or MajSignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            assert(value == TagTypeNegativeBigNum);\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (int256(value), byteIdx + len);\\n        }\\n\\n        return (int256(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint64(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint32(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint16(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint8(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int64(uint64(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int32(uint32(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int16(uint16(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int8(uint8(value)), byteIdx);\\n    }\\n\\n    /// @notice slice uint8 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint8 sliced from bytes\\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\\n        require(bs.length >= start + 1, \\\"slicing out of range\\\");\\n        return uint8(bs[start]);\\n    }\\n\\n    /// @notice slice uint16 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint16 sliced from bytes\\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\\n        require(bs.length >= start + 2, \\\"slicing out of range\\\");\\n        bytes2 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint16(x);\\n    }\\n\\n    /// @notice slice uint32 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint32 sliced from bytes\\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\\n        require(bs.length >= start + 4, \\\"slicing out of range\\\");\\n        bytes4 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint32(x);\\n    }\\n\\n    /// @notice slice uint64 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint64 sliced from bytes\\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\\n        require(bs.length >= start + 8, \\\"slicing out of range\\\");\\n        bytes8 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint64(x);\\n    }\\n\\n    /// @notice Parse cbor header for major type and extra info.\\n    /// @param cbor cbor encoded bytes to parse from\\n    /// @param byteIndex current position to read on the cbor encoded bytes\\n    /// @return major type, extra info and the byte index after moving past header bytes\\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\\n        uint8 first = sliceUInt8(cbor, byteIndex);\\n        byteIndex += 1;\\n        uint8 maj = (first & 0xe0) >> 5;\\n        uint8 low = first & 0x1f;\\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\\n        require(low < 28, \\\"cannot handle headers with extra > 27\\\");\\n\\n        // extra is lower bits\\n        if (low < 24) {\\n            return (maj, low, byteIndex);\\n        }\\n\\n        // extra in next byte\\n        if (low == 24) {\\n            uint8 next = sliceUInt8(cbor, byteIndex);\\n            byteIndex += 1;\\n            require(next >= 24, \\\"invalid cbor\\\"); // otherwise this is invalid cbor\\n            return (maj, next, byteIndex);\\n        }\\n\\n        // extra in next 2 bytes\\n        if (low == 25) {\\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\\n            byteIndex += 2;\\n            return (maj, extra16, byteIndex);\\n        }\\n\\n        // extra in next 4 bytes\\n        if (low == 26) {\\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\\n            byteIndex += 4;\\n            return (maj, extra32, byteIndex);\\n        }\\n\\n        // extra in next 8 bytes\\n        assert(low == 27);\\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\\n        byteIndex += 8;\\n        return (maj, extra64, byteIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x3babe3c71558c21f0bef9de09088c42b8b148d16d856f84a350b9c43b4da6018\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"040a\\\", addr));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"00\\\", result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == 0x00) {\\n            return addr.data.length <= 10;\\n        } else if (addr.data[0] == 0x01 || addr.data[0] == 0x02) {\\n            return addr.data.length == 21;\\n        } else if (addr.data[0] == 0x03) {\\n            return addr.data.length == 49;\\n        } else if (addr.data[0] == 0x04) {\\n            return addr.data.length <= 64;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\",\"keccak256\":\"0x3ca8652660af7a3ff1b894b7c8a875645999b561499e960198dfe330d39ce387\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Leb128.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b\",\"license\":\"Apache-2.0\"},\"@zondax/filecoin-solidity/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4\",\"license\":\"Apache-2.0\"},\"solidity-cborutils/contracts/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xe03d8889bf66e7a30e8010b022b6c86ad0f8c19764cc6c7f50b6bb4ad860cb9b\",\"license\":\"MIT\"},\"src/v0.8/core/filecoin/Filecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {MarketAPI} from \\\"@zondax/filecoin-solidity/contracts/v0.8/MarketAPI.sol\\\";\\nimport {VerifRegAPI} from \\\"@zondax/filecoin-solidity/contracts/v0.8/VerifRegAPI.sol\\\";\\nimport {MarketTypes} from \\\"@zondax/filecoin-solidity/contracts/v0.8/types/MarketTypes.sol\\\";\\nimport {VerifRegTypes} from \\\"@zondax/filecoin-solidity/contracts/v0.8/types/VerifRegTypes.sol\\\";\\nimport {CommonTypes} from \\\"@zondax/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\\\";\\n///interface\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {IFilecoin} from \\\"src/v0.8/interfaces/core/IFilecoin.sol\\\";\\n///type\\nimport {RolesType} from \\\"src/v0.8/types/RolesType.sol\\\";\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\nimport {RolesModifiers} from \\\"src/v0.8/shared/modifiers/RolesModifiers.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Filecoin\\ncontract Filecoin is Initializable, UUPSUpgradeable, IFilecoin, RolesModifiers {\\n    FilecoinType.Network public network;\\n    IRoles private roles;\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    uint256[32] private __gap;\\n\\n    /// @notice initialize function to initialize the contract and grant the default admin role to the deployer.\\n    function initialize(\\n        FilecoinType.Network _network,\\n        address _roles\\n    ) public initializer {\\n        network = _network;\\n        roles = IRoles(_roles);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @notice UUPS Upgradeable function to update the roles implementation\\n    /// @dev Only triggered by contract admin\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyRole(roles, RolesType.DEFAULT_ADMIN_ROLE) // solhint-disable-next-line\\n    {}\\n\\n    /// @notice Returns the implementation contract\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice Internal function to get the state of a Filecoin storage deal for a replica.\\n    /// @dev TODO:check _claimId belongs to the _cid, now filecoin-solidity is not support\\n    ///           https://github.com/dataswap/core/issues/41\\n    function getReplicaDealState(\\n        bytes32 /*_cid*/,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState) {\\n        //get expired info\\n        MarketTypes.GetDealTermReturn memory dealTerm = MarketAPI.getDealTerm(\\n            _claimId\\n        );\\n        if (\\n            CommonTypes.ChainEpoch.unwrap(dealTerm.end) < int256(block.number)\\n        ) {\\n            return FilecoinType.DealState.Expired;\\n        }\\n\\n        //get slashed info\\n        // solhint-disable-next-line\\n        MarketTypes.GetDealActivationReturn memory DealActivation = MarketAPI\\n            .getDealActivation(_claimId);\\n        if (\\n            CommonTypes.ChainEpoch.unwrap(DealActivation.terminated) <\\n            int256(block.number)\\n        ) {\\n            return FilecoinType.DealState.Slashed;\\n        }\\n\\n        return FilecoinType.DealState.Stored;\\n    }\\n\\n    /// @dev do nothing,just for mock\\n    // solhint-disable-next-line\\n    function setMockDealState(FilecoinType.DealState _state) external {}\\n\\n    /// @notice Internal function to get the claim of a Filecoin storage for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory) {\\n        CommonTypes.FilActorId[] memory actorIds = new CommonTypes.FilActorId[](\\n            1\\n        );\\n\\n        actorIds[0] = CommonTypes.FilActorId.wrap(_claimId);\\n\\n        VerifRegTypes.GetClaimsParams memory params = VerifRegTypes\\n            .GetClaimsParams(CommonTypes.FilActorId.wrap(_provider), actorIds);\\n\\n        VerifRegTypes.GetClaimsReturn memory claims = VerifRegAPI.getClaims(\\n            params\\n        );\\n\\n        require(claims.claims.length > 0, \\\"length mast greater than 0\\\");\\n\\n        return claims.claims[0].data;\\n    }\\n\\n    /// @dev mock the filecoin claim data\\n    // solhint-disable-next-line\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external {}\\n}\\n\",\"keccak256\":\"0x5be802cd0544334281142730cd03cb402126d6b7de40877b7e9ef30a9a0102bc\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IFilecoin.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\nimport {FilecoinType} from \\\"src/v0.8/types/FilecoinType.sol\\\";\\n\\n/// @title IFilplus\\ninterface IFilecoin {\\n    /// @notice The function to get the state of a Filecoin storage deal for a replica.\\n    function getReplicaDealState(\\n        bytes32 _cid,\\n        uint64 _claimId\\n    ) external returns (FilecoinType.DealState);\\n\\n    /// @dev do nothing,just for mock\\n    function setMockDealState(FilecoinType.DealState _state) external;\\n\\n    /// @notice The function to get the data of a claim for a replica.\\n    function getReplicaClaimData(\\n        uint64 _provider,\\n        uint64 _claimId\\n    ) external returns (bytes memory);\\n\\n    /// @dev mock the filecoin claim data\\n    function setMockClaimData(uint64 claimId, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb09fbb4ff74243480bfbf55be3a56a020220a915aebe48faca532462df096a06\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/interfaces/core/IRoles.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title IRoles Interface\\n/// @notice This interface defines the role-based access control for various roles within the system.\\ninterface IRoles is IAccessControlEnumerableUpgradeable {\\n    ///@dev The new owner accepts the ownership transfer.\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 _role) external view;\\n\\n    ///@dev Returns the address of the current owner.\\n    function owner() external view returns (address);\\n\\n    ///@dev Returns the address of the pending owner.\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc03390a62336f7c9e77db4d08a65644439764fb69bd616b499aa502d836e66f8\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/CommonModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/// @title ModifierCommon\\ncontract CommonModifiers {\\n    /// @dev Modifier to check if an ID is not zero.\\n    modifier onlyNotZero(uint64 _value) {\\n        require(_value != 0, \\\"Value must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if an address is not zero\\n    modifier onlyNotZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"Address must not be zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to check the sender's address\\n    modifier onlyAddress(address allowedAddress) {\\n        require(msg.sender == allowedAddress, \\\"Only allowed address can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x724b2ab7816874ad6285ec7bd538f1ee1e44984c1190b1d0a8b1be33620df029\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/shared/modifiers/RolesModifiers.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport {IRoles} from \\\"src/v0.8/interfaces/core/IRoles.sol\\\";\\nimport {CommonModifiers} from \\\"src/v0.8/shared/modifiers/CommonModifiers.sol\\\";\\n\\n/// @title RolesModifier\\ncontract RolesModifiers is CommonModifiers {\\n    modifier onlyRole(IRoles _roles, bytes32 _role) {\\n        // roles.checkRole(_role);\\n        require(\\n            _roles.hasRole(_role, msg.sender),\\n            \\\"Only allowed role can call\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x478efe3520eedf7d6cde667b377bdf4d2a721616c7f2e66603d364e51f02ad3f\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/FilecoinType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nlibrary FilecoinType {\\n    /// @notice Enum representing the possible states of a Filecoin storage deal.\\n    enum DealState {\\n        Stored, // The filecoin deal's verification was successful.\\n        StorageFailed, // The filecoin deal's verification failed.\\n        Slashed, // The filecoin deal has been slashed.\\n        Expired // The filecoin deal has expired.\\n    }\\n\\n    /// @notice filecoin network type\\n    enum Network {\\n        Mainnet,\\n        CalibrationTestnet,\\n        EndIdentifier\\n    }\\n}\\n\",\"keccak256\":\"0xe4a9b3fe32517cb0c7492eb858e573419d0b323e7735e31cf318381340793f0d\",\"license\":\"GPL-3.0-or-later\"},\"src/v0.8/types/RolesType.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Dataswap\\n *\\n *  Licensed under the GNU General Public License, Version 3.0 or later (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      https://www.gnu.org/licenses/gpl-3.0.en.html\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RolesType Library\\n/// @notice This library defines constants for different roles within the system.\\nlibrary RolesType {\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Bytes32 constant representing the role of a storage provider.\\n    bytes32 public constant STORAGE_PROVIDER = keccak256(\\\"SP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a retrieve provider.\\n    bytes32 public constant RETRIEVE_PROVIDER = keccak256(\\\"RP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute provider.\\n    bytes32 public constant COMPUTE_PROVIDER = keccak256(\\\"CP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset provider.\\n    bytes32 public constant METADATA_DATASET_PROVIDER = keccak256(\\\"MDP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset provider.\\n    bytes32 public constant DATASET_PROVIDER = keccak256(\\\"DP\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a metadata dataset auditor.\\n    bytes32 public constant METADATA_DATASET_AUDITOR = keccak256(\\\"MDA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a dataset auditor.\\n    bytes32 public constant DATASET_AUDITOR = keccak256(\\\"DA\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a reviewer client.\\n    bytes32 public constant REVIEWER_CLIENT = keccak256(\\\"RC\\\");\\n\\n    /// @notice Bytes32 constant representing the role of a compute client.\\n    bytes32 public constant COMPUTE_CLIENT = keccak256(\\\"CC\\\");\\n}\\n\",\"keccak256\":\"0xed26c066df50161142fb4dda28e66d23a7f1d85cb1bdfd7a3b06187d96ad9bd1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051612aa861004c600039600081816101f001528181610239015281816102be015281816102fe01526104920152612aa86000f3fe6080604052600436106100815760003560e01c80633659cfe6146100865780634f1ef286146100a85780635187599d146100bb57806352d1902d146100db5780636739afca146101065780639aabb5c31461012d5780639cdaed621461014c578063aaf10f421461016a578063ceb1a8cb1461018c578063d52f338a146101b9575b600080fd5b34801561009257600080fd5b506100a66100a1366004611c4e565b6101e6565b005b6100a66100b6366004611d74565b6102b4565b3480156100c757600080fd5b506100a66100d6366004611de3565b610369565b3480156100e757600080fd5b506100f0610485565b6040516100fd9190611e1e565b60405180910390f35b34801561011257600080fd5b506065546101209060ff1681565b6040516100fd9190611e70565b34801561013957600080fd5b506100a6610148366004611e98565b5050565b34801561015857600080fd5b506100a6610167366004611ed2565b50565b34801561017657600080fd5b5061017f6104e2565b6040516100fd9190611efc565b34801561019857600080fd5b506101ac6101a7366004611f0a565b6104f1565b6040516100fd9190611f95565b3480156101c557600080fd5b506101d96101d4366004611fb7565b6105ba565b6040516100fd9190612007565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036102375760405162461bcd60e51b815260040161022e9061204f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610269610613565b6001600160a01b03161461028f5760405162461bcd60e51b815260040161022e90612096565b6102988161062f565b60408051600080825260208201909252610167918391906106c7565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036102fc5760405162461bcd60e51b815260040161022e9061204f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661032e610613565b6001600160a01b0316146103545760405162461bcd60e51b815260040161022e90612096565b61035d8261062f565b610148828260016106c7565b600054610100900460ff16158080156103895750600054600160ff909116105b806103aa5750610398306107a9565b1580156103aa575060005460ff166001145b6103c65760405162461bcd60e51b815260040161022e906120f1565b6000805460ff1916600117905580156103e9576000805461ff0019166101001790555b6065805484919060ff1916600183600281111561040857610408611e2c565b021790555060658054610100600160a81b0319166101006001600160a01b038516021790556104356107b8565b8015610480576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061047790600190612115565b60405180910390a15b505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104cf5760405162461bcd60e51b815260040161022e90612178565b50600080516020612a2c83398151915290565b60006104ec610613565b905090565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061052b5761052b612188565b6001600160401b0392831660209182029290920181019190915260408051808201909152918616825281018290526000610564826107e1565b905060008160200151511161058b5760405162461bcd60e51b815260040161022e906121d2565b80602001516000815181106105a2576105a2612188565b60200260200101516040015193505050505b92915050565b6000806105c683610821565b905043816020015160070b12156105e15760039150506105b4565b60006105ec84610862565b905043816020015160070b1215610608576002925050506105b4565b506000949350505050565b600080516020612a2c833981519152546001600160a01b031690565b606554604051632474521560e21b81526101009091046001600160a01b03169060009082906391d148549061066a90849033906004016121e2565b602060405180830381865afa158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190612210565b6104805760405162461bcd60e51b815260040161022e90612262565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156106fa5761048083610898565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610754575060408051601f3d908101601f191682019092526107519181019061227d565b60015b6107705760405162461bcd60e51b815260040161022e906122e9565b600080516020612a2c833981519152811461079d5760405162461bcd60e51b815260040161022e9061233f565b506104808383836108ec565b6001600160a01b03163b151590565b600054610100900460ff166107df5760405162461bcd60e51b815260040161022e90612397565b565b6107e9611ba5565b60006107f483610917565b9050600061080e600663831f5ed360518560006001610a46565b905061081981610b20565b949350505050565b610829611bcd565b600061083d836001600160401b0316610f9d565b9050600061085760056309c30b2060518560006001610a46565b905061081981610fd5565b61086a611bcd565b600061087e836001600160401b0316610f9d565b905060006108576005639904f2ff60518560006001610a46565b6108a1816107a9565b6108bd5760405162461bcd60e51b815260040161022e906123f1565b600080516020612a2c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6108f58361102d565b6000825111806109025750805b1561048057610911838361106d565b50505050565b60208101515160609060009061092d6002611099565b6109379083612417565b915061094684600001516110e7565b6109509083612417565b915061095b81611099565b6109659083612417565b915060005b818110156109b6576109988560200151828151811061098b5761098b612188565b60200260200101516110e7565b6109a29084612417565b9250806109ae8161242a565b91505061096a565b5060006109c2836110fc565b90506109cf81600261111d565b84516109dc908290611129565b6109e6818361111d565b60005b82811015610a3357610a2186602001518281518110610a0a57610a0a612188565b60200260200101518361112990919063ffffffff16565b80610a2b8161242a565b9150506109e9565b50610a3d81611133565b95945050505050565b6060610a596005607f60991b018461115f565b6000806005607f60991b01888686610a72576000610a75565b60015b8a8a8e604051602001610a8d9695949392919061246d565b60408051601f1981840301815290829052610aa7916124f0565b600060405180830381855af49150503d8060008114610ae2576040519150601f19603f3d011682016040523d82523d6000602084013e610ae7565b606091505b509150915081610b0a57604051638a7db5bf60e01b815260040160405180910390fd5b610b13816111a7565b9998505050505050505050565b610b28611ba5565b600080610b358482611280565b9250905060028114610b4957610b496124fc565b610b538483611280565b9250905060028114610b6757610b676124fc565b610b7184836112cc565b845163ffffffff92831690529250610b8d908590849061128016565b92509050806001600160401b03811115610ba957610ba9611c79565b604051908082528060200260200182016040528015610bee57816020015b6040805180820190915260008082526020820152815260200190600190039081610bc75790505b5083516020015260005b81811015610cb057610c0a8584611280565b9350915060028214610c1e57610c1e6124fc565b610c2885846112cc565b855160200151805184908110610c4057610c40612188565b602090810291909101015163ffffffff92831690529350610c6590869085906112cc16565b855160200151805184908110610c7d57610c7d612188565b60200260200101516020018195508263ffffffff1663ffffffff1681525050508080610ca89061242a565b915050610bf8565b50610cbb8483611280565b92509050806001600160401b03811115610cd757610cd7611c79565b604051908082528060200260200182016040528015610d4757816020015b60408051610100810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e08201528252600019909201910181610cf55790505b50602084015260005b81811015610f9557610d628584611280565b9350915060088214610d7657610d766124fc565b610d80858461130d565b85602001518381518110610d9657610d96612188565b60209081029190910101516001600160401b039092169091529250610dbb858461130d565b85602001518381518110610dd157610dd1612188565b6020908102919091018101516001600160401b039093169201919091529250610dfa8584611327565b85602001518381518110610e1057610e10612188565b6020908102919091010151604001919091529250610e2e85846112cc565b85602001518381518110610e4457610e44612188565b6020026020010151606001819550826001600160401b03166001600160401b03168152505050610e7d838661149590919063ffffffff16565b85602001518381518110610e9357610e93612188565b60200260200101516080018195508260070b60070b8152505050610ec0838661149590919063ffffffff16565b85602001518381518110610ed657610ed6612188565b602002602001015160a0018195508260070b60070b8152505050610f03838661149590919063ffffffff16565b85602001518381518110610f1957610f19612188565b602002602001015160c0018195508260070b60070b8152505050610f46838661130d90919063ffffffff16565b85602001518381518110610f5c57610f5c612188565b602002602001015160e001819550826001600160401b03166001600160401b031681525050508080610f8d9061242a565b915050610d50565b505050919050565b60606000610fb3836001600160401b0316611099565b90506000610fc0826110fc565b9050610fcc81856114a3565b61081981611133565b610fdd611bcd565b600080610fea8482611280565b9250905060028114610ffe57610ffe6124fc565b6110088483611495565b60079190910b8452915061101c8483611495565b5060070b6020840152509092915050565b61103681610898565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606110928383604051806060016040528060278152602001612a4c602791396114af565b9392505050565b6000601782116110ab57506001919050565b60ff82116110bb57506002919050565b61ffff82116110cc57506003919050565b63ffffffff82116110df57506005919050565b506009919050565b6000816110926001600160401b038216611099565b611104611be4565b80516111109083611527565b5060006020820152919050565b61014882600483611591565b61014882826114a3565b606081602001516000146111595760405162461bcd60e51b815260040161022e90612535565b50515190565b4781811015611185578082604051634787a10360e11b815260040161022e929190612545565b823f1515806109115760405163064d954b60e41b815260040160405180910390fd5b60606000806000848060200190518101906111c291906125c3565b919450925090506001600160401b0382166111fc578051156111f757604051630e74990760e01b815260040160405180910390fd5b61125f565b6001600160401b0382166051148061121d57506001600160401b0382166071145b156112445780516000036111f757604051630e74990760e01b815260040160405180910390fd5b8160405163f1f6bced60e01b815260040161022e919061262d565b8215610819578260405163d4bb667160e01b815260040161022e9190611e1e565b600080600080611290868661159c565b96509092506001600160401b0316905060ff82166004146112c35760405162461bcd60e51b815260040161022e9061266f565b95939450505050565b6000806000806112dc868661159c565b96509092506001600160401b0316905060ff8216156112c35760405162461bcd60e51b815260040161022e906126c1565b6000808061131b85856112cc565b90969095509350505050565b60606000806000611338868661159c565b96509092506001600160401b0316905060ff82166006148061135d575060ff82166002145b6113795760405162461bcd60e51b815260040161022e9061271c565b60051960ff8316016113b25761138f868661159c565b96509092506001600160401b0316905060ff82166002146113b2576113b26124fc565b60006113be8287612417565b90506000826001600160401b038111156113da576113da611c79565b6040519080825280601f01601f191660200182016040528015611404576020820181803683370190505b5090506000875b838110156114795789818151811061142557611425612188565b602001015160f81c60f81b83838151811061144257611442612188565b60200101906001600160f81b031916908160001a905350816114638161242a565b92505080806114719061242a565b91505061140b565b5081611485858a612417565b9650965050505050509250929050565b6000808061131b8585611719565b61014882600083611768565b6060600080856001600160a01b0316856040516114cc91906124f0565b600060405180830381855af49150503d8060008114611507576040519150601f19603f3d011682016040523d82523d6000602084013e61150c565b606091505b509150915061151d86838387611881565b9695505050505050565b61152f611c04565b61153a602083612742565b156115625761154a602083612742565b611555906020612756565b61155f9083612417565b91505b60208084018390526040518085526000815290818401018181101561158657600080fd5b604052509192915050565b610480838383611768565b6000806000806115ac86866118c8565b90506115b9600186612417565b94506007600582901c16601f8216601c81106115e75760405162461bcd60e51b815260040161022e906127ab565b60188160ff1610156116055790945060ff1692508491506117129050565b8060ff1660180361166257600061161c89896118c8565b9050611629600189612417565b975060188160ff16101561164f5760405162461bcd60e51b815260040161022e906127de565b9195505060ff1692508491506117129050565b8060ff1660190361169c5760006116798989611917565b9050611686600289612417565b97509195505061ffff1692508491506117129050565b8060ff16601a036116d85760006116b38989611950565b90506116c0600489612417565b97509195505063ffffffff1692508491506117129050565b8060ff16601b146116eb576116eb6124fc565b60006116f78989611989565b9050611704600889612417565b975091955090935085925050505b9250925092565b600080600080611729868661159c565b96509092506001600160401b0316905060ff82166001148061174c575060ff8216155b6112c35760405162461bcd60e51b815260040161022e90612840565b6017816001600160401b03161161178e5782516109119060e0600585901b1683176119c2565b60ff816001600160401b0316116117ce5782516117b6906018611fe0600586901b16176119c2565b508251610911906001600160401b0383166001611a1e565b61ffff816001600160401b03161161180f5782516117f7906019611fe0600586901b16176119c2565b508251610911906001600160401b0383166002611a1e565b63ffffffff816001600160401b03161161185257825161183a90601a611fe0600586901b16176119c2565b508251610911906001600160401b0383166004611a1e565b825161186990601b611fe0600586901b16176119c2565b508251610911906001600160401b0383166008611a1e565b606083156118be5782516000036118b75761189b856107a9565b6118b75760405162461bcd60e51b815260040161022e90612884565b5081610819565b6108198383611a96565b60006118d5826001612417565b835110156118f55760405162461bcd60e51b815260040161022e906128bf565b82828151811061190757611907612188565b016020015160f81c905092915050565b6000611924826002612417565b835110156119445760405162461bcd60e51b815260040161022e906128bf565b50016020015160f01c90565b600061195d826004612417565b8351101561197d5760405162461bcd60e51b815260040161022e906128bf565b50016020015160e01c90565b6000611996826008612417565b835110156119b65760405162461bcd60e51b815260040161022e906128bf565b50016020015160c01c90565b6119ca611c04565b82515160006119da826001612417565b9050846020015182106119fb576119fb856119f68360026128cf565b611ac0565b84516020838201018581538151831115611a13578282525b509495945050505050565b611a26611c04565b8351516000611a358285612417565b90508560200151811115611a5257611a52866119f68360026128cf565b60006001611a62866101006129fc565b611a6c9190612756565b905086518281018783198251161781528151841115611a89578382525b5096979650505050505050565b815115611aa65781518083602001fd5b8060405162461bcd60e51b815260040161022e9190611f95565b8151611acc8383611527565b506109118382611ada611c04565b61109283838451611ae9611c04565b8251821115611af757600080fd5b8351516000611b068483612417565b90508560200151811115611b2357611b23866119f68360026128cf565b855180518382016020019160009180851115611b3d578482525b505050602086015b60208610611b7d5780518252611b5c602083612417565b9150611b69602082612417565b9050611b76602087612756565b9550611b45565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b6040805160808101825260009181019182526060808201529081908152602001606081525090565b604080518082019091526000808252602082015290565b6040518060400160405280611bf7611c04565b8152602001600081525090565b604051806040016040528060608152602001600081525090565b60006001600160a01b0382166105b4565b611c3881611c1e565b811461016757600080fd5b80356105b481611c2f565b600060208284031215611c6357611c63600080fd5b60006108198484611c43565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611c9882611c6f565b81018181106001600160401b0382111715611cb557611cb5611c79565b6040525050565b6000611cc760405190565b9050611cd38282611c8f565b919050565b60006001600160401b03821115611cf157611cf1611c79565b611cfa82611c6f565b60200192915050565b82818337506000910152565b6000611d22611d1d84611cd8565b611cbc565b905082815260208101848484011115611d3d57611d3d600080fd5b611d48848285611d03565b509392505050565b600082601f830112611d6457611d64600080fd5b8135610819848260208601611d0f565b60008060408385031215611d8a57611d8a600080fd5b6000611d968585611c43565b92505060208301356001600160401b03811115611db557611db5600080fd5b611dc185828601611d50565b9150509250929050565b6003811061016757600080fd5b80356105b481611dcb565b60008060408385031215611df957611df9600080fd5b6000611e058585611dd8565b9250506020611dc185828601611c43565b805b82525050565b602081016105b48284611e16565b634e487b7160e01b600052602160045260246000fd5b6003811061016757610167611e2c565b80611cd381611e42565b60006105b482611e52565b611e1881611e5c565b602081016105b48284611e67565b6001600160401b038116611c38565b80356105b481611e7e565b60008060408385031215611eae57611eae600080fd5b6000611d968585611e8d565b6004811061016757600080fd5b80356105b481611eba565b600060208284031215611ee757611ee7600080fd5b60006108198484611ec7565b611e1881611c1e565b602081016105b48284611ef3565b60008060408385031215611f2057611f20600080fd5b6000611f2c8585611e8d565b9250506020611dc185828601611e8d565b60005b83811015611f58578181015183820152602001611f40565b50506000910152565b6000611f6b825190565b808452602084019350611f82818560208601611f3d565b611f8b81611c6f565b9093019392505050565b602080825281016110928184611f61565b80611c38565b80356105b481611fa6565b60008060408385031215611fcd57611fcd600080fd5b6000611f2c8585611fac565b6004811061016757610167611e2c565b80611cd381611fd9565b60006105b482611fe9565b611e1881611ff3565b602081016105b48284611ffe565b602c8152600060208201600080516020612a0c83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016105b481612015565b602c8152600060208201600080516020612a0c83398151915281526b6163746976652070726f787960a01b60208201529150612048565b602080825281016105b48161205f565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612048565b602080825281016105b4816120a6565b600060ff82166105b4565b611e1881612101565b602081016105b4828461210c565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612048565b602080825281016105b481612123565b634e487b7160e01b600052603260045260246000fd5b601a81526000602082017906c656e677468206d6173742067726561746572207468616e20360341b815291505b5060200190565b602080825281016105b48161219e565b604081016121f08285611e16565b6110926020830184611ef3565b801515611c38565b80516105b4816121fd565b60006020828403121561222557612225600080fd5b60006108198484612205565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b815291506121cb565b602080825281016105b481612231565b80516105b481611fa6565b60006020828403121561229257612292600080fd5b60006108198484612272565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612048565b602080825281016105b48161229e565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612048565b602080825281016105b4816122f9565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612048565b602080825281016105b48161234f565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612048565b602080825281016105b4816123a7565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b4576105b4612401565b6000600019820361243d5761243d612401565b5060010190565b6001600160401b038116611e18565b60006001600160401b0382166105b4565b611e1881612453565b60c0810161247b8289612444565b6124886020830188611e16565b6124956040830187612444565b6124a26060830186612444565b81810360808301526124b48185611f61565b90506124c360a0830184612464565b979650505050505050565b60006124d8825190565b6124e6818560208601611f3d565b9290920192915050565b600061109282846124ce565b634e487b7160e01b600052600160045260246000fd5b600c81526000602082016b24b73b30b634b21021a127a960a11b815291506121cb565b602080825281016105b481612512565b604081016125538285611e16565b6110926020830184611e16565b80516105b481611e7e565b6000612579611d1d84611cd8565b90508281526020810184848401111561259457612594600080fd5b611d48848285611f3d565b600082601f8301126125b3576125b3600080fd5b815161081984826020860161256b565b6000806000606084860312156125db576125db600080fd5b60006125e78686612272565b93505060206125f886828701612560565b92505060408401516001600160401b0381111561261757612617600080fd5b6126238682870161259f565b9150509250925092565b602081016105b48284612444565b601f81526000602082017f696e76616c6964206d616a20286578706563746564204d616a41727261792900815291506121cb565b602080825281016105b48161263b565b602581526000602082017f696e76616c6964206d616a20286578706563746564204d616a556e7369676e6581526464496e742960d81b60208201529150612048565b602080825281016105b48161267f565b602e81526000602082017f696e76616c6964206d616a20286578706563746564204d616a546167206f722081526d4d616a42797465537472696e672960901b60208201529150612048565b602080825281016105b4816126d1565b634e487b7160e01b600052601260045260246000fd5b6000826127515761275161272c565b500690565b818103818111156105b4576105b4612401565b602581526000602082017f63616e6e6f742068616e646c6520686561646572732077697468206578747261815264203e20323760d81b60208201529150612048565b602080825281016105b481612769565b600c81526000602082016b34b73b30b634b21031b137b960a11b815291506121cb565b602080825281016105b4816127bb565b603581526000602082017f696e76616c6964206d616a20286578706563746564204d616a5369676e6564498152746e74206f72204d616a556e7369676e6564496e742960581b60208201529150612048565b602080825281016105b4816127ee565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506121cb565b602080825281016105b481612850565b6014815260006020820173736c6963696e67206f7574206f662072616e676560601b815291506121cb565b602080825281016105b481612894565b8181028082158382048514176128e7576128e7612401565b5092915050565b80825b600185111561292d5780860481111561290c5761290c612401565b600185161561291a57908102905b80026129268560011c90565b94506128f1565b94509492505050565b60008261294557506001611092565b8161295257506000611092565b816001811461296857600281146129725761299f565b6001915050611092565b60ff84111561298357612983612401565b8360020a91508482111561299957612999612401565b50611092565b5060208310610133831016604e8410600b84101617156129d2575081810a838111156129cd576129cd612401565b611092565b6129df84848460016128ee565b925090508184048111156129f5576129f5612401565b0292915050565b6000611092600019848461293656fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122082d74d72326a9d8436ecb042a0db3e2076da8ab14e24baa2fd536ae9caf2405e64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100815760003560e01c80633659cfe6146100865780634f1ef286146100a85780635187599d146100bb57806352d1902d146100db5780636739afca146101065780639aabb5c31461012d5780639cdaed621461014c578063aaf10f421461016a578063ceb1a8cb1461018c578063d52f338a146101b9575b600080fd5b34801561009257600080fd5b506100a66100a1366004611c4e565b6101e6565b005b6100a66100b6366004611d74565b6102b4565b3480156100c757600080fd5b506100a66100d6366004611de3565b610369565b3480156100e757600080fd5b506100f0610485565b6040516100fd9190611e1e565b60405180910390f35b34801561011257600080fd5b506065546101209060ff1681565b6040516100fd9190611e70565b34801561013957600080fd5b506100a6610148366004611e98565b5050565b34801561015857600080fd5b506100a6610167366004611ed2565b50565b34801561017657600080fd5b5061017f6104e2565b6040516100fd9190611efc565b34801561019857600080fd5b506101ac6101a7366004611f0a565b6104f1565b6040516100fd9190611f95565b3480156101c557600080fd5b506101d96101d4366004611fb7565b6105ba565b6040516100fd9190612007565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036102375760405162461bcd60e51b815260040161022e9061204f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610269610613565b6001600160a01b03161461028f5760405162461bcd60e51b815260040161022e90612096565b6102988161062f565b60408051600080825260208201909252610167918391906106c7565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036102fc5760405162461bcd60e51b815260040161022e9061204f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661032e610613565b6001600160a01b0316146103545760405162461bcd60e51b815260040161022e90612096565b61035d8261062f565b610148828260016106c7565b600054610100900460ff16158080156103895750600054600160ff909116105b806103aa5750610398306107a9565b1580156103aa575060005460ff166001145b6103c65760405162461bcd60e51b815260040161022e906120f1565b6000805460ff1916600117905580156103e9576000805461ff0019166101001790555b6065805484919060ff1916600183600281111561040857610408611e2c565b021790555060658054610100600160a81b0319166101006001600160a01b038516021790556104356107b8565b8015610480576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061047790600190612115565b60405180910390a15b505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104cf5760405162461bcd60e51b815260040161022e90612178565b50600080516020612a2c83398151915290565b60006104ec610613565b905090565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061052b5761052b612188565b6001600160401b0392831660209182029290920181019190915260408051808201909152918616825281018290526000610564826107e1565b905060008160200151511161058b5760405162461bcd60e51b815260040161022e906121d2565b80602001516000815181106105a2576105a2612188565b60200260200101516040015193505050505b92915050565b6000806105c683610821565b905043816020015160070b12156105e15760039150506105b4565b60006105ec84610862565b905043816020015160070b1215610608576002925050506105b4565b506000949350505050565b600080516020612a2c833981519152546001600160a01b031690565b606554604051632474521560e21b81526101009091046001600160a01b03169060009082906391d148549061066a90849033906004016121e2565b602060405180830381865afa158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190612210565b6104805760405162461bcd60e51b815260040161022e90612262565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156106fa5761048083610898565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610754575060408051601f3d908101601f191682019092526107519181019061227d565b60015b6107705760405162461bcd60e51b815260040161022e906122e9565b600080516020612a2c833981519152811461079d5760405162461bcd60e51b815260040161022e9061233f565b506104808383836108ec565b6001600160a01b03163b151590565b600054610100900460ff166107df5760405162461bcd60e51b815260040161022e90612397565b565b6107e9611ba5565b60006107f483610917565b9050600061080e600663831f5ed360518560006001610a46565b905061081981610b20565b949350505050565b610829611bcd565b600061083d836001600160401b0316610f9d565b9050600061085760056309c30b2060518560006001610a46565b905061081981610fd5565b61086a611bcd565b600061087e836001600160401b0316610f9d565b905060006108576005639904f2ff60518560006001610a46565b6108a1816107a9565b6108bd5760405162461bcd60e51b815260040161022e906123f1565b600080516020612a2c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6108f58361102d565b6000825111806109025750805b1561048057610911838361106d565b50505050565b60208101515160609060009061092d6002611099565b6109379083612417565b915061094684600001516110e7565b6109509083612417565b915061095b81611099565b6109659083612417565b915060005b818110156109b6576109988560200151828151811061098b5761098b612188565b60200260200101516110e7565b6109a29084612417565b9250806109ae8161242a565b91505061096a565b5060006109c2836110fc565b90506109cf81600261111d565b84516109dc908290611129565b6109e6818361111d565b60005b82811015610a3357610a2186602001518281518110610a0a57610a0a612188565b60200260200101518361112990919063ffffffff16565b80610a2b8161242a565b9150506109e9565b50610a3d81611133565b95945050505050565b6060610a596005607f60991b018461115f565b6000806005607f60991b01888686610a72576000610a75565b60015b8a8a8e604051602001610a8d9695949392919061246d565b60408051601f1981840301815290829052610aa7916124f0565b600060405180830381855af49150503d8060008114610ae2576040519150601f19603f3d011682016040523d82523d6000602084013e610ae7565b606091505b509150915081610b0a57604051638a7db5bf60e01b815260040160405180910390fd5b610b13816111a7565b9998505050505050505050565b610b28611ba5565b600080610b358482611280565b9250905060028114610b4957610b496124fc565b610b538483611280565b9250905060028114610b6757610b676124fc565b610b7184836112cc565b845163ffffffff92831690529250610b8d908590849061128016565b92509050806001600160401b03811115610ba957610ba9611c79565b604051908082528060200260200182016040528015610bee57816020015b6040805180820190915260008082526020820152815260200190600190039081610bc75790505b5083516020015260005b81811015610cb057610c0a8584611280565b9350915060028214610c1e57610c1e6124fc565b610c2885846112cc565b855160200151805184908110610c4057610c40612188565b602090810291909101015163ffffffff92831690529350610c6590869085906112cc16565b855160200151805184908110610c7d57610c7d612188565b60200260200101516020018195508263ffffffff1663ffffffff1681525050508080610ca89061242a565b915050610bf8565b50610cbb8483611280565b92509050806001600160401b03811115610cd757610cd7611c79565b604051908082528060200260200182016040528015610d4757816020015b60408051610100810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e08201528252600019909201910181610cf55790505b50602084015260005b81811015610f9557610d628584611280565b9350915060088214610d7657610d766124fc565b610d80858461130d565b85602001518381518110610d9657610d96612188565b60209081029190910101516001600160401b039092169091529250610dbb858461130d565b85602001518381518110610dd157610dd1612188565b6020908102919091018101516001600160401b039093169201919091529250610dfa8584611327565b85602001518381518110610e1057610e10612188565b6020908102919091010151604001919091529250610e2e85846112cc565b85602001518381518110610e4457610e44612188565b6020026020010151606001819550826001600160401b03166001600160401b03168152505050610e7d838661149590919063ffffffff16565b85602001518381518110610e9357610e93612188565b60200260200101516080018195508260070b60070b8152505050610ec0838661149590919063ffffffff16565b85602001518381518110610ed657610ed6612188565b602002602001015160a0018195508260070b60070b8152505050610f03838661149590919063ffffffff16565b85602001518381518110610f1957610f19612188565b602002602001015160c0018195508260070b60070b8152505050610f46838661130d90919063ffffffff16565b85602001518381518110610f5c57610f5c612188565b602002602001015160e001819550826001600160401b03166001600160401b031681525050508080610f8d9061242a565b915050610d50565b505050919050565b60606000610fb3836001600160401b0316611099565b90506000610fc0826110fc565b9050610fcc81856114a3565b61081981611133565b610fdd611bcd565b600080610fea8482611280565b9250905060028114610ffe57610ffe6124fc565b6110088483611495565b60079190910b8452915061101c8483611495565b5060070b6020840152509092915050565b61103681610898565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606110928383604051806060016040528060278152602001612a4c602791396114af565b9392505050565b6000601782116110ab57506001919050565b60ff82116110bb57506002919050565b61ffff82116110cc57506003919050565b63ffffffff82116110df57506005919050565b506009919050565b6000816110926001600160401b038216611099565b611104611be4565b80516111109083611527565b5060006020820152919050565b61014882600483611591565b61014882826114a3565b606081602001516000146111595760405162461bcd60e51b815260040161022e90612535565b50515190565b4781811015611185578082604051634787a10360e11b815260040161022e929190612545565b823f1515806109115760405163064d954b60e41b815260040160405180910390fd5b60606000806000848060200190518101906111c291906125c3565b919450925090506001600160401b0382166111fc578051156111f757604051630e74990760e01b815260040160405180910390fd5b61125f565b6001600160401b0382166051148061121d57506001600160401b0382166071145b156112445780516000036111f757604051630e74990760e01b815260040160405180910390fd5b8160405163f1f6bced60e01b815260040161022e919061262d565b8215610819578260405163d4bb667160e01b815260040161022e9190611e1e565b600080600080611290868661159c565b96509092506001600160401b0316905060ff82166004146112c35760405162461bcd60e51b815260040161022e9061266f565b95939450505050565b6000806000806112dc868661159c565b96509092506001600160401b0316905060ff8216156112c35760405162461bcd60e51b815260040161022e906126c1565b6000808061131b85856112cc565b90969095509350505050565b60606000806000611338868661159c565b96509092506001600160401b0316905060ff82166006148061135d575060ff82166002145b6113795760405162461bcd60e51b815260040161022e9061271c565b60051960ff8316016113b25761138f868661159c565b96509092506001600160401b0316905060ff82166002146113b2576113b26124fc565b60006113be8287612417565b90506000826001600160401b038111156113da576113da611c79565b6040519080825280601f01601f191660200182016040528015611404576020820181803683370190505b5090506000875b838110156114795789818151811061142557611425612188565b602001015160f81c60f81b83838151811061144257611442612188565b60200101906001600160f81b031916908160001a905350816114638161242a565b92505080806114719061242a565b91505061140b565b5081611485858a612417565b9650965050505050509250929050565b6000808061131b8585611719565b61014882600083611768565b6060600080856001600160a01b0316856040516114cc91906124f0565b600060405180830381855af49150503d8060008114611507576040519150601f19603f3d011682016040523d82523d6000602084013e61150c565b606091505b509150915061151d86838387611881565b9695505050505050565b61152f611c04565b61153a602083612742565b156115625761154a602083612742565b611555906020612756565b61155f9083612417565b91505b60208084018390526040518085526000815290818401018181101561158657600080fd5b604052509192915050565b610480838383611768565b6000806000806115ac86866118c8565b90506115b9600186612417565b94506007600582901c16601f8216601c81106115e75760405162461bcd60e51b815260040161022e906127ab565b60188160ff1610156116055790945060ff1692508491506117129050565b8060ff1660180361166257600061161c89896118c8565b9050611629600189612417565b975060188160ff16101561164f5760405162461bcd60e51b815260040161022e906127de565b9195505060ff1692508491506117129050565b8060ff1660190361169c5760006116798989611917565b9050611686600289612417565b97509195505061ffff1692508491506117129050565b8060ff16601a036116d85760006116b38989611950565b90506116c0600489612417565b97509195505063ffffffff1692508491506117129050565b8060ff16601b146116eb576116eb6124fc565b60006116f78989611989565b9050611704600889612417565b975091955090935085925050505b9250925092565b600080600080611729868661159c565b96509092506001600160401b0316905060ff82166001148061174c575060ff8216155b6112c35760405162461bcd60e51b815260040161022e90612840565b6017816001600160401b03161161178e5782516109119060e0600585901b1683176119c2565b60ff816001600160401b0316116117ce5782516117b6906018611fe0600586901b16176119c2565b508251610911906001600160401b0383166001611a1e565b61ffff816001600160401b03161161180f5782516117f7906019611fe0600586901b16176119c2565b508251610911906001600160401b0383166002611a1e565b63ffffffff816001600160401b03161161185257825161183a90601a611fe0600586901b16176119c2565b508251610911906001600160401b0383166004611a1e565b825161186990601b611fe0600586901b16176119c2565b508251610911906001600160401b0383166008611a1e565b606083156118be5782516000036118b75761189b856107a9565b6118b75760405162461bcd60e51b815260040161022e90612884565b5081610819565b6108198383611a96565b60006118d5826001612417565b835110156118f55760405162461bcd60e51b815260040161022e906128bf565b82828151811061190757611907612188565b016020015160f81c905092915050565b6000611924826002612417565b835110156119445760405162461bcd60e51b815260040161022e906128bf565b50016020015160f01c90565b600061195d826004612417565b8351101561197d5760405162461bcd60e51b815260040161022e906128bf565b50016020015160e01c90565b6000611996826008612417565b835110156119b65760405162461bcd60e51b815260040161022e906128bf565b50016020015160c01c90565b6119ca611c04565b82515160006119da826001612417565b9050846020015182106119fb576119fb856119f68360026128cf565b611ac0565b84516020838201018581538151831115611a13578282525b509495945050505050565b611a26611c04565b8351516000611a358285612417565b90508560200151811115611a5257611a52866119f68360026128cf565b60006001611a62866101006129fc565b611a6c9190612756565b905086518281018783198251161781528151841115611a89578382525b5096979650505050505050565b815115611aa65781518083602001fd5b8060405162461bcd60e51b815260040161022e9190611f95565b8151611acc8383611527565b506109118382611ada611c04565b61109283838451611ae9611c04565b8251821115611af757600080fd5b8351516000611b068483612417565b90508560200151811115611b2357611b23866119f68360026128cf565b855180518382016020019160009180851115611b3d578482525b505050602086015b60208610611b7d5780518252611b5c602083612417565b9150611b69602082612417565b9050611b76602087612756565b9550611b45565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b6040805160808101825260009181019182526060808201529081908152602001606081525090565b604080518082019091526000808252602082015290565b6040518060400160405280611bf7611c04565b8152602001600081525090565b604051806040016040528060608152602001600081525090565b60006001600160a01b0382166105b4565b611c3881611c1e565b811461016757600080fd5b80356105b481611c2f565b600060208284031215611c6357611c63600080fd5b60006108198484611c43565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b611c9882611c6f565b81018181106001600160401b0382111715611cb557611cb5611c79565b6040525050565b6000611cc760405190565b9050611cd38282611c8f565b919050565b60006001600160401b03821115611cf157611cf1611c79565b611cfa82611c6f565b60200192915050565b82818337506000910152565b6000611d22611d1d84611cd8565b611cbc565b905082815260208101848484011115611d3d57611d3d600080fd5b611d48848285611d03565b509392505050565b600082601f830112611d6457611d64600080fd5b8135610819848260208601611d0f565b60008060408385031215611d8a57611d8a600080fd5b6000611d968585611c43565b92505060208301356001600160401b03811115611db557611db5600080fd5b611dc185828601611d50565b9150509250929050565b6003811061016757600080fd5b80356105b481611dcb565b60008060408385031215611df957611df9600080fd5b6000611e058585611dd8565b9250506020611dc185828601611c43565b805b82525050565b602081016105b48284611e16565b634e487b7160e01b600052602160045260246000fd5b6003811061016757610167611e2c565b80611cd381611e42565b60006105b482611e52565b611e1881611e5c565b602081016105b48284611e67565b6001600160401b038116611c38565b80356105b481611e7e565b60008060408385031215611eae57611eae600080fd5b6000611d968585611e8d565b6004811061016757600080fd5b80356105b481611eba565b600060208284031215611ee757611ee7600080fd5b60006108198484611ec7565b611e1881611c1e565b602081016105b48284611ef3565b60008060408385031215611f2057611f20600080fd5b6000611f2c8585611e8d565b9250506020611dc185828601611e8d565b60005b83811015611f58578181015183820152602001611f40565b50506000910152565b6000611f6b825190565b808452602084019350611f82818560208601611f3d565b611f8b81611c6f565b9093019392505050565b602080825281016110928184611f61565b80611c38565b80356105b481611fa6565b60008060408385031215611fcd57611fcd600080fd5b6000611f2c8585611fac565b6004811061016757610167611e2c565b80611cd381611fd9565b60006105b482611fe9565b611e1881611ff3565b602081016105b48284611ffe565b602c8152600060208201600080516020612a0c83398151915281526b19195b1959d85d1958d85b1b60a21b602082015291505b5060400190565b602080825281016105b481612015565b602c8152600060208201600080516020612a0c83398151915281526b6163746976652070726f787960a01b60208201529150612048565b602080825281016105b48161205f565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612048565b602080825281016105b4816120a6565b600060ff82166105b4565b611e1881612101565b602081016105b4828461210c565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612048565b602080825281016105b481612123565b634e487b7160e01b600052603260045260246000fd5b601a81526000602082017906c656e677468206d6173742067726561746572207468616e20360341b815291505b5060200190565b602080825281016105b48161219e565b604081016121f08285611e16565b6110926020830184611ef3565b801515611c38565b80516105b4816121fd565b60006020828403121561222557612225600080fd5b60006108198484612205565b601a81526000602082017913db9b1e48185b1b1bddd959081c9bdb194818d85b8818d85b1b60321b815291506121cb565b602080825281016105b481612231565b80516105b481611fa6565b60006020828403121561229257612292600080fd5b60006108198484612272565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612048565b602080825281016105b48161229e565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612048565b602080825281016105b4816122f9565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612048565b602080825281016105b48161234f565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612048565b602080825281016105b4816123a7565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b4576105b4612401565b6000600019820361243d5761243d612401565b5060010190565b6001600160401b038116611e18565b60006001600160401b0382166105b4565b611e1881612453565b60c0810161247b8289612444565b6124886020830188611e16565b6124956040830187612444565b6124a26060830186612444565b81810360808301526124b48185611f61565b90506124c360a0830184612464565b979650505050505050565b60006124d8825190565b6124e6818560208601611f3d565b9290920192915050565b600061109282846124ce565b634e487b7160e01b600052600160045260246000fd5b600c81526000602082016b24b73b30b634b21021a127a960a11b815291506121cb565b602080825281016105b481612512565b604081016125538285611e16565b6110926020830184611e16565b80516105b481611e7e565b6000612579611d1d84611cd8565b90508281526020810184848401111561259457612594600080fd5b611d48848285611f3d565b600082601f8301126125b3576125b3600080fd5b815161081984826020860161256b565b6000806000606084860312156125db576125db600080fd5b60006125e78686612272565b93505060206125f886828701612560565b92505060408401516001600160401b0381111561261757612617600080fd5b6126238682870161259f565b9150509250925092565b602081016105b48284612444565b601f81526000602082017f696e76616c6964206d616a20286578706563746564204d616a41727261792900815291506121cb565b602080825281016105b48161263b565b602581526000602082017f696e76616c6964206d616a20286578706563746564204d616a556e7369676e6581526464496e742960d81b60208201529150612048565b602080825281016105b48161267f565b602e81526000602082017f696e76616c6964206d616a20286578706563746564204d616a546167206f722081526d4d616a42797465537472696e672960901b60208201529150612048565b602080825281016105b4816126d1565b634e487b7160e01b600052601260045260246000fd5b6000826127515761275161272c565b500690565b818103818111156105b4576105b4612401565b602581526000602082017f63616e6e6f742068616e646c6520686561646572732077697468206578747261815264203e20323760d81b60208201529150612048565b602080825281016105b481612769565b600c81526000602082016b34b73b30b634b21031b137b960a11b815291506121cb565b602080825281016105b4816127bb565b603581526000602082017f696e76616c6964206d616a20286578706563746564204d616a5369676e6564498152746e74206f72204d616a556e7369676e6564496e742960581b60208201529150612048565b602080825281016105b4816127ee565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506121cb565b602080825281016105b481612850565b6014815260006020820173736c6963696e67206f7574206f662072616e676560601b815291506121cb565b602080825281016105b481612894565b8181028082158382048514176128e7576128e7612401565b5092915050565b80825b600185111561292d5780860481111561290c5761290c612401565b600185161561291a57908102905b80026129268560011c90565b94506128f1565b94509492505050565b60008261294557506001611092565b8161295257506000611092565b816001811461296857600281146129725761299f565b6001915050611092565b60ff84111561298357612983612401565b8360020a91508482111561299957612999612401565b50611092565b5060208310610133831016604e8410600b84101617156129d2575081810a838111156129cd576129cd612401565b611092565b6129df84848460016128ee565b925090508184048111156129f5576129f5612401565b0292915050565b6000611092600019848461293656fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122082d74d72326a9d8436ecb042a0db3e2076da8ab14e24baa2fd536ae9caf2405e64736f6c63430008150033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "getReplicaDealState(bytes32,uint64)": {
        "details": "TODO:check _claimId belongs to the _cid, now filecoin-solidity is not support           https://github.com/dataswap/core/issues/41"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "setMockClaimData(uint64,bytes)": {
        "details": "mock the filecoin claim data"
      },
      "setMockDealState(uint8)": {
        "details": "do nothing,just for mock"
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new"
      }
    },
    "title": "Filecoin",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActorError(int256)": [
        {
          "notice": "the called actor returned an error as part of its expected behaviour"
        }
      ],
      "ActorNotFound()": [
        {
          "notice": "the actor is not found"
        }
      ],
      "FailToCallActor()": [
        {
          "notice": "an error happened trying to call the actor"
        }
      ],
      "InvalidCodec(uint64)": [
        {
          "notice": "the codec received is not valid"
        }
      ],
      "InvalidResponseLength()": [
        {
          "notice": "the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none."
        }
      ],
      "NotEnoughBalance(uint256,uint256)": [
        {
          "notice": "the smart contract has no enough balance to transfer"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getReplicaClaimData(uint64,uint64)": {
        "notice": "Internal function to get the claim of a Filecoin storage for a replica."
      },
      "getReplicaDealState(bytes32,uint64)": {
        "notice": "Internal function to get the state of a Filecoin storage deal for a replica."
      },
      "initialize(uint8,address)": {
        "notice": "initialize function to initialize the contract and grant the default admin role to the deployer."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5186,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5189,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5168,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5483,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24612,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "network",
        "offset": 0,
        "slot": "101",
        "type": "t_enum(Network)45087"
      },
      {
        "astId": 24615,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "roles",
        "offset": 1,
        "slot": "101",
        "type": "t_contract(IRoles)29558"
      },
      {
        "astId": 24620,
        "contract": "src/v0.8/core/filecoin/Filecoin.sol:Filecoin",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)32_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)32_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[32]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoles)29558": {
        "encoding": "inplace",
        "label": "contract IRoles",
        "numberOfBytes": "20"
      },
      "t_enum(Network)45087": {
        "encoding": "inplace",
        "label": "enum FilecoinType.Network",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}